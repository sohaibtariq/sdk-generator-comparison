/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.lob.api.controllers;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import com.fasterxml.jackson.core.type.TypeReference;
import com.lob.api.ApiHelper;
import com.lob.api.LobClient;
import com.lob.api.exceptions.ApiException;
import com.lob.api.models.QrCodeAnalyticsResponse;
import io.apimatic.core.utilities.TestHelper;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

public class QRCodesControllerTest extends BaseControllerTest {

    /**
     * Client instance.
     */
    private static LobClient client;
    
    /**
     * Controller instance (for all tests).
     */
    private static QRCodesController controller;

    /**
     * Setup test class.
     */
    @BeforeClass
    public static void setUpClass() {
        client = createConfiguration();
        controller = client.getQRCodesController();
    }

    /**
     * Tear down test class.
     */
    @AfterClass
    public static void tearDownClass() {
        controller = null;
    }

    /**
     * Returns a list of your QR codes. The QR codes are returned sorted by scan date, with the most
     * recently scanned QR codes appearing first.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestQrCodesList() throws Exception {
        // Parameters for the API call
        Integer limit = 10;
        Integer offset = 0;
        List<String> include = null;
        Map<String, String> dateCreated = null;
        Boolean scanned = null;
        List<String> resourceIds = ApiHelper.deserializeArray(
                "[]",
                String[].class);

        // Set callback and perform API call
        QrCodeAnalyticsResponse result = null;
        try {
            result = controller.qrCodesList(limit, offset, include, dateCreated, scanned, resourceIds);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"data\":[{\"resource_id\":\"ltr_d5a5a89da9106f8\",\"date_created\":\"2019-07-27T"
                + "23:49:01.511Z\",\"number_of_scans\":2,\"scans\":[{\"ip_location\":\"127.0.0.1\","
                + "\"scan_date\":\"2022-07-27T23:49:01.511Z\"},{\"ip_location\":\"127.0.0.1\",\"sca"
                + "n_date\":\"2022-07-29T23:45:00.436Z\"}]},{\"resource_id\":\"psc_d5a5a89da9106f8"
                + "\",\"date_created\":\"2022-09-27T23:49:01.511Z\",\"number_of_scans\":1,\"scans"
                + "\":[{\"ip_location\":\"127.0.0.1\",\"scan_date\":\"2022-09-27T23:49:01.511Z\"}]}"
                + "],\"object\":\"list\",\"count\":2,\"scanned_count\":2,\"total_count\":2}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

}
