/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.lob.api.controllers;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import com.lob.api.ApiHelper;
import com.lob.api.DateTimeHelper;
import com.lob.api.LobClient;
import com.lob.api.exceptions.ApiException;
import com.lob.api.models.AllCampaigns;
import com.lob.api.models.BeforeAfter;
import io.apimatic.core.utilities.TestHelper;
import java.time.LocalDateTime;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

public class CampaignsControllerTest extends BaseControllerTest {

    /**
     * Client instance.
     */
    private static LobClient client;
    
    /**
     * Controller instance (for all tests).
     */
    private static CampaignsController controller;

    /**
     * Setup test class.
     */
    @BeforeClass
    public static void setUpClass() {
        client = createConfiguration();
        controller = client.getCampaignsController();
    }

    /**
     * Tear down test class.
     */
    @AfterClass
    public static void tearDownClass() {
        controller = null;
    }

    /**
     * Returns a list of your campaigns. The campaigns are returned sorted by creation date, with
     * the most recently created campaigns appearing first.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestCampaignsList() throws Exception {
        // Parameters for the API call
        Integer limit = 10;
        List<String> include = null;
        BeforeAfter beforeAfter = null;

        // Set callback and perform API call
        AllCampaigns result = null;
        try {
            result = controller.campaignsList(limit, include, beforeAfter);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"data\":[{\"id\":\"cmp_e05ee61ff80764b\",\"billing_group_id\":\"bg_fe3079dcdd80e"
                + "5ae\",\"name\":\"My Campaign\",\"description\":\"My Campaign's description\",\"s"
                + "chedule_type\":\"immediate\",\"send_date\":null,\"target_delivery_date\":null,"
                + "\"cancel_window_campaign_minutes\":60,\"metadata\":{},\"use_type\":\"marketing"
                + "\",\"is_draft\":true,\"deleted\":false,\"creatives\":[],\"uploads\":[],\"auto_ca"
                + "ncel_if_ncoa\":false,\"date_created\":\"2017-09-05T17:47:53.767Z\",\"date_modifi"
                + "ed\":\"2017-09-05T17:47:53.767Z\",\"object\":\"campaign\"}],\"object\":\"list\","
                + "\"previous_url\":null,\"next_url\":null,\"count\":1}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

}
