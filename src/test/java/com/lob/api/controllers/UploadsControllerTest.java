/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.lob.api.controllers;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import com.lob.api.ApiHelper;
import com.lob.api.LobClient;
import com.lob.api.exceptions.ApiException;
import com.lob.api.models.Upload;
import com.lob.api.utilities.FileWrapper;
import io.apimatic.core.utilities.TestHelper;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

public class UploadsControllerTest extends BaseControllerTest {

    /**
     * Client instance.
     */
    private static LobClient client;
    
    /**
     * Controller instance (for all tests).
     */
    private static UploadsController controller;

    /**
     * Setup test class.
     */
    @BeforeClass
    public static void setUpClass() {
        client = createConfiguration();
        controller = client.getUploadsController();
    }

    /**
     * Tear down test class.
     */
    @AfterClass
    public static void tearDownClass() {
        controller = null;
    }

    /**
     * Returns a list of your uploads. Optionally, filter uploads by campaign.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestUploadsList() throws Exception {
        // Parameters for the API call
        String campaignId = null;

        // Set callback and perform API call
        List<Upload> result = null;
        try {
            result = controller.uploadsList(campaignId);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys",
                TestHelper.isArrayOfJsonObjectsProperSubsetOf(
                "[{\"id\":\"upl_71be866e430b11e9\",\"accountId\":\"fa9ea650fc7b31a89f92\",\"campaig"
                + "nId\":\"cmp_1933ad629bae1408\",\"mode\":\"test\",\"failuresUrl\":\"https://www.e"
                + "xample.com\",\"originalFilename\":\"my_audience.csv\",\"state\":\"Draft\",\"tota"
                + "lMailpieces\":100,\"failedMailpieces\":5,\"validatedMailpieces\":95,\"bytesProce"
                + "ssed\":17268,\"dateCreated\":\"2017-09-05T17:47:53.767Z\",\"dateModified\":\"201"
                + "7-09-05T17:47:53.767Z\",\"requiredAddressColumnMapping\":{\"name\":\"recipient_n"
                + "ame\",\"address_line1\":\"primary_line\",\"address_city\":\"city\",\"address_sta"
                + "te\":\"state\",\"address_zip\":\"zip_code\"},\"optionalAddressColumnMapping\":{"
                + "\"address_line2\":\"secondary_line\",\"company\":\"company\",\"address_country"
                + "\":\"country\"},\"mergeVariableColumnMapping\":{\"gift_code\":\"code\"},\"metada"
                + "ta\":{\"columns\":[\"recipient_name\",\"zip_code\"]}}]",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

}
