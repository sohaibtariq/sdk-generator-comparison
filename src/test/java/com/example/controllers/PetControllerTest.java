/*
 * PetstoreExtendedLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.example.controllers;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import com.example.ApiHelper;
import com.example.PetstoreExtendedClient;
import com.example.exceptions.ApiException;
import com.example.models.Pet;
import com.example.models.PetStatusEnum;
import com.example.models.Tag;
import com.example.utilities.FileWrapper;
import io.apimatic.core.utilities.TestHelper;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

public class PetControllerTest extends BaseControllerTest {

    /**
     * Client instance.
     */
    private static PetstoreExtendedClient client;
    
    /**
     * Controller instance (for all tests).
     */
    private static PetController controller;

    /**
     * Setup test class.
     */
    @BeforeClass
    public static void setUpClass() {
        client = createConfiguration();
        controller = client.getPetController();
    }

    /**
     * Tear down test class.
     */
    @AfterClass
    public static void tearDownClass() {
        controller = null;
    }

    /**
     * Multiple status values can be provided with comma separated strings.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestFindPetsByStatus() throws Exception {
        // Parameters for the API call
        PetStatusEnum status = PetStatusEnum.fromString(
                "pending");

        // Set callback and perform API call
        List<Pet> result = null;
        try {
            result = controller.findPetsByStatus(status);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys",
                TestHelper.isArrayOfJsonObjectsProperSubsetOf(
                "[{\"name\":\"doggie\",\"category\":{\"id\":1,\"name\":\"Dogs\"},\"photoUrls\":[\"h"
                + "ttp://www.example.com/photo.jpg\"],\"tags\":[{\"id\":1,\"name\":\"Pet\"}],\"stat"
                + "us\":\"pending\"}]",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestFindPetsByTags() throws Exception {
        // Parameters for the API call
        List<Tag> tags = ApiHelper.deserializeArray(
                "[{\"id\":1234,\"name\":\"Hugo\"}]",
                Tag[].class);

        // Set callback and perform API call
        List<Pet> result = null;
        try {
            result = controller.findPetsByTags(tags);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys",
                TestHelper.isArrayOfJsonObjectsProperSubsetOf(
                "[{\"name\":\"doggie\",\"category\":{\"id\":1,\"name\":\"Dogs\"},\"photoUrls\":[\"h"
                + "ttp://www.example.com/photo.jpg\"],\"tags\":[{\"id\":1,\"name\":\"Pet\"}],\"stat"
                + "us\":\"pending\"}]",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * Returns a single pet.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestGetPetById() throws Exception {
        // Parameters for the API call
        long petId = 1234L;

        // Set callback and perform API call
        try {
            controller.getPetById(petId);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

    }

    /**
     * update a pet using form data.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestUpdatePetWithForm() throws Exception {
        // Parameters for the API call
        long petId = 12345L;
        String name = 
                "Fido";
        String status = 
                "pending";

        // Set callback and perform API call
        try {
            controller.updatePetWithForm(petId, name, status);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

    }

    /**
     * delete a pet based on a unique id.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestDeletePet() throws Exception {
        // Parameters for the API call
        long petId = 1234L;

        // Set callback and perform API call
        try {
            controller.deletePet(petId);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 201", 
                201, httpResponse.getResponse().getStatusCode());

    }

    /**
     * upload an image of a pet.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestUploadFile() throws Exception {
        // Parameters for the API call
        long petId = 123L;
        String additionalMetadata = 
                "foobar";
        FileWrapper body = null;

        // Set callback and perform API call
        try {
            controller.uploadFile(petId, additionalMetadata, body);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

    }

}
