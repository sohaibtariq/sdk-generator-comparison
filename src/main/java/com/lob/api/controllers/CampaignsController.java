/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.lob.api.controllers;

import com.lob.api.ApiHelper;
import com.lob.api.DateTimeHelper;
import com.lob.api.Server;
import com.lob.api.exceptions.ApiException;
import com.lob.api.exceptions.ErrorErrorException;
import com.lob.api.http.request.HttpMethod;
import com.lob.api.models.AllCampaigns;
import com.lob.api.models.BeforeAfter;
import com.lob.api.models.Campaign;
import com.lob.api.models.CampaignDeleted;
import com.lob.api.models.CmpScheduleTypeEnum;
import com.lob.api.models.CmpUseTypeEnum;
import com.lob.api.models.XLangOutputEnum;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import java.io.IOException;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class CampaignsController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public CampaignsController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * Returns a list of your campaigns. The campaigns are returned sorted by creation date, with
     * the most recently created campaigns appearing first.
     * @param  limit  Optional parameter: How many results to return.
     * @param  include  Optional parameter: Request that the response include the total count by
     *         specifying `include=["total_count"]`.
     * @param  beforeAfter  Optional parameter: `before` and `after` are both optional but only one
     *         of them can be in the query at a time.
     * @return    Returns the AllCampaigns response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public AllCampaigns campaignsList(
            final Integer limit,
            final List<String> include,
            final BeforeAfter beforeAfter) throws ApiException, IOException {
        return prepareCampaignsListRequest(limit, include, beforeAfter).execute();
    }

    /**
     * Returns a list of your campaigns. The campaigns are returned sorted by creation date, with
     * the most recently created campaigns appearing first.
     * @param  limit  Optional parameter: How many results to return.
     * @param  include  Optional parameter: Request that the response include the total count by
     *         specifying `include=["total_count"]`.
     * @param  beforeAfter  Optional parameter: `before` and `after` are both optional but only one
     *         of them can be in the query at a time.
     * @return    Returns the AllCampaigns response from the API call
     */
    public CompletableFuture<AllCampaigns> campaignsListAsync(
            final Integer limit,
            final List<String> include,
            final BeforeAfter beforeAfter) {
        try { 
            return prepareCampaignsListRequest(limit, include, beforeAfter).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for campaignsList.
     */
    private ApiCall<AllCampaigns, ApiException> prepareCampaignsListRequest(
            final Integer limit,
            final List<String> include,
            final BeforeAfter beforeAfter) throws IOException {
        return new ApiCall.Builder<AllCampaigns, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/campaigns")
                        .queryParam(param -> param.key("limit")
                                .value((limit != null) ? limit : 10).isRequired(false))
                        .queryParam(param -> param.key("include")
                                .value(include).isRequired(false))
                        .queryParam(param -> param.key("before/after")
                                .value(beforeAfter).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, AllCampaigns.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Creates a new campaign with the provided properties. See how to launch your first campaign
     * [here](https://help.lob.com/print-and-mail/building-a-mail-strategy/campaign-or-triggered-sends/launch-your-first-campaign).
     * @param  name  Required parameter: Name of the campaign.
     * @param  scheduleType  Required parameter: How the campaign should be scheduled. Only value
     *         available today is `immediate`.
     * @param  useType  Required parameter: The use type for each mailpiece. Can be one of
     *         marketing, operational, or null. Null use_type is only allowed if an account default
     *         use_type is selected in Account Settings. For more information on use_type, see our
     *         [Help Center
     *         article](https://help.lob.com/print-and-mail/building-a-mail-strategy/managing-mail-settings/declaring-mail-use-type).
     * @param  xLangOutput  Optional parameter: * `native` - Translate response to the native
     *         language of the country in the request * `match` - match the response to the language
     *         in the request Default response is in English.
     * @param  billingGroupId  Optional parameter: Unique identifier prefixed with `bg_`.
     * @param  description  Optional parameter: An internal description that identifies this
     *         resource. Must be no longer than 255 characters.
     * @param  targetDeliveryDate  Optional parameter: If `schedule_type` is `target_delivery_date`,
     *         provide a targeted delivery date for mail pieces in this campaign.
     * @param  sendDate  Optional parameter: If `schedule_type` is `scheduled_send_date`, provide a
     *         date to send this campaign.
     * @param  cancelWindowCampaignMinutes  Optional parameter: A window, in minutes, within which
     *         the campaign can be canceled.
     * @param  metadata  Optional parameter: Use metadata to store custom information for tagging
     *         and labeling back to your internal systems. Must be an object with up to 20 key-value
     *         pairs. Keys must be at most 40 characters and values must be at most 500 characters.
     *         Neither can contain the characters `"` and `\`. i.e. '{"customer_id" :
     *         "NEWYORK2015"}' Nested objects are not supported. See [Metadata](#section/Metadata)
     *         for more information.
     * @param  autoCancelIfNcoa  Optional parameter: Whether or not a mail piece should be
     *         automatically canceled and not sent if the address is updated via NCOA.
     * @return    Returns the Campaign response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Campaign campaignCreate(
            final String name,
            final CmpScheduleTypeEnum scheduleType,
            final CmpUseTypeEnum useType,
            final XLangOutputEnum xLangOutput,
            final String billingGroupId,
            final String description,
            final LocalDateTime targetDeliveryDate,
            final LocalDateTime sendDate,
            final Integer cancelWindowCampaignMinutes,
            final Map<String, String> metadata,
            final Boolean autoCancelIfNcoa) throws ApiException, IOException {
        return prepareCampaignCreateRequest(name, scheduleType, useType, xLangOutput,
                billingGroupId, description, targetDeliveryDate, sendDate,
                cancelWindowCampaignMinutes, metadata, autoCancelIfNcoa).execute();
    }

    /**
     * Creates a new campaign with the provided properties. See how to launch your first campaign
     * [here](https://help.lob.com/print-and-mail/building-a-mail-strategy/campaign-or-triggered-sends/launch-your-first-campaign).
     * @param  name  Required parameter: Name of the campaign.
     * @param  scheduleType  Required parameter: How the campaign should be scheduled. Only value
     *         available today is `immediate`.
     * @param  useType  Required parameter: The use type for each mailpiece. Can be one of
     *         marketing, operational, or null. Null use_type is only allowed if an account default
     *         use_type is selected in Account Settings. For more information on use_type, see our
     *         [Help Center
     *         article](https://help.lob.com/print-and-mail/building-a-mail-strategy/managing-mail-settings/declaring-mail-use-type).
     * @param  xLangOutput  Optional parameter: * `native` - Translate response to the native
     *         language of the country in the request * `match` - match the response to the language
     *         in the request Default response is in English.
     * @param  billingGroupId  Optional parameter: Unique identifier prefixed with `bg_`.
     * @param  description  Optional parameter: An internal description that identifies this
     *         resource. Must be no longer than 255 characters.
     * @param  targetDeliveryDate  Optional parameter: If `schedule_type` is `target_delivery_date`,
     *         provide a targeted delivery date for mail pieces in this campaign.
     * @param  sendDate  Optional parameter: If `schedule_type` is `scheduled_send_date`, provide a
     *         date to send this campaign.
     * @param  cancelWindowCampaignMinutes  Optional parameter: A window, in minutes, within which
     *         the campaign can be canceled.
     * @param  metadata  Optional parameter: Use metadata to store custom information for tagging
     *         and labeling back to your internal systems. Must be an object with up to 20 key-value
     *         pairs. Keys must be at most 40 characters and values must be at most 500 characters.
     *         Neither can contain the characters `"` and `\`. i.e. '{"customer_id" :
     *         "NEWYORK2015"}' Nested objects are not supported. See [Metadata](#section/Metadata)
     *         for more information.
     * @param  autoCancelIfNcoa  Optional parameter: Whether or not a mail piece should be
     *         automatically canceled and not sent if the address is updated via NCOA.
     * @return    Returns the Campaign response from the API call
     */
    public CompletableFuture<Campaign> campaignCreateAsync(
            final String name,
            final CmpScheduleTypeEnum scheduleType,
            final CmpUseTypeEnum useType,
            final XLangOutputEnum xLangOutput,
            final String billingGroupId,
            final String description,
            final LocalDateTime targetDeliveryDate,
            final LocalDateTime sendDate,
            final Integer cancelWindowCampaignMinutes,
            final Map<String, String> metadata,
            final Boolean autoCancelIfNcoa) {
        try { 
            return prepareCampaignCreateRequest(name, scheduleType, useType, xLangOutput, billingGroupId,
            description, targetDeliveryDate, sendDate, cancelWindowCampaignMinutes, metadata,
            autoCancelIfNcoa).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for campaignCreate.
     */
    private ApiCall<Campaign, ApiException> prepareCampaignCreateRequest(
            final String name,
            final CmpScheduleTypeEnum scheduleType,
            final CmpUseTypeEnum useType,
            final XLangOutputEnum xLangOutput,
            final String billingGroupId,
            final String description,
            final LocalDateTime targetDeliveryDate,
            final LocalDateTime sendDate,
            final Integer cancelWindowCampaignMinutes,
            final Map<String, String> metadata,
            final Boolean autoCancelIfNcoa) throws IOException {
        return new ApiCall.Builder<Campaign, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/campaigns")
                        .formParam(param -> param.key("name")
                                .value(name))
                        .formParam(param -> param.key("schedule_type")
                                .value((scheduleType != null) ? scheduleType.value() : null))
                        .formParam(param -> param.key("use_type")
                                .value((useType != null) ? useType.value() : null).isRequired(false))
                        .formParam(param -> param.key("billing_group_id")
                                .value(billingGroupId).isRequired(false))
                        .formParam(param -> param.key("description")
                                .value(description).isRequired(false))
                        .formParam(param -> param.key("target_delivery_date")
                                .value(DateTimeHelper.toRfc8601DateTime(targetDeliveryDate)).isRequired(false))
                        .formParam(param -> param.key("send_date")
                                .value(DateTimeHelper.toRfc8601DateTime(sendDate)).isRequired(false))
                        .formParam(param -> param.key("cancel_window_campaign_minutes")
                                .value(cancelWindowCampaignMinutes).isRequired(false))
                        .formParam(param -> param.key("metadata")
                                .value(metadata).isRequired(false))
                        .formParam(param -> param.key("auto_cancel_if_ncoa")
                                .value(autoCancelIfNcoa).isRequired(false))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/x-www-form-urlencoded").isRequired(false))
                        .headerParam(param -> param.key("x-lang-output")
                                .value((xLangOutput != null) ? xLangOutput.value() : null).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Campaign.class))
                        .nullify404(false)
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Error",
                                (reason, context) -> new ErrorErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Retrieves the details of an existing campaign. You need only supply the unique campaign
     * identifier that was returned upon campaign creation.
     * @param  cmpId  Required parameter: id of the campaign
     * @return    Returns the Campaign response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Campaign campaignRetrieve(
            final String cmpId) throws ApiException, IOException {
        return prepareCampaignRetrieveRequest(cmpId).execute();
    }

    /**
     * Retrieves the details of an existing campaign. You need only supply the unique campaign
     * identifier that was returned upon campaign creation.
     * @param  cmpId  Required parameter: id of the campaign
     * @return    Returns the Campaign response from the API call
     */
    public CompletableFuture<Campaign> campaignRetrieveAsync(
            final String cmpId) {
        try { 
            return prepareCampaignRetrieveRequest(cmpId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for campaignRetrieve.
     */
    private ApiCall<Campaign, ApiException> prepareCampaignRetrieveRequest(
            final String cmpId) throws IOException {
        return new ApiCall.Builder<Campaign, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/campaigns/{cmp_id}")
                        .templateParam(param -> param.key("cmp_id").value(cmpId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Campaign.class))
                        .nullify404(false)
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Error",
                                (reason, context) -> new ErrorErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Update the details of an existing campaign. You need only supply the unique identifier that
     * was returned upon campaign creation.
     * @param  cmpId  Required parameter: id of the campaign
     * @param  name  Optional parameter: Example:
     * @param  description  Optional parameter: An internal description that identifies this
     *         resource. Must be no longer than 255 characters.
     * @param  scheduleType  Optional parameter: How the campaign should be scheduled. Only value
     *         available today is `immediate`.
     * @param  targetDeliveryDate  Optional parameter: If `schedule_type` is `target_delivery_date`,
     *         provide a targeted delivery date for mail pieces in this campaign.
     * @param  sendDate  Optional parameter: If `schedule_type` is `scheduled_send_date`, provide a
     *         date to send this campaign.
     * @param  cancelWindowCampaignMinutes  Optional parameter: A window, in minutes, within which
     *         the campaign can be canceled.
     * @param  metadata  Optional parameter: Use metadata to store custom information for tagging
     *         and labeling back to your internal systems. Must be an object with up to 20 key-value
     *         pairs. Keys must be at most 40 characters and values must be at most 500 characters.
     *         Neither can contain the characters `"` and `\`. i.e. '{"customer_id" :
     *         "NEWYORK2015"}' Nested objects are not supported. See [Metadata](#section/Metadata)
     *         for more information.
     * @param  isDraft  Optional parameter: Whether or not the campaign is still a draft. Can either
     *         be excluded or `false`.
     * @param  useType  Optional parameter: The use type for each mailpiece. Can be one of
     *         marketing, operational, or null. Null use_type is only allowed if an account default
     *         use_type is selected in Account Settings. For more information on use_type, see our
     *         [Help Center
     *         article](https://help.lob.com/print-and-mail/building-a-mail-strategy/managing-mail-settings/declaring-mail-use-type).
     * @param  autoCancelIfNcoa  Optional parameter: Whether or not a mail piece should be
     *         automatically canceled and not sent if the address is updated via NCOA.
     * @return    Returns the Campaign response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Campaign campaignUpdate(
            final String cmpId,
            final String name,
            final String description,
            final CmpScheduleTypeEnum scheduleType,
            final LocalDateTime targetDeliveryDate,
            final LocalDateTime sendDate,
            final Integer cancelWindowCampaignMinutes,
            final Map<String, String> metadata,
            final Boolean isDraft,
            final CmpUseTypeEnum useType,
            final Boolean autoCancelIfNcoa) throws ApiException, IOException {
        return prepareCampaignUpdateRequest(cmpId, name, description, scheduleType,
                targetDeliveryDate, sendDate, cancelWindowCampaignMinutes, metadata, isDraft,
                useType, autoCancelIfNcoa).execute();
    }

    /**
     * Update the details of an existing campaign. You need only supply the unique identifier that
     * was returned upon campaign creation.
     * @param  cmpId  Required parameter: id of the campaign
     * @param  name  Optional parameter: Example:
     * @param  description  Optional parameter: An internal description that identifies this
     *         resource. Must be no longer than 255 characters.
     * @param  scheduleType  Optional parameter: How the campaign should be scheduled. Only value
     *         available today is `immediate`.
     * @param  targetDeliveryDate  Optional parameter: If `schedule_type` is `target_delivery_date`,
     *         provide a targeted delivery date for mail pieces in this campaign.
     * @param  sendDate  Optional parameter: If `schedule_type` is `scheduled_send_date`, provide a
     *         date to send this campaign.
     * @param  cancelWindowCampaignMinutes  Optional parameter: A window, in minutes, within which
     *         the campaign can be canceled.
     * @param  metadata  Optional parameter: Use metadata to store custom information for tagging
     *         and labeling back to your internal systems. Must be an object with up to 20 key-value
     *         pairs. Keys must be at most 40 characters and values must be at most 500 characters.
     *         Neither can contain the characters `"` and `\`. i.e. '{"customer_id" :
     *         "NEWYORK2015"}' Nested objects are not supported. See [Metadata](#section/Metadata)
     *         for more information.
     * @param  isDraft  Optional parameter: Whether or not the campaign is still a draft. Can either
     *         be excluded or `false`.
     * @param  useType  Optional parameter: The use type for each mailpiece. Can be one of
     *         marketing, operational, or null. Null use_type is only allowed if an account default
     *         use_type is selected in Account Settings. For more information on use_type, see our
     *         [Help Center
     *         article](https://help.lob.com/print-and-mail/building-a-mail-strategy/managing-mail-settings/declaring-mail-use-type).
     * @param  autoCancelIfNcoa  Optional parameter: Whether or not a mail piece should be
     *         automatically canceled and not sent if the address is updated via NCOA.
     * @return    Returns the Campaign response from the API call
     */
    public CompletableFuture<Campaign> campaignUpdateAsync(
            final String cmpId,
            final String name,
            final String description,
            final CmpScheduleTypeEnum scheduleType,
            final LocalDateTime targetDeliveryDate,
            final LocalDateTime sendDate,
            final Integer cancelWindowCampaignMinutes,
            final Map<String, String> metadata,
            final Boolean isDraft,
            final CmpUseTypeEnum useType,
            final Boolean autoCancelIfNcoa) {
        try { 
            return prepareCampaignUpdateRequest(cmpId, name, description, scheduleType, targetDeliveryDate,
            sendDate, cancelWindowCampaignMinutes, metadata, isDraft, useType,
            autoCancelIfNcoa).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for campaignUpdate.
     */
    private ApiCall<Campaign, ApiException> prepareCampaignUpdateRequest(
            final String cmpId,
            final String name,
            final String description,
            final CmpScheduleTypeEnum scheduleType,
            final LocalDateTime targetDeliveryDate,
            final LocalDateTime sendDate,
            final Integer cancelWindowCampaignMinutes,
            final Map<String, String> metadata,
            final Boolean isDraft,
            final CmpUseTypeEnum useType,
            final Boolean autoCancelIfNcoa) throws IOException {
        return new ApiCall.Builder<Campaign, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/campaigns/{cmp_id}")
                        .formParam(param -> param.key("name")
                                .value(name).isRequired(false))
                        .formParam(param -> param.key("description")
                                .value(description).isRequired(false))
                        .formParam(param -> param.key("schedule_type")
                                .value((scheduleType != null) ? scheduleType.value() : null).isRequired(false))
                        .formParam(param -> param.key("target_delivery_date")
                                .value(DateTimeHelper.toRfc8601DateTime(targetDeliveryDate)).isRequired(false))
                        .formParam(param -> param.key("send_date")
                                .value(DateTimeHelper.toRfc8601DateTime(sendDate)).isRequired(false))
                        .formParam(param -> param.key("cancel_window_campaign_minutes")
                                .value(cancelWindowCampaignMinutes).isRequired(false))
                        .formParam(param -> param.key("metadata")
                                .value(metadata).isRequired(false))
                        .formParam(param -> param.key("is_draft")
                                .value(isDraft).isRequired(false))
                        .formParam(param -> param.key("use_type")
                                .value((useType != null) ? useType.value() : null).isRequired(false))
                        .formParam(param -> param.key("auto_cancel_if_ncoa")
                                .value(autoCancelIfNcoa).isRequired(false))
                        .templateParam(param -> param.key("cmp_id").value(cmpId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/x-www-form-urlencoded").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PATCH))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Campaign.class))
                        .nullify404(false)
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Error",
                                (reason, context) -> new ErrorErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Delete an existing campaign. You need only supply the unique identifier that was returned
     * upon campaign creation. Deleting a campaign also deletes any associated mail pieces that have
     * been created but not sent. A campaign's `send_date` matches its associated mail pieces'
     * `send_date`s.
     * @param  cmpId  Required parameter: id of the campaign
     * @return    Returns the CampaignDeleted response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public CampaignDeleted campaignDelete(
            final String cmpId) throws ApiException, IOException {
        return prepareCampaignDeleteRequest(cmpId).execute();
    }

    /**
     * Delete an existing campaign. You need only supply the unique identifier that was returned
     * upon campaign creation. Deleting a campaign also deletes any associated mail pieces that have
     * been created but not sent. A campaign's `send_date` matches its associated mail pieces'
     * `send_date`s.
     * @param  cmpId  Required parameter: id of the campaign
     * @return    Returns the CampaignDeleted response from the API call
     */
    public CompletableFuture<CampaignDeleted> campaignDeleteAsync(
            final String cmpId) {
        try { 
            return prepareCampaignDeleteRequest(cmpId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for campaignDelete.
     */
    private ApiCall<CampaignDeleted, ApiException> prepareCampaignDeleteRequest(
            final String cmpId) throws IOException {
        return new ApiCall.Builder<CampaignDeleted, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/campaigns/{cmp_id}")
                        .templateParam(param -> param.key("cmp_id").value(cmpId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, CampaignDeleted.class))
                        .nullify404(false)
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Error",
                                (reason, context) -> new ErrorErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Sends a campaign. You need only supply the unique campaign identifier that was returned upon
     * campaign creation.
     * @param  cmpId  Required parameter: id of the campaign
     * @return    Returns the Campaign response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Campaign campaignSend(
            final String cmpId) throws ApiException, IOException {
        return prepareCampaignSendRequest(cmpId).execute();
    }

    /**
     * Sends a campaign. You need only supply the unique campaign identifier that was returned upon
     * campaign creation.
     * @param  cmpId  Required parameter: id of the campaign
     * @return    Returns the Campaign response from the API call
     */
    public CompletableFuture<Campaign> campaignSendAsync(
            final String cmpId) {
        try { 
            return prepareCampaignSendRequest(cmpId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for campaignSend.
     */
    private ApiCall<Campaign, ApiException> prepareCampaignSendRequest(
            final String cmpId) throws IOException {
        return new ApiCall.Builder<Campaign, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/campaigns/{cmp_id}/send")
                        .templateParam(param -> param.key("cmp_id").value(cmpId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Campaign.class))
                        .nullify404(false)
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Error",
                                (reason, context) -> new ErrorErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}