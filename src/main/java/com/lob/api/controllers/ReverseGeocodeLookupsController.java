/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.lob.api.controllers;

import com.lob.api.ApiHelper;
import com.lob.api.Server;
import com.lob.api.exceptions.ApiException;
import com.lob.api.exceptions.ErrorErrorException;
import com.lob.api.http.request.HttpMethod;
import com.lob.api.models.ReverseGeocode;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class ReverseGeocodeLookupsController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public ReverseGeocodeLookupsController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * Reverse geocode a valid US location with a live API key.
     * @param  latitude  Required parameter: A positive or negative decimal indicating the
     *         geographic latitude of the address, specifying the north-to-south position of a
     *         location. This should be input with `longitude` to pinpoint locations on a map.
     * @param  longitude  Required parameter: A positive or negative decimal indicating the
     *         geographic longitude of the address, specifying the north-to-south position of a
     *         location. This should be input with `latitude` to pinpoint locations on a map.
     * @param  size  Optional parameter: Determines the number of locations returned. Possible
     *         values are between 1 and 50 and any number higher will be rounded down to 50. Default
     *         size is a list of 5 reverse geocoded locations.
     * @return    Returns the ReverseGeocode response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ReverseGeocode reverseGeocodeLookup(
            final Double latitude,
            final Double longitude,
            final Integer size) throws ApiException, IOException {
        return prepareReverseGeocodeLookupRequest(latitude, longitude, size).execute();
    }

    /**
     * Reverse geocode a valid US location with a live API key.
     * @param  latitude  Required parameter: A positive or negative decimal indicating the
     *         geographic latitude of the address, specifying the north-to-south position of a
     *         location. This should be input with `longitude` to pinpoint locations on a map.
     * @param  longitude  Required parameter: A positive or negative decimal indicating the
     *         geographic longitude of the address, specifying the north-to-south position of a
     *         location. This should be input with `latitude` to pinpoint locations on a map.
     * @param  size  Optional parameter: Determines the number of locations returned. Possible
     *         values are between 1 and 50 and any number higher will be rounded down to 50. Default
     *         size is a list of 5 reverse geocoded locations.
     * @return    Returns the ReverseGeocode response from the API call
     */
    public CompletableFuture<ReverseGeocode> reverseGeocodeLookupAsync(
            final Double latitude,
            final Double longitude,
            final Integer size) {
        try { 
            return prepareReverseGeocodeLookupRequest(latitude, longitude, size).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for reverseGeocodeLookup.
     */
    private ApiCall<ReverseGeocode, ApiException> prepareReverseGeocodeLookupRequest(
            final Double latitude,
            final Double longitude,
            final Integer size) throws IOException {
        return new ApiCall.Builder<ReverseGeocode, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/us_reverse_geocode_lookups")
                        .formParam(param -> param.key("latitude")
                                .value(latitude).isRequired(false))
                        .formParam(param -> param.key("longitude")
                                .value(longitude).isRequired(false))
                        .queryParam(param -> param.key("size")
                                .value((size != null) ? size : 5).isRequired(false))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/x-www-form-urlencoded").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, ReverseGeocode.class))
                        .nullify404(false)
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Error",
                                (reason, context) -> new ErrorErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}