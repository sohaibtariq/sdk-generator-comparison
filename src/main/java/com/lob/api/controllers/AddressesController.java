/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.lob.api.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.lob.api.ApiHelper;
import com.lob.api.Server;
import com.lob.api.exceptions.ApiException;
import com.lob.api.exceptions.ErrorErrorException;
import com.lob.api.http.request.HttpMethod;
import com.lob.api.models.AddressDeletion;
import com.lob.api.models.AllAddresses;
import com.lob.api.models.BeforeAfter;
import com.lob.api.models.containers.Address;
import com.lob.api.models.containers.AddressEditable;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class AddressesController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public AddressesController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * Returns a list of your addresses. The addresses are returned sorted by creation date, with
     * the most recently created addresses appearing first.
     * @param  limit  Optional parameter: How many results to return.
     * @param  beforeAfter  Optional parameter: `before` and `after` are both optional but only one
     *         of them can be in the query at a time.
     * @param  include  Optional parameter: Request that the response include the total count by
     *         specifying `include=["total_count"]`.
     * @param  dateCreated  Optional parameter: Filter by date created. Accepted formats are
     *         ISO-8601 date or datetime, e.g. `{ "gt": "2012-01-01", "lt": "2012-01-31T12:34:56Z"
     *         }` where `gt` is &gt;, `lt` is &lt;, `gte` is ≥, and `lte` is ≤.
     * @param  metadata  Optional parameter: Filter by metadata key-value pair`.
     * @return    Returns the AllAddresses response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public AllAddresses addressesList(
            final Integer limit,
            final BeforeAfter beforeAfter,
            final List<String> include,
            final Map<String, String> dateCreated,
            final Map<String, String> metadata) throws ApiException, IOException {
        return prepareAddressesListRequest(limit, beforeAfter, include, dateCreated,
                metadata).execute();
    }

    /**
     * Returns a list of your addresses. The addresses are returned sorted by creation date, with
     * the most recently created addresses appearing first.
     * @param  limit  Optional parameter: How many results to return.
     * @param  beforeAfter  Optional parameter: `before` and `after` are both optional but only one
     *         of them can be in the query at a time.
     * @param  include  Optional parameter: Request that the response include the total count by
     *         specifying `include=["total_count"]`.
     * @param  dateCreated  Optional parameter: Filter by date created. Accepted formats are
     *         ISO-8601 date or datetime, e.g. `{ "gt": "2012-01-01", "lt": "2012-01-31T12:34:56Z"
     *         }` where `gt` is &gt;, `lt` is &lt;, `gte` is ≥, and `lte` is ≤.
     * @param  metadata  Optional parameter: Filter by metadata key-value pair`.
     * @return    Returns the AllAddresses response from the API call
     */
    public CompletableFuture<AllAddresses> addressesListAsync(
            final Integer limit,
            final BeforeAfter beforeAfter,
            final List<String> include,
            final Map<String, String> dateCreated,
            final Map<String, String> metadata) {
        try { 
            return prepareAddressesListRequest(limit, beforeAfter, include, dateCreated,
            metadata).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for addressesList.
     */
    private ApiCall<AllAddresses, ApiException> prepareAddressesListRequest(
            final Integer limit,
            final BeforeAfter beforeAfter,
            final List<String> include,
            final Map<String, String> dateCreated,
            final Map<String, String> metadata) throws IOException {
        return new ApiCall.Builder<AllAddresses, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/addresses")
                        .queryParam(param -> param.key("limit")
                                .value((limit != null) ? limit : 10).isRequired(false))
                        .queryParam(param -> param.key("before/after")
                                .value(beforeAfter).isRequired(false))
                        .queryParam(param -> param.key("include")
                                .value(include).isRequired(false))
                        .queryParam(param -> param.key("date_created")
                                .value(dateCreated).isRequired(false))
                        .queryParam(param -> param.key("metadata")
                                .value(metadata).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, AllAddresses.class))
                        .nullify404(false)
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Error",
                                (reason, context) -> new ErrorErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Creates a new address given information.
     * @param  body  Required parameter: Example:
     * @return    Returns the Address response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Address addressCreate(
            final AddressEditable body) throws ApiException, IOException {
        return prepareAddressCreateRequest(body).execute();
    }

    /**
     * Creates a new address given information.
     * @param  body  Required parameter: Example:
     * @return    Returns the Address response from the API call
     */
    public CompletableFuture<Address> addressCreateAsync(
            final AddressEditable body) {
        try { 
            return prepareAddressCreateRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for addressCreate.
     */
    private ApiCall<Address, ApiException> prepareAddressCreateRequest(
            final AddressEditable body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Address, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/addresses")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serializeTypeCombinator(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Address.class))
                        .nullify404(false)
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Error",
                                (reason, context) -> new ErrorErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Retrieves the details of an existing address. You need only supply the unique identifier that
     * was returned upon address creation.
     * @param  adrId  Required parameter: id of the address
     * @return    Returns the Address response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Address addressRetrieve(
            final String adrId) throws ApiException, IOException {
        return prepareAddressRetrieveRequest(adrId).execute();
    }

    /**
     * Retrieves the details of an existing address. You need only supply the unique identifier that
     * was returned upon address creation.
     * @param  adrId  Required parameter: id of the address
     * @return    Returns the Address response from the API call
     */
    public CompletableFuture<Address> addressRetrieveAsync(
            final String adrId) {
        try { 
            return prepareAddressRetrieveRequest(adrId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for addressRetrieve.
     */
    private ApiCall<Address, ApiException> prepareAddressRetrieveRequest(
            final String adrId) throws IOException {
        return new ApiCall.Builder<Address, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/addresses/{adr_id}")
                        .templateParam(param -> param.key("adr_id").value(adrId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Address.class))
                        .nullify404(false)
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Error",
                                (reason, context) -> new ErrorErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Deletes the details of an existing address. You need only supply the unique identifier that
     * was returned upon address creation.
     * @param  adrId  Required parameter: id of the address
     * @return    Returns the AddressDeletion response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public AddressDeletion addressDelete(
            final String adrId) throws ApiException, IOException {
        return prepareAddressDeleteRequest(adrId).execute();
    }

    /**
     * Deletes the details of an existing address. You need only supply the unique identifier that
     * was returned upon address creation.
     * @param  adrId  Required parameter: id of the address
     * @return    Returns the AddressDeletion response from the API call
     */
    public CompletableFuture<AddressDeletion> addressDeleteAsync(
            final String adrId) {
        try { 
            return prepareAddressDeleteRequest(adrId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for addressDelete.
     */
    private ApiCall<AddressDeletion, ApiException> prepareAddressDeleteRequest(
            final String adrId) throws IOException {
        return new ApiCall.Builder<AddressDeletion, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/addresses/{adr_id}")
                        .templateParam(param -> param.key("adr_id").value(adrId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, AddressDeletion.class))
                        .nullify404(false)
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Error",
                                (reason, context) -> new ErrorErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}