/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.lob.api.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.lob.api.ApiHelper;
import com.lob.api.Server;
import com.lob.api.exceptions.ApiException;
import com.lob.api.exceptions.ErrorErrorException;
import com.lob.api.http.request.HttpMethod;
import com.lob.api.models.BeforeAfter;
import com.lob.api.models.Buckslip;
import com.lob.api.models.BuckslipDeletion;
import com.lob.api.models.BuckslipEditable;
import com.lob.api.models.BuckslipsResponse;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class BuckslipsController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public BuckslipsController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * Returns a list of your buckslips. The buckslips are returned sorted by creation date, with
     * the most recently created buckslips appearing first.
     * @param  limit  Optional parameter: How many results to return.
     * @param  beforeAfter  Optional parameter: `before` and `after` are both optional but only one
     *         of them can be in the query at a time.
     * @param  include  Optional parameter: Request that the response include the total count by
     *         specifying `include=["total_count"]`.
     * @return    Returns the BuckslipsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public BuckslipsResponse buckslipsList(
            final Integer limit,
            final BeforeAfter beforeAfter,
            final List<String> include) throws ApiException, IOException {
        return prepareBuckslipsListRequest(limit, beforeAfter, include).execute();
    }

    /**
     * Returns a list of your buckslips. The buckslips are returned sorted by creation date, with
     * the most recently created buckslips appearing first.
     * @param  limit  Optional parameter: How many results to return.
     * @param  beforeAfter  Optional parameter: `before` and `after` are both optional but only one
     *         of them can be in the query at a time.
     * @param  include  Optional parameter: Request that the response include the total count by
     *         specifying `include=["total_count"]`.
     * @return    Returns the BuckslipsResponse response from the API call
     */
    public CompletableFuture<BuckslipsResponse> buckslipsListAsync(
            final Integer limit,
            final BeforeAfter beforeAfter,
            final List<String> include) {
        try { 
            return prepareBuckslipsListRequest(limit, beforeAfter, include).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for buckslipsList.
     */
    private ApiCall<BuckslipsResponse, ApiException> prepareBuckslipsListRequest(
            final Integer limit,
            final BeforeAfter beforeAfter,
            final List<String> include) throws IOException {
        return new ApiCall.Builder<BuckslipsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/buckslips")
                        .queryParam(param -> param.key("limit")
                                .value((limit != null) ? limit : 10).isRequired(false))
                        .queryParam(param -> param.key("before/after")
                                .value(beforeAfter).isRequired(false))
                        .queryParam(param -> param.key("include")
                                .value(include).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, BuckslipsResponse.class))
                        .nullify404(false)
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Error",
                                (reason, context) -> new ErrorErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Creates a new buckslip given information.
     * @param  body  Required parameter: Example:
     * @return    Returns the Buckslip response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Buckslip buckslipCreate(
            final BuckslipEditable body) throws ApiException, IOException {
        return prepareBuckslipCreateRequest(body).execute();
    }

    /**
     * Creates a new buckslip given information.
     * @param  body  Required parameter: Example:
     * @return    Returns the Buckslip response from the API call
     */
    public CompletableFuture<Buckslip> buckslipCreateAsync(
            final BuckslipEditable body) {
        try { 
            return prepareBuckslipCreateRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for buckslipCreate.
     */
    private ApiCall<Buckslip, ApiException> prepareBuckslipCreateRequest(
            final BuckslipEditable body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Buckslip, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/buckslips")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Buckslip.class))
                        .nullify404(false)
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Error",
                                (reason, context) -> new ErrorErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Retrieves the details of an existing buckslip. You need only supply the unique customer
     * identifier that was returned upon buckslip creation.
     * @param  buckslipId  Required parameter: id of the buckslip
     * @return    Returns the Buckslip response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Buckslip buckslipRetrieve(
            final String buckslipId) throws ApiException, IOException {
        return prepareBuckslipRetrieveRequest(buckslipId).execute();
    }

    /**
     * Retrieves the details of an existing buckslip. You need only supply the unique customer
     * identifier that was returned upon buckslip creation.
     * @param  buckslipId  Required parameter: id of the buckslip
     * @return    Returns the Buckslip response from the API call
     */
    public CompletableFuture<Buckslip> buckslipRetrieveAsync(
            final String buckslipId) {
        try { 
            return prepareBuckslipRetrieveRequest(buckslipId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for buckslipRetrieve.
     */
    private ApiCall<Buckslip, ApiException> prepareBuckslipRetrieveRequest(
            final String buckslipId) throws IOException {
        return new ApiCall.Builder<Buckslip, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/buckslips/{buckslip_id}")
                        .templateParam(param -> param.key("buckslip_id").value(buckslipId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Buckslip.class))
                        .nullify404(false)
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Error",
                                (reason, context) -> new ErrorErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Update the details of an existing buckslip. You need only supply the unique identifier that
     * was returned upon buckslip creation.
     * @param  buckslipId  Required parameter: id of the buckslip
     * @param  description  Optional parameter: Description of the buckslip.
     * @param  autoReorder  Optional parameter: Allows for auto reordering
     * @param  reorderQuantity  Optional parameter: The quantity of items to be reordered (only
     *         required when auto_reorder is true).
     * @return    Returns the Buckslip response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Buckslip buckslipUpdate(
            final String buckslipId,
            final String description,
            final Boolean autoReorder,
            final Double reorderQuantity) throws ApiException, IOException {
        return prepareBuckslipUpdateRequest(buckslipId, description, autoReorder,
                reorderQuantity).execute();
    }

    /**
     * Update the details of an existing buckslip. You need only supply the unique identifier that
     * was returned upon buckslip creation.
     * @param  buckslipId  Required parameter: id of the buckslip
     * @param  description  Optional parameter: Description of the buckslip.
     * @param  autoReorder  Optional parameter: Allows for auto reordering
     * @param  reorderQuantity  Optional parameter: The quantity of items to be reordered (only
     *         required when auto_reorder is true).
     * @return    Returns the Buckslip response from the API call
     */
    public CompletableFuture<Buckslip> buckslipUpdateAsync(
            final String buckslipId,
            final String description,
            final Boolean autoReorder,
            final Double reorderQuantity) {
        try { 
            return prepareBuckslipUpdateRequest(buckslipId, description, autoReorder,
            reorderQuantity).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for buckslipUpdate.
     */
    private ApiCall<Buckslip, ApiException> prepareBuckslipUpdateRequest(
            final String buckslipId,
            final String description,
            final Boolean autoReorder,
            final Double reorderQuantity) throws IOException {
        return new ApiCall.Builder<Buckslip, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/buckslips/{buckslip_id}")
                        .formParam(param -> param.key("description")
                                .value(description).isRequired(false))
                        .formParam(param -> param.key("auto_reorder")
                                .value(autoReorder).isRequired(false))
                        .formParam(param -> param.key("reorder_quantity")
                                .value(reorderQuantity).isRequired(false))
                        .templateParam(param -> param.key("buckslip_id").value(buckslipId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/x-www-form-urlencoded").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PATCH))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Buckslip.class))
                        .nullify404(false)
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Error",
                                (reason, context) -> new ErrorErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Delete an existing buckslip. You need only supply the unique identifier that was returned
     * upon buckslip creation.
     * @param  buckslipId  Required parameter: id of the buckslip
     * @return    Returns the BuckslipDeletion response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public BuckslipDeletion buckslipDelete(
            final String buckslipId) throws ApiException, IOException {
        return prepareBuckslipDeleteRequest(buckslipId).execute();
    }

    /**
     * Delete an existing buckslip. You need only supply the unique identifier that was returned
     * upon buckslip creation.
     * @param  buckslipId  Required parameter: id of the buckslip
     * @return    Returns the BuckslipDeletion response from the API call
     */
    public CompletableFuture<BuckslipDeletion> buckslipDeleteAsync(
            final String buckslipId) {
        try { 
            return prepareBuckslipDeleteRequest(buckslipId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for buckslipDelete.
     */
    private ApiCall<BuckslipDeletion, ApiException> prepareBuckslipDeleteRequest(
            final String buckslipId) throws IOException {
        return new ApiCall.Builder<BuckslipDeletion, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/buckslips/{buckslip_id}")
                        .templateParam(param -> param.key("buckslip_id").value(buckslipId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, BuckslipDeletion.class))
                        .nullify404(false)
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Error",
                                (reason, context) -> new ErrorErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}