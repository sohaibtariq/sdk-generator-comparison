/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.lob.api.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.lob.api.ApiHelper;
import com.lob.api.Server;
import com.lob.api.exceptions.ApiException;
import com.lob.api.exceptions.ErrorErrorException;
import com.lob.api.exceptions.FeatureFlagDisabledException;
import com.lob.api.exceptions.HTTPValidationErrorException;
import com.lob.api.exceptions.UploadExportErrorException;
import com.lob.api.http.request.HttpMethod;
import com.lob.api.models.Status3Enum;
import com.lob.api.models.Upload;
import com.lob.api.models.UploadCreateExport;
import com.lob.api.models.UploadFile;
import com.lob.api.models.UploadUpdatable;
import com.lob.api.models.UploadWritable;
import com.lob.api.models.UploadsExportsRequest;
import com.lob.api.models.UploadsExportsResponse;
import com.lob.api.models.UploadsReportResponse;
import com.lob.api.utilities.FileWrapper;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import io.apimatic.coreinterfaces.http.request.MutliPartRequestType;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class UploadsController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public UploadsController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * Returns a list of your uploads. Optionally, filter uploads by campaign.
     * @param  campaignId  Optional parameter: id of the campaign
     * @return    Returns the List of Upload response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<Upload> uploadsList(
            final String campaignId) throws ApiException, IOException {
        return prepareUploadsListRequest(campaignId).execute();
    }

    /**
     * Returns a list of your uploads. Optionally, filter uploads by campaign.
     * @param  campaignId  Optional parameter: id of the campaign
     * @return    Returns the List of Upload response from the API call
     */
    public CompletableFuture<List<Upload>> uploadsListAsync(
            final String campaignId) {
        try { 
            return prepareUploadsListRequest(campaignId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for uploadsList.
     */
    private ApiCall<List<Upload>, ApiException> prepareUploadsListRequest(
            final String campaignId) throws IOException {
        return new ApiCall.Builder<List<Upload>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/uploads")
                        .queryParam(param -> param.key("campaignId")
                                .value(campaignId).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        Upload[].class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Creates a new upload with the provided properties.
     * @param  body  Required parameter: Example:
     * @return    Returns the Upload response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Upload uploadCreate(
            final UploadWritable body) throws ApiException, IOException {
        return prepareUploadCreateRequest(body).execute();
    }

    /**
     * Creates a new upload with the provided properties.
     * @param  body  Required parameter: Example:
     * @return    Returns the Upload response from the API call
     */
    public CompletableFuture<Upload> uploadCreateAsync(
            final UploadWritable body) {
        try { 
            return prepareUploadCreateRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for uploadCreate.
     */
    private ApiCall<Upload, ApiException> prepareUploadCreateRequest(
            final UploadWritable body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Upload, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/uploads")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Upload.class))
                        .nullify404(false)
                        .localErrorCase("422",
                                 ErrorCase.setReason("Validation Error",
                                (reason, context) -> new HTTPValidationErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Retrieves the details of an existing upload. You need only supply the unique upload
     * identifier that was returned upon upload creation.
     * @param  uplId  Required parameter: id of the upload
     * @return    Returns the Upload response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Upload uploadRetrieve(
            final String uplId) throws ApiException, IOException {
        return prepareUploadRetrieveRequest(uplId).execute();
    }

    /**
     * Retrieves the details of an existing upload. You need only supply the unique upload
     * identifier that was returned upon upload creation.
     * @param  uplId  Required parameter: id of the upload
     * @return    Returns the Upload response from the API call
     */
    public CompletableFuture<Upload> uploadRetrieveAsync(
            final String uplId) {
        try { 
            return prepareUploadRetrieveRequest(uplId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for uploadRetrieve.
     */
    private ApiCall<Upload, ApiException> prepareUploadRetrieveRequest(
            final String uplId) throws IOException {
        return new ApiCall.Builder<Upload, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/uploads/{upl_id}")
                        .templateParam(param -> param.key("upl_id").value(uplId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Upload.class))
                        .nullify404(false)
                        .localErrorCase("404",
                                 ErrorCase.setReason("Not Found Error",
                                (reason, context) -> new ErrorErrorException(reason, context)))
                        .localErrorCase("422",
                                 ErrorCase.setReason("Validation Error",
                                (reason, context) -> new HTTPValidationErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Update the details of an existing upload. You need only supply the unique identifier that was
     * returned upon upload creation.
     * @param  uplId  Required parameter: id of the upload
     * @param  body  Required parameter: Example:
     * @return    Returns the Upload response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Upload uploadUpdate(
            final String uplId,
            final UploadUpdatable body) throws ApiException, IOException {
        return prepareUploadUpdateRequest(uplId, body).execute();
    }

    /**
     * Update the details of an existing upload. You need only supply the unique identifier that was
     * returned upon upload creation.
     * @param  uplId  Required parameter: id of the upload
     * @param  body  Required parameter: Example:
     * @return    Returns the Upload response from the API call
     */
    public CompletableFuture<Upload> uploadUpdateAsync(
            final String uplId,
            final UploadUpdatable body) {
        try { 
            return prepareUploadUpdateRequest(uplId, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for uploadUpdate.
     */
    private ApiCall<Upload, ApiException> prepareUploadUpdateRequest(
            final String uplId,
            final UploadUpdatable body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Upload, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/uploads/{upl_id}")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("upl_id").value(uplId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PATCH))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Upload.class))
                        .nullify404(false)
                        .localErrorCase("404",
                                 ErrorCase.setReason("Not Found Error",
                                (reason, context) -> new ErrorErrorException(reason, context)))
                        .localErrorCase("422",
                                 ErrorCase.setReason("Validation Error",
                                (reason, context) -> new HTTPValidationErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Delete an existing upload. You need only supply the unique identifier that was returned upon
     * upload creation.
     * @param  uplId  Required parameter: id of the upload
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void uploadDelete(
            final String uplId) throws ApiException, IOException {
        prepareUploadDeleteRequest(uplId).execute();
    }

    /**
     * Delete an existing upload. You need only supply the unique identifier that was returned upon
     * upload creation.
     * @param  uplId  Required parameter: id of the upload
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> uploadDeleteAsync(
            final String uplId) {
        try { 
            return prepareUploadDeleteRequest(uplId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for uploadDelete.
     */
    private ApiCall<Void, ApiException> prepareUploadDeleteRequest(
            final String uplId) throws IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/uploads/{upl_id}")
                        .templateParam(param -> param.key("upl_id").value(uplId)
                                .shouldEncode(true))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Upload an [audience
     * file](https://help.lob.com/print-and-mail/building-a-mail-strategy/campaign-or-triggered-sends/campaign-audience-guide)
     * and associate it with an upload.
     * @param  uplId  Required parameter: ID of the upload
     * @param  file  Optional parameter: Example:
     * @return    Returns the UploadFile response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public UploadFile uploadFile(
            final String uplId,
            final FileWrapper file) throws ApiException, IOException {
        return prepareUploadFileRequest(uplId, file).execute();
    }

    /**
     * Upload an [audience
     * file](https://help.lob.com/print-and-mail/building-a-mail-strategy/campaign-or-triggered-sends/campaign-audience-guide)
     * and associate it with an upload.
     * @param  uplId  Required parameter: ID of the upload
     * @param  file  Optional parameter: Example:
     * @return    Returns the UploadFile response from the API call
     */
    public CompletableFuture<UploadFile> uploadFileAsync(
            final String uplId,
            final FileWrapper file) {
        try { 
            return prepareUploadFileRequest(uplId, file).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for uploadFile.
     */
    private ApiCall<UploadFile, ApiException> prepareUploadFileRequest(
            final String uplId,
            final FileWrapper file) throws IOException {
        return new ApiCall.Builder<UploadFile, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/uploads/{upl_id}/file")
                        .formParam(param -> param.key("file")
                                .value(file)
                                .multiPartRequestType(MutliPartRequestType.MULTI_PART_FILE)
                                .multipartHeaders("content-type", "application/octect-stream"))
                        .templateParam(param -> param.key("upl_id").value(uplId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, UploadFile.class))
                        .nullify404(false)
                        .localErrorCase("422",
                                 ErrorCase.setReason("Validation Error",
                                (reason, context) -> new HTTPValidationErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Campaign Exports can help you understand exactly which records in a campaign could not be
     * created. By initiating and retrieving an export, you will get row-by-row errors for your
     * campaign. For a step-by-step walkthrough of creating a campaign and exporting failures, see
     * our [Campaigns
     * Guide](https://help.lob.com/print-and-mail/building-a-mail-strategy/campaign-or-triggered-sends/launch-your-first-campaign).
     * Create an export file associated with an upload.
     * @param  uplId  Required parameter: ID of the upload
     * @param  body  Required parameter: Example:
     * @return    Returns the UploadCreateExport response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public UploadCreateExport uploadExportCreate(
            final String uplId,
            final UploadsExportsRequest body) throws ApiException, IOException {
        return prepareUploadExportCreateRequest(uplId, body).execute();
    }

    /**
     * Campaign Exports can help you understand exactly which records in a campaign could not be
     * created. By initiating and retrieving an export, you will get row-by-row errors for your
     * campaign. For a step-by-step walkthrough of creating a campaign and exporting failures, see
     * our [Campaigns
     * Guide](https://help.lob.com/print-and-mail/building-a-mail-strategy/campaign-or-triggered-sends/launch-your-first-campaign).
     * Create an export file associated with an upload.
     * @param  uplId  Required parameter: ID of the upload
     * @param  body  Required parameter: Example:
     * @return    Returns the UploadCreateExport response from the API call
     */
    public CompletableFuture<UploadCreateExport> uploadExportCreateAsync(
            final String uplId,
            final UploadsExportsRequest body) {
        try { 
            return prepareUploadExportCreateRequest(uplId, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for uploadExportCreate.
     */
    private ApiCall<UploadCreateExport, ApiException> prepareUploadExportCreateRequest(
            final String uplId,
            final UploadsExportsRequest body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<UploadCreateExport, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/uploads/{upl_id}/exports")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("upl_id").value(uplId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, UploadCreateExport.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("401",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("402",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("405",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("406",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("407",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("408",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("409",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("410",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("411",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("412",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("413",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("414",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("415",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("416",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("417",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("418",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("419",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("420",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("421",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("422",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("423",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("424",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("425",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("426",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("427",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("428",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("429",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("430",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("431",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("432",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("433",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("434",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("435",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("436",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("437",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("438",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("439",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("440",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("441",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("442",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("443",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("444",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("445",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("446",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("447",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("448",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("449",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("450",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("451",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("452",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("453",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("454",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("455",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("456",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("457",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("458",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("459",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("460",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("461",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("462",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("463",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("464",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("465",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("466",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("467",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("468",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("469",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("470",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("471",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("472",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("473",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("474",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("475",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("476",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("477",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("478",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("479",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("480",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("481",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("482",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("483",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("484",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("485",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("486",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("487",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("488",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("489",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("490",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("491",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("492",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("493",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("494",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("495",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("496",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("497",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("498",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .localErrorCase("499",
                                 ErrorCase.setReason("Create Export Error",
                                (reason, context) -> new UploadExportErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Retrieves the line item data for each row from the csv file associated with the upload id
     * record. NOTE: This endpoint is currently feature flagged. Please reach out to Lob's support
     * team if you would like access to this API endpoint.
     * @param  uplId  Required parameter: ID of the upload
     * @param  status  Optional parameter: The status of line items to filter and retrieve. By
     *         default all line items are returned.
     * @param  limit  Optional parameter: How many results to return.
     * @param  offset  Optional parameter: An integer that designates the offset at which to begin
     *         returning results. Defaults to 0.
     * @return    Returns the UploadsReportResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public UploadsReportResponse reportRetrieve(
            final String uplId,
            final Status3Enum status,
            final Integer limit,
            final Integer offset) throws ApiException, IOException {
        return prepareReportRetrieveRequest(uplId, status, limit, offset).execute();
    }

    /**
     * Retrieves the line item data for each row from the csv file associated with the upload id
     * record. NOTE: This endpoint is currently feature flagged. Please reach out to Lob's support
     * team if you would like access to this API endpoint.
     * @param  uplId  Required parameter: ID of the upload
     * @param  status  Optional parameter: The status of line items to filter and retrieve. By
     *         default all line items are returned.
     * @param  limit  Optional parameter: How many results to return.
     * @param  offset  Optional parameter: An integer that designates the offset at which to begin
     *         returning results. Defaults to 0.
     * @return    Returns the UploadsReportResponse response from the API call
     */
    public CompletableFuture<UploadsReportResponse> reportRetrieveAsync(
            final String uplId,
            final Status3Enum status,
            final Integer limit,
            final Integer offset) {
        try { 
            return prepareReportRetrieveRequest(uplId, status, limit, offset).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for reportRetrieve.
     */
    private ApiCall<UploadsReportResponse, ApiException> prepareReportRetrieveRequest(
            final String uplId,
            final Status3Enum status,
            final Integer limit,
            final Integer offset) throws IOException {
        return new ApiCall.Builder<UploadsReportResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/uploads/{upl_id}/report")
                        .queryParam(param -> param.key("status")
                                .value((status != null) ? status.value() : null).isRequired(false))
                        .queryParam(param -> param.key("limit")
                                .value((limit != null) ? limit : 100).isRequired(false))
                        .queryParam(param -> param.key("offset")
                                .value((offset != null) ? offset : 0).isRequired(false))
                        .templateParam(param -> param.key("upl_id").value(uplId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, UploadsReportResponse.class))
                        .nullify404(false)
                        .localErrorCase("403",
                                 ErrorCase.setReason("Forbidden Error",
                                (reason, context) -> new FeatureFlagDisabledException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.setReason("Not Found Error",
                                (reason, context) -> new ErrorErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Retrieves the details of an existing export. You need only supply the unique export
     * identifier that was returned upon export creation. If you try retrieving an export
     * immediately after creating one (i.e., before we're done processing the export), you will get
     * back an export object with `state = in_progress`.
     * @param  uplId  Required parameter: ID of the upload
     * @param  exId  Required parameter: ID of the export
     * @return    Returns the UploadsExportsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public UploadsExportsResponse exportRetrieve(
            final String uplId,
            final String exId) throws ApiException, IOException {
        return prepareExportRetrieveRequest(uplId, exId).execute();
    }

    /**
     * Retrieves the details of an existing export. You need only supply the unique export
     * identifier that was returned upon export creation. If you try retrieving an export
     * immediately after creating one (i.e., before we're done processing the export), you will get
     * back an export object with `state = in_progress`.
     * @param  uplId  Required parameter: ID of the upload
     * @param  exId  Required parameter: ID of the export
     * @return    Returns the UploadsExportsResponse response from the API call
     */
    public CompletableFuture<UploadsExportsResponse> exportRetrieveAsync(
            final String uplId,
            final String exId) {
        try { 
            return prepareExportRetrieveRequest(uplId, exId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for exportRetrieve.
     */
    private ApiCall<UploadsExportsResponse, ApiException> prepareExportRetrieveRequest(
            final String uplId,
            final String exId) throws IOException {
        return new ApiCall.Builder<UploadsExportsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/uploads/{upl_id}/exports/{ex_id}")
                        .templateParam(param -> param.key("upl_id").value(uplId)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("ex_id").value(exId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, UploadsExportsResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}