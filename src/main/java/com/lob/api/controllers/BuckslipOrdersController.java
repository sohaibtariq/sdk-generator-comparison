/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.lob.api.controllers;

import com.lob.api.ApiHelper;
import com.lob.api.Server;
import com.lob.api.exceptions.ApiException;
import com.lob.api.exceptions.ErrorErrorException;
import com.lob.api.http.request.HttpMethod;
import com.lob.api.models.BuckslipOrder;
import com.lob.api.models.BuckslipsOrdersResponse;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class BuckslipOrdersController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public BuckslipOrdersController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * Retrieves the buckslip orders associated with the given buckslip id.
     * @param  buckslipId  Required parameter: The ID of the buckslip to which the buckslip orders
     *         belong.
     * @param  limit  Optional parameter: How many results to return.
     * @param  offset  Optional parameter: An integer that designates the offset at which to begin
     *         returning results. Defaults to 0.
     * @return    Returns the BuckslipsOrdersResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public BuckslipsOrdersResponse buckslipOrdersRetrieve(
            final String buckslipId,
            final Integer limit,
            final Integer offset) throws ApiException, IOException {
        return prepareBuckslipOrdersRetrieveRequest(buckslipId, limit, offset).execute();
    }

    /**
     * Retrieves the buckslip orders associated with the given buckslip id.
     * @param  buckslipId  Required parameter: The ID of the buckslip to which the buckslip orders
     *         belong.
     * @param  limit  Optional parameter: How many results to return.
     * @param  offset  Optional parameter: An integer that designates the offset at which to begin
     *         returning results. Defaults to 0.
     * @return    Returns the BuckslipsOrdersResponse response from the API call
     */
    public CompletableFuture<BuckslipsOrdersResponse> buckslipOrdersRetrieveAsync(
            final String buckslipId,
            final Integer limit,
            final Integer offset) {
        try { 
            return prepareBuckslipOrdersRetrieveRequest(buckslipId, limit, offset).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for buckslipOrdersRetrieve.
     */
    private ApiCall<BuckslipsOrdersResponse, ApiException> prepareBuckslipOrdersRetrieveRequest(
            final String buckslipId,
            final Integer limit,
            final Integer offset) throws IOException {
        return new ApiCall.Builder<BuckslipsOrdersResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/buckslips/{buckslip_id}/orders")
                        .queryParam(param -> param.key("limit")
                                .value((limit != null) ? limit : 10).isRequired(false))
                        .queryParam(param -> param.key("offset")
                                .value((offset != null) ? offset : 0).isRequired(false))
                        .templateParam(param -> param.key("buckslip_id").value(buckslipId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, BuckslipsOrdersResponse.class))
                        .nullify404(false)
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Error",
                                (reason, context) -> new ErrorErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Creates a new buckslip order given information.
     * @param  buckslipId  Required parameter: The ID of the buckslip to which the buckslip orders
     *         belong.
     * @param  quantity  Required parameter: The quantity of buckslips in the order (minimum 5,000).
     * @return    Returns the BuckslipOrder response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public BuckslipOrder buckslipOrderCreate(
            final String buckslipId,
            final int quantity) throws ApiException, IOException {
        return prepareBuckslipOrderCreateRequest(buckslipId, quantity).execute();
    }

    /**
     * Creates a new buckslip order given information.
     * @param  buckslipId  Required parameter: The ID of the buckslip to which the buckslip orders
     *         belong.
     * @param  quantity  Required parameter: The quantity of buckslips in the order (minimum 5,000).
     * @return    Returns the BuckslipOrder response from the API call
     */
    public CompletableFuture<BuckslipOrder> buckslipOrderCreateAsync(
            final String buckslipId,
            final int quantity) {
        try { 
            return prepareBuckslipOrderCreateRequest(buckslipId, quantity).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for buckslipOrderCreate.
     */
    private ApiCall<BuckslipOrder, ApiException> prepareBuckslipOrderCreateRequest(
            final String buckslipId,
            final int quantity) throws IOException {
        return new ApiCall.Builder<BuckslipOrder, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/buckslips/{buckslip_id}/orders")
                        .formParam(param -> param.key("quantity")
                                .value(quantity).isRequired(false))
                        .templateParam(param -> param.key("buckslip_id").value(buckslipId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/x-www-form-urlencoded").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, BuckslipOrder.class))
                        .nullify404(false)
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Error",
                                (reason, context) -> new ErrorErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}