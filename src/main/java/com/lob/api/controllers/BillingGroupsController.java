/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.lob.api.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.lob.api.ApiHelper;
import com.lob.api.Server;
import com.lob.api.exceptions.ApiException;
import com.lob.api.exceptions.ErrorErrorException;
import com.lob.api.http.request.HttpMethod;
import com.lob.api.models.BillingGroup;
import com.lob.api.models.BillingGroupEditable;
import com.lob.api.models.BillingGroupsResponse;
import com.lob.api.models.SortBy;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class BillingGroupsController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public BillingGroupsController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * Retrieves the details of an existing billing_group. You need only supply the unique
     * billing_group identifier that was returned upon billing_group creation.
     * @param  bgId  Required parameter: id of the billing_group
     * @return    Returns the BillingGroup response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public BillingGroup billingGroupRetrieve(
            final String bgId) throws ApiException, IOException {
        return prepareBillingGroupRetrieveRequest(bgId).execute();
    }

    /**
     * Retrieves the details of an existing billing_group. You need only supply the unique
     * billing_group identifier that was returned upon billing_group creation.
     * @param  bgId  Required parameter: id of the billing_group
     * @return    Returns the BillingGroup response from the API call
     */
    public CompletableFuture<BillingGroup> billingGroupRetrieveAsync(
            final String bgId) {
        try { 
            return prepareBillingGroupRetrieveRequest(bgId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for billingGroupRetrieve.
     */
    private ApiCall<BillingGroup, ApiException> prepareBillingGroupRetrieveRequest(
            final String bgId) throws IOException {
        return new ApiCall.Builder<BillingGroup, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/billing_groups/{bg_id}")
                        .templateParam(param -> param.key("bg_id").value(bgId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, BillingGroup.class))
                        .nullify404(false)
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Error",
                                (reason, context) -> new ErrorErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Updates all editable attributes of the billing_group with the given id.
     * @param  bgId  Required parameter: id of the billing_group
     * @param  description  Optional parameter: Description of the billing group.
     * @param  name  Optional parameter: Name of the billing group.
     * @return    Returns the BillingGroup response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public BillingGroup billingGroupUpdate(
            final String bgId,
            final String description,
            final String name) throws ApiException, IOException {
        return prepareBillingGroupUpdateRequest(bgId, description, name).execute();
    }

    /**
     * Updates all editable attributes of the billing_group with the given id.
     * @param  bgId  Required parameter: id of the billing_group
     * @param  description  Optional parameter: Description of the billing group.
     * @param  name  Optional parameter: Name of the billing group.
     * @return    Returns the BillingGroup response from the API call
     */
    public CompletableFuture<BillingGroup> billingGroupUpdateAsync(
            final String bgId,
            final String description,
            final String name) {
        try { 
            return prepareBillingGroupUpdateRequest(bgId, description, name).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for billingGroupUpdate.
     */
    private ApiCall<BillingGroup, ApiException> prepareBillingGroupUpdateRequest(
            final String bgId,
            final String description,
            final String name) throws IOException {
        return new ApiCall.Builder<BillingGroup, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/billing_groups/{bg_id}")
                        .formParam(param -> param.key("description")
                                .value(description).isRequired(false))
                        .formParam(param -> param.key("name")
                                .value(name).isRequired(false))
                        .templateParam(param -> param.key("bg_id").value(bgId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/x-www-form-urlencoded").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, BillingGroup.class))
                        .nullify404(false)
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Error",
                                (reason, context) -> new ErrorErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Returns a list of your billing_groups. The billing_groups are returned sorted by creation
     * date, with the most recently created billing_groups appearing first.
     * @param  limit  Optional parameter: How many results to return.
     * @param  offset  Optional parameter: An integer that designates the offset at which to begin
     *         returning results. Defaults to 0.
     * @param  include  Optional parameter: Request that the response include the total count by
     *         specifying `include=["total_count"]`.
     * @param  dateCreated  Optional parameter: Filter by date created. Accepted formats are
     *         ISO-8601 date or datetime, e.g. `{ "gt": "2012-01-01", "lt": "2012-01-31T12:34:56Z"
     *         }` where `gt` is &gt;, `lt` is &lt;, `gte` is ≥, and `lte` is ≤.
     * @param  dateModified  Optional parameter: Filter by date modified. Accepted formats are
     *         ISO-8601 date or datetime, e.g. `{ "gt": "2012-01-01", "lt": "2012-01-31T12:34:56Z"
     *         }` where `gt` is &gt;, `lt` is &lt;, `gte` is ≥, and `lte` is ≤.
     * @param  sortBy  Optional parameter: Sorts items by ascending or descending dates. Use either
     *         `date_created` or `date_modified`, not both.
     * @return    Returns the BillingGroupsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public BillingGroupsResponse billingGroupsList(
            final Integer limit,
            final Integer offset,
            final List<String> include,
            final Map<String, String> dateCreated,
            final Map<String, String> dateModified,
            final SortBy sortBy) throws ApiException, IOException {
        return prepareBillingGroupsListRequest(limit, offset, include, dateCreated, dateModified,
                sortBy).execute();
    }

    /**
     * Returns a list of your billing_groups. The billing_groups are returned sorted by creation
     * date, with the most recently created billing_groups appearing first.
     * @param  limit  Optional parameter: How many results to return.
     * @param  offset  Optional parameter: An integer that designates the offset at which to begin
     *         returning results. Defaults to 0.
     * @param  include  Optional parameter: Request that the response include the total count by
     *         specifying `include=["total_count"]`.
     * @param  dateCreated  Optional parameter: Filter by date created. Accepted formats are
     *         ISO-8601 date or datetime, e.g. `{ "gt": "2012-01-01", "lt": "2012-01-31T12:34:56Z"
     *         }` where `gt` is &gt;, `lt` is &lt;, `gte` is ≥, and `lte` is ≤.
     * @param  dateModified  Optional parameter: Filter by date modified. Accepted formats are
     *         ISO-8601 date or datetime, e.g. `{ "gt": "2012-01-01", "lt": "2012-01-31T12:34:56Z"
     *         }` where `gt` is &gt;, `lt` is &lt;, `gte` is ≥, and `lte` is ≤.
     * @param  sortBy  Optional parameter: Sorts items by ascending or descending dates. Use either
     *         `date_created` or `date_modified`, not both.
     * @return    Returns the BillingGroupsResponse response from the API call
     */
    public CompletableFuture<BillingGroupsResponse> billingGroupsListAsync(
            final Integer limit,
            final Integer offset,
            final List<String> include,
            final Map<String, String> dateCreated,
            final Map<String, String> dateModified,
            final SortBy sortBy) {
        try { 
            return prepareBillingGroupsListRequest(limit, offset, include, dateCreated, dateModified,
            sortBy).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for billingGroupsList.
     */
    private ApiCall<BillingGroupsResponse, ApiException> prepareBillingGroupsListRequest(
            final Integer limit,
            final Integer offset,
            final List<String> include,
            final Map<String, String> dateCreated,
            final Map<String, String> dateModified,
            final SortBy sortBy) throws IOException {
        return new ApiCall.Builder<BillingGroupsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/billing_groups")
                        .queryParam(param -> param.key("limit")
                                .value((limit != null) ? limit : 10).isRequired(false))
                        .queryParam(param -> param.key("offset")
                                .value((offset != null) ? offset : 0).isRequired(false))
                        .queryParam(param -> param.key("include")
                                .value(include).isRequired(false))
                        .queryParam(param -> param.key("date_created")
                                .value(dateCreated).isRequired(false))
                        .queryParam(param -> param.key("date_modified")
                                .value(dateModified).isRequired(false))
                        .queryParam(param -> param.key("sort_by")
                                .value(sortBy).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, BillingGroupsResponse.class))
                        .nullify404(false)
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Error",
                                (reason, context) -> new ErrorErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Creates a new billing_group with the provided properties.
     * @param  body  Required parameter: Example:
     * @return    Returns the BillingGroup response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public BillingGroup billingGroupCreate(
            final BillingGroupEditable body) throws ApiException, IOException {
        return prepareBillingGroupCreateRequest(body).execute();
    }

    /**
     * Creates a new billing_group with the provided properties.
     * @param  body  Required parameter: Example:
     * @return    Returns the BillingGroup response from the API call
     */
    public CompletableFuture<BillingGroup> billingGroupCreateAsync(
            final BillingGroupEditable body) {
        try { 
            return prepareBillingGroupCreateRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for billingGroupCreate.
     */
    private ApiCall<BillingGroup, ApiException> prepareBillingGroupCreateRequest(
            final BillingGroupEditable body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<BillingGroup, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/billing_groups")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, BillingGroup.class))
                        .nullify404(false)
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Error",
                                (reason, context) -> new ErrorErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}