/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.lob.api;

import com.lob.api.controllers.AddressesController;
import com.lob.api.controllers.BankAccountsController;
import com.lob.api.controllers.BillingGroupsController;
import com.lob.api.controllers.BuckslipOrdersController;
import com.lob.api.controllers.BuckslipsController;
import com.lob.api.controllers.CampaignsController;
import com.lob.api.controllers.CardOrdersController;
import com.lob.api.controllers.CardsController;
import com.lob.api.controllers.ChecksController;
import com.lob.api.controllers.CreativesController;
import com.lob.api.controllers.IdentityValidationController;
import com.lob.api.controllers.IntlAutocompletionsController;
import com.lob.api.controllers.IntlVerificationsController;
import com.lob.api.controllers.LettersController;
import com.lob.api.controllers.PostcardsController;
import com.lob.api.controllers.QRCodesController;
import com.lob.api.controllers.ReverseGeocodeLookupsController;
import com.lob.api.controllers.SelfMailersController;
import com.lob.api.controllers.TemplateVersionsController;
import com.lob.api.controllers.TemplatesController;
import com.lob.api.controllers.URLShortenerController;
import com.lob.api.controllers.USAutocompletionsController;
import com.lob.api.controllers.USVerificationsController;
import com.lob.api.controllers.UploadsController;
import com.lob.api.controllers.ZipLookupsController;
import com.lob.api.http.client.HttpCallback;
import com.lob.api.http.client.HttpClientConfiguration;
import com.lob.api.http.client.ReadonlyHttpClientConfiguration;
import io.apimatic.core.GlobalConfiguration;
import io.apimatic.coreinterfaces.authentication.Authentication;
import io.apimatic.coreinterfaces.compatibility.CompatibilityFactory;
import io.apimatic.coreinterfaces.http.HttpClient;
import io.apimatic.okhttpclient.adapter.OkClient;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Consumer;

/**
 * Gateway class for the library.
 * This class acts as a factory for Controllers.
 * It holds the state of the SDK.
 */
public final class LobClient implements Configuration {

    /**
     * Private store for controllers.
     */
    private AddressesController addresses;
    private BankAccountsController bankAccounts;
    private BillingGroupsController billingGroups;
    private BuckslipOrdersController buckslipOrders;
    private BuckslipsController buckslips;
    private CampaignsController campaigns;
    private CardOrdersController cardOrders;
    private CardsController cards;
    private ChecksController checks;
    private CreativesController creatives;
    private IdentityValidationController identityValidation;
    private IntlAutocompletionsController intlAutocompletions;
    private IntlVerificationsController intlVerifications;
    private LettersController letters;
    private PostcardsController postcards;
    private QRCodesController qRCodes;
    private ReverseGeocodeLookupsController reverseGeocodeLookups;
    private SelfMailersController selfMailers;
    private TemplateVersionsController templateVersions;
    private TemplatesController templates;
    private UploadsController uploads;
    private URLShortenerController uRLShortener;
    private USAutocompletionsController uSAutocompletions;
    private USVerificationsController uSVerifications;
    private ZipLookupsController zipLookups;

    private static final CompatibilityFactory compatibilityFactory = new CompatibilityFactoryImpl();

    private static String userAgent = "APIMATIC 3.0";

    /**
     * Current API environment.
     */
    private final Environment environment;

    /**
     * The HTTP Client instance to use for making HTTP requests.
     */
    private final HttpClient httpClient;

    /**
     * Http Client Configuration instance.
     */
    private final ReadonlyHttpClientConfiguration httpClientConfig;

    /**
     * BasicAuthManager.
     */
    private BasicAuthManager basicAuthManager;

    /**
     * Map of authentication Managers.
     */
    private Map<String, Authentication> authentications;


    /**
     * Callback to be called before and after the HTTP call for an endpoint is made.
     */
    private final HttpCallback httpCallback;

    private LobClient(Environment environment, HttpClient httpClient,
            ReadonlyHttpClientConfiguration httpClientConfig, String basicAuthUserName,
            String basicAuthPassword, Map<String, Authentication> authentications,
            HttpCallback httpCallback) {
        this.environment = environment;
        this.httpClient = httpClient;
        this.httpClientConfig = httpClientConfig;
        this.httpCallback = httpCallback;
        this.authentications = 
                (authentications == null) ? new HashMap<>() : new HashMap<>(authentications);
        if (this.authentications.containsKey("global")) {
            this.basicAuthManager = (BasicAuthManager) this.authentications.get("global");
        }

        if (!this.authentications.containsKey("global")
                || !getBasicAuthCredentials().equals(basicAuthUserName, basicAuthPassword)) {
            this.basicAuthManager = new BasicAuthManager(basicAuthUserName, basicAuthPassword);
            this.authentications.put("global", basicAuthManager);
        }

        GlobalConfiguration globalConfig = new GlobalConfiguration.Builder()
                .authentication(this.authentications).compatibilityFactory(compatibilityFactory)
                .httpClient(httpClient).baseUri(server -> getBaseUri(server))
                .callback(httpCallback)
                .userAgent(userAgent)
                .build();
        addresses = new AddressesController(globalConfig);
        bankAccounts = new BankAccountsController(globalConfig);
        billingGroups = new BillingGroupsController(globalConfig);
        buckslipOrders = new BuckslipOrdersController(globalConfig);
        buckslips = new BuckslipsController(globalConfig);
        campaigns = new CampaignsController(globalConfig);
        cardOrders = new CardOrdersController(globalConfig);
        cards = new CardsController(globalConfig);
        checks = new ChecksController(globalConfig);
        creatives = new CreativesController(globalConfig);
        identityValidation = new IdentityValidationController(globalConfig);
        intlAutocompletions = new IntlAutocompletionsController(globalConfig);
        intlVerifications = new IntlVerificationsController(globalConfig);
        letters = new LettersController(globalConfig);
        postcards = new PostcardsController(globalConfig);
        qRCodes = new QRCodesController(globalConfig);
        reverseGeocodeLookups = new ReverseGeocodeLookupsController(globalConfig);
        selfMailers = new SelfMailersController(globalConfig);
        templateVersions = new TemplateVersionsController(globalConfig);
        templates = new TemplatesController(globalConfig);
        uploads = new UploadsController(globalConfig);
        uRLShortener = new URLShortenerController(globalConfig);
        uSAutocompletions = new USAutocompletionsController(globalConfig);
        uSVerifications = new USVerificationsController(globalConfig);
        zipLookups = new ZipLookupsController(globalConfig);
    }

    /**
     * Shutdown the underlying HttpClient instance.
     */
    public static void shutdown() {
        OkClient.shutdown();
    }

    /**
     * Get the instance of AddressesController.
     * @return addresses
     */
    public AddressesController getAddressesController() {
        return addresses;
    }

    /**
     * Get the instance of BankAccountsController.
     * @return bankAccounts
     */
    public BankAccountsController getBankAccountsController() {
        return bankAccounts;
    }

    /**
     * Get the instance of BillingGroupsController.
     * @return billingGroups
     */
    public BillingGroupsController getBillingGroupsController() {
        return billingGroups;
    }

    /**
     * Get the instance of BuckslipOrdersController.
     * @return buckslipOrders
     */
    public BuckslipOrdersController getBuckslipOrdersController() {
        return buckslipOrders;
    }

    /**
     * Get the instance of BuckslipsController.
     * @return buckslips
     */
    public BuckslipsController getBuckslipsController() {
        return buckslips;
    }

    /**
     * Get the instance of CampaignsController.
     * @return campaigns
     */
    public CampaignsController getCampaignsController() {
        return campaigns;
    }

    /**
     * Get the instance of CardOrdersController.
     * @return cardOrders
     */
    public CardOrdersController getCardOrdersController() {
        return cardOrders;
    }

    /**
     * Get the instance of CardsController.
     * @return cards
     */
    public CardsController getCardsController() {
        return cards;
    }

    /**
     * Get the instance of ChecksController.
     * @return checks
     */
    public ChecksController getChecksController() {
        return checks;
    }

    /**
     * Get the instance of CreativesController.
     * @return creatives
     */
    public CreativesController getCreativesController() {
        return creatives;
    }

    /**
     * Get the instance of IdentityValidationController.
     * @return identityValidation
     */
    public IdentityValidationController getIdentityValidationController() {
        return identityValidation;
    }

    /**
     * Get the instance of IntlAutocompletionsController.
     * @return intlAutocompletions
     */
    public IntlAutocompletionsController getIntlAutocompletionsController() {
        return intlAutocompletions;
    }

    /**
     * Get the instance of IntlVerificationsController.
     * @return intlVerifications
     */
    public IntlVerificationsController getIntlVerificationsController() {
        return intlVerifications;
    }

    /**
     * Get the instance of LettersController.
     * @return letters
     */
    public LettersController getLettersController() {
        return letters;
    }

    /**
     * Get the instance of PostcardsController.
     * @return postcards
     */
    public PostcardsController getPostcardsController() {
        return postcards;
    }

    /**
     * Get the instance of QRCodesController.
     * @return qRCodes
     */
    public QRCodesController getQRCodesController() {
        return qRCodes;
    }

    /**
     * Get the instance of ReverseGeocodeLookupsController.
     * @return reverseGeocodeLookups
     */
    public ReverseGeocodeLookupsController getReverseGeocodeLookupsController() {
        return reverseGeocodeLookups;
    }

    /**
     * Get the instance of SelfMailersController.
     * @return selfMailers
     */
    public SelfMailersController getSelfMailersController() {
        return selfMailers;
    }

    /**
     * Get the instance of TemplateVersionsController.
     * @return templateVersions
     */
    public TemplateVersionsController getTemplateVersionsController() {
        return templateVersions;
    }

    /**
     * Get the instance of TemplatesController.
     * @return templates
     */
    public TemplatesController getTemplatesController() {
        return templates;
    }

    /**
     * Get the instance of UploadsController.
     * @return uploads
     */
    public UploadsController getUploadsController() {
        return uploads;
    }

    /**
     * Get the instance of URLShortenerController.
     * @return uRLShortener
     */
    public URLShortenerController getURLShortenerController() {
        return uRLShortener;
    }

    /**
     * Get the instance of USAutocompletionsController.
     * @return uSAutocompletions
     */
    public USAutocompletionsController getUSAutocompletionsController() {
        return uSAutocompletions;
    }

    /**
     * Get the instance of USVerificationsController.
     * @return uSVerifications
     */
    public USVerificationsController getUSVerificationsController() {
        return uSVerifications;
    }

    /**
     * Get the instance of ZipLookupsController.
     * @return zipLookups
     */
    public ZipLookupsController getZipLookupsController() {
        return zipLookups;
    }

    /**
     * Current API environment.
     * @return environment
     */
    public Environment getEnvironment() {
        return environment;
    }

    /**
     * The HTTP Client instance to use for making HTTP requests.
     * @return httpClient
     */
    private HttpClient getHttpClient() {
        return httpClient;
    }

    /**
     * Http Client Configuration instance.
     * @return httpClientConfig
     */
    public ReadonlyHttpClientConfiguration getHttpClientConfig() {
        return httpClientConfig;
    }

    /**
     * The credentials to use with BasicAuth.
     * @return basicAuthCredentials
     */
    public BasicAuthCredentials getBasicAuthCredentials() {
        return basicAuthManager;
    }
    /**
     * The timeout to use for making HTTP requests.
     * @deprecated This method will be removed in a future version. Use
     *             {@link #getHttpClientConfig()} instead.
     *
     * @return timeout
     */
    @Deprecated
    public long timeout() {
        return httpClientConfig.getTimeout();
    }

    /**
     * Get base URI by current environment.
     * @param server Server for which to get the base URI
     * @return Processed base URI
     */
    public String getBaseUri(Server server) {
        return environmentMapper(environment, server);
    }

    /**
     * Get base URI by current environment.
     * @return Processed base URI
     */
    public String getBaseUri() {
        return getBaseUri(Server.ENUM_DEFAULT);
    }


    /**
     * Get base URI by current environment.
     * 
     * @param server string for which to get the base URI
     * @return Processed base URI
     */
    public String getBaseUri(String server) {
        return getBaseUri(Server.fromString(server));
    }


    /**
     * Base URLs by environment and server aliases.
     * @param environment Environment for which to get the base URI
     * @param server Server for which to get the base URI
     * @return base URL
     */
    private static String environmentMapper(Environment environment, Server server) {
        if (environment.equals(Environment.PRODUCTION)) {
            if (server.equals(Server.ENUM_DEFAULT)) {
                return "https://api.lob.com/v1";
            }
        }
        return "https://api.lob.com/v1";
    }

    /**
     * Converts this LobClient into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "LobClient [" + "environment=" + environment + ", httpClientConfig="
                + httpClientConfig + ", authentications=" + authentications + "]";
    }

    /**
     * Builds a new {@link LobClient.Builder} object.
     * Creates the instance with the state of the current client.
     * @return a new {@link LobClient.Builder} object
     */
    public Builder newBuilder() {
        Builder builder = new Builder();
        builder.environment = getEnvironment();
        builder.httpClient = getHttpClient();
        builder.basicAuthUserName = getBasicAuthCredentials().getBasicAuthUserName();
        builder.basicAuthPassword = getBasicAuthCredentials().getBasicAuthPassword();
        builder.authentications = authentications;
        builder.httpCallback = httpCallback;
        builder.httpClientConfig(configBldr -> configBldr =
                ((HttpClientConfiguration) httpClientConfig).newBuilder());
        return builder;
    }

    /**
     * Class to build instances of {@link LobClient}.
     */
    public static class Builder {

        private Environment environment = Environment.PRODUCTION;
        private HttpClient httpClient;
        private String basicAuthUserName = "TODO: Replace";
        private String basicAuthPassword = "TODO: Replace";
        private Map<String, Authentication> authentications = null;
        private HttpCallback httpCallback = null;
        private HttpClientConfiguration.Builder httpClientConfigBuilder =
                new HttpClientConfiguration.Builder();


        /**
         * Credentials setter for BasicAuth.
         * @param basicAuthUserName String value for basicAuthUserName.
         * @param basicAuthPassword String value for basicAuthPassword.
         * @return Builder
         */
        public Builder basicAuthCredentials(String basicAuthUserName, String basicAuthPassword) {
            if (basicAuthUserName == null) {
                throw new NullPointerException("BasicAuthUserName cannot be null.");
            }
            if (basicAuthPassword == null) {
                throw new NullPointerException("BasicAuthPassword cannot be null.");
            }
            this.basicAuthUserName = basicAuthUserName;
            this.basicAuthPassword = basicAuthPassword;
            return this;
        }

        /**
         * Current API environment.
         * @param environment The environment for client.
         * @return Builder
         */
        public Builder environment(Environment environment) {
            this.environment = environment;
            return this;
        }

        /**
         * The timeout to use for making HTTP requests.
         * @deprecated This method will be removed in a future version. Use
         *             {@link #httpClientConfig(Consumer) httpClientConfig} instead.
         * @param timeout must be greater then 0.
         * @return Builder
         */
        @Deprecated
        public Builder timeout(long timeout) {
            this.httpClientConfigBuilder.timeout(timeout);
            return this;
        }

        /**
         * HttpCallback.
         * @param httpCallback Callback to be called before and after the HTTP call.
         * @return Builder
         */
        public Builder httpCallback(HttpCallback httpCallback) {
            this.httpCallback = httpCallback;
            return this;
        }

        /**
         * Setter for the Builder of httpClientConfiguration, takes in an operation to be performed
         * on the builder instance of HTTP client configuration.
         * 
         * @param action Consumer for the builder of httpClientConfiguration.
         * @return Builder
         */
        public Builder httpClientConfig(Consumer<HttpClientConfiguration.Builder> action) {
            action.accept(httpClientConfigBuilder);
            return this;
        }

        /**
         * Builds a new LobClient object using the set fields.
         * @return LobClient
         */
        public LobClient build() {
            HttpClientConfiguration httpClientConfig = httpClientConfigBuilder.build();
            httpClient = new OkClient(httpClientConfig.getConfiguration(), compatibilityFactory);

            return new LobClient(environment, httpClient, httpClientConfig, basicAuthUserName,
                    basicAuthPassword, authentications, httpCallback);
        }
    }
}