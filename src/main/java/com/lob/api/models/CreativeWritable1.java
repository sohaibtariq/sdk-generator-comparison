/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.lob.api.models;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.lob.api.models.containers.CrvFile;
import com.lob.api.models.containers.FromAttribute;
import io.apimatic.core.types.OptionalNullable;
import java.util.Map;

/**
 * This is a model class for CreativeWritable1 type.
 */
public class CreativeWritable1 {
    private String resourceType;
    private String campaignId;
    private LetterDetailsWritable details;
    private CrvFile file;
    private FromAttribute from;
    private OptionalNullable<String> description;
    private Map<String, String> metadata;

    /**
     * Default constructor.
     */
    public CreativeWritable1() {
        resourceType = "letter";
    }

    /**
     * Initialization constructor.
     * @param  resourceType  String value for resourceType.
     * @param  campaignId  String value for campaignId.
     * @param  details  LetterDetailsWritable value for details.
     * @param  file  CrvFile value for file.
     * @param  from  FromAttribute value for from.
     * @param  description  String value for description.
     * @param  metadata  Map of String, value for metadata.
     */
    public CreativeWritable1(
            String resourceType,
            String campaignId,
            LetterDetailsWritable details,
            CrvFile file,
            FromAttribute from,
            String description,
            Map<String, String> metadata) {
        this.resourceType = resourceType;
        this.campaignId = campaignId;
        this.details = details;
        this.file = file;
        this.from = from;
        this.description = OptionalNullable.of(description);
        this.metadata = metadata;
    }

    /**
     * Initialization constructor.
     * @param  resourceType  String value for resourceType.
     * @param  campaignId  String value for campaignId.
     * @param  details  LetterDetailsWritable value for details.
     * @param  file  CrvFile value for file.
     * @param  from  FromAttribute value for from.
     * @param  description  String value for description.
     * @param  metadata  Map of String, value for metadata.
     */

    protected CreativeWritable1(String resourceType, String campaignId,
            LetterDetailsWritable details, CrvFile file, FromAttribute from,
            OptionalNullable<String> description, Map<String, String> metadata) {
        this.resourceType = resourceType;
        this.campaignId = campaignId;
        this.details = details;
        this.file = file;
        this.from = from;
        this.description = description;
        this.metadata = metadata;
    }

    /**
     * Initialization constructor.
     * @param  resourceType  String value for resourceType.
     * @param  campaignId  String value for campaignId.
     * @param  details  LetterDetailsWritable value for details.
     * @param  file  CrvFile value for file.
     * @param  from  FromAttribute value for from.
     */
    @JsonCreator
    protected CreativeWritable1(
            @JsonProperty("resource_type") String resourceType,
            @JsonProperty("campaign_id") String campaignId,
            @JsonProperty("details") LetterDetailsWritable details,
            @JsonProperty("file") CrvFile file,
            @JsonProperty("from") FromAttribute from) {
        this(resourceType, campaignId, details, file, from, OptionalNullable.of(null), null);
        unsetDescription();
    }

    /**
     * Getter for ResourceType.
     * Mailpiece type for the creative
     * @return Returns the String
     */
    @JsonGetter("resource_type")
    public String getResourceType() {
        return resourceType;
    }

    /**
     * Setter for ResourceType.
     * Mailpiece type for the creative
     * @param resourceType Value for String
     */
    @JsonSetter("resource_type")
    private void setResourceType(String resourceType) {
        this.resourceType = resourceType;
    }

    /**
     * Getter for CampaignId.
     * Unique identifier prefixed with `cmp_`.
     * @return Returns the String
     */
    @JsonGetter("campaign_id")
    public String getCampaignId() {
        return campaignId;
    }

    /**
     * Setter for CampaignId.
     * Unique identifier prefixed with `cmp_`.
     * @param campaignId Value for String
     */
    @JsonSetter("campaign_id")
    public void setCampaignId(String campaignId) {
        this.campaignId = campaignId;
    }

    /**
     * Getter for Details.
     * Properties that the letters in your Creative should have. Check within in order to add a QR
     * code to your creative.
     * @return Returns the LetterDetailsWritable
     */
    @JsonGetter("details")
    public LetterDetailsWritable getDetails() {
        return details;
    }

    /**
     * Setter for Details.
     * Properties that the letters in your Creative should have. Check within in order to add a QR
     * code to your creative.
     * @param details Value for LetterDetailsWritable
     */
    @JsonSetter("details")
    public void setDetails(LetterDetailsWritable details) {
        this.details = details;
    }

    /**
     * Getter for File.
     * Notes: - HTML merge variables should not include delimiting whitespace. - All pages of a
     * supplied PDF file must be sized at 8.5"x11", while supplied HTML will be rendered and trimmed
     * to as many 8.5"x11" pages as necessary. - For design specifications, please see our &lt;a
     * href="https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/letter_template.pdf"
     * target="_blank"&gt;PDF&lt;/a&gt; and [HTML](#section/HTML-Examples) templates. - If a
     * `custom_envelope` is used, follow &lt;a
     * href="https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/letter_custom_envelope.pdf"
     * target="_blank"&gt;this template&lt;/a&gt;. - For domestic destinations, the file limit is 60 pages
     * single-sided or 120 pages double-sided. For international destinations, the file limit is 6
     * pages single-sided or 12 pages double-sided. PDFs that surpass the file limit will error,
     * while HTML that renders more pages than the file limit will be trimmed. - Any letters over 6
     * pages single-sided or 12 pages double-sided will be placed in a &lt;a
     * href="https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/letter_flat_template.pdf"
     * target="_blank"&gt;flat envelope&lt;/a&gt; instead of the standard double window envelope. See &lt;a
     * href="https://lob.com/pricing/print-mail#compare" target="_blank"&gt;pricing&lt;/a&gt; for extra costs
     * incurred.
     * @return Returns the CrvFile
     */
    @JsonGetter("file")
    public CrvFile getFile() {
        return file;
    }

    /**
     * Setter for File.
     * Notes: - HTML merge variables should not include delimiting whitespace. - All pages of a
     * supplied PDF file must be sized at 8.5"x11", while supplied HTML will be rendered and trimmed
     * to as many 8.5"x11" pages as necessary. - For design specifications, please see our &lt;a
     * href="https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/letter_template.pdf"
     * target="_blank"&gt;PDF&lt;/a&gt; and [HTML](#section/HTML-Examples) templates. - If a
     * `custom_envelope` is used, follow &lt;a
     * href="https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/letter_custom_envelope.pdf"
     * target="_blank"&gt;this template&lt;/a&gt;. - For domestic destinations, the file limit is 60 pages
     * single-sided or 120 pages double-sided. For international destinations, the file limit is 6
     * pages single-sided or 12 pages double-sided. PDFs that surpass the file limit will error,
     * while HTML that renders more pages than the file limit will be trimmed. - Any letters over 6
     * pages single-sided or 12 pages double-sided will be placed in a &lt;a
     * href="https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/letter_flat_template.pdf"
     * target="_blank"&gt;flat envelope&lt;/a&gt; instead of the standard double window envelope. See &lt;a
     * href="https://lob.com/pricing/print-mail#compare" target="_blank"&gt;pricing&lt;/a&gt; for extra costs
     * incurred.
     * @param file Value for CrvFile
     */
    @JsonSetter("file")
    public void setFile(CrvFile file) {
        this.file = file;
    }

    /**
     * Getter for From.
     * Must either be an address ID or an inline object with correct address parameters. All
     * addresses will be standardized into uppercase without being modified by verification.
     * @return Returns the FromAttribute
     */
    @JsonGetter("from")
    public FromAttribute getFrom() {
        return from;
    }

    /**
     * Setter for From.
     * Must either be an address ID or an inline object with correct address parameters. All
     * addresses will be standardized into uppercase without being modified by verification.
     * @param from Value for FromAttribute
     */
    @JsonSetter("from")
    public void setFrom(FromAttribute from) {
        this.from = from;
    }

    /**
     * Internal Getter for Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     * @return Returns the Internal String
     */
    @JsonGetter("description")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetDescription() {
        return this.description;
    }

    /**
     * Getter for Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     * @return Returns the String
     */
    public String getDescription() {
        return OptionalNullable.getFrom(description);
    }

    /**
     * Setter for Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     * @param description Value for String
     */
    @JsonSetter("description")
    public void setDescription(String description) {
        this.description = OptionalNullable.of(description);
    }

    /**
     * UnSetter for Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     */
    public void unsetDescription() {
        description = null;
    }

    /**
     * Getter for Metadata.
     * Use metadata to store custom information for tagging and labeling back to your internal
     * systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters
     * and values must be at most 500 characters. Neither can contain the characters `"` and `\`.
     * i.e. '{"customer_id" : "NEWYORK2015"}' Nested objects are not supported. See
     * [Metadata](#section/Metadata) for more information.
     * @return Returns the Map of String, String
     */
    @JsonGetter("metadata")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Map<String, String> getMetadata() {
        return metadata;
    }

    /**
     * Setter for Metadata.
     * Use metadata to store custom information for tagging and labeling back to your internal
     * systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters
     * and values must be at most 500 characters. Neither can contain the characters `"` and `\`.
     * i.e. '{"customer_id" : "NEWYORK2015"}' Nested objects are not supported. See
     * [Metadata](#section/Metadata) for more information.
     * @param metadata Value for Map of String, String
     */
    @JsonSetter("metadata")
    public void setMetadata(Map<String, String> metadata) {
        this.metadata = metadata;
    }

    /**
     * Converts this CreativeWritable1 into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "CreativeWritable1 [" + "resourceType=" + resourceType + ", campaignId=" + campaignId
                + ", details=" + details + ", file=" + file + ", from=" + from + ", description="
                + description + ", metadata=" + metadata + "]";
    }

    /**
     * Builds a new {@link CreativeWritable1.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link CreativeWritable1.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(resourceType, campaignId, details, file, from)
                .metadata(getMetadata());
        builder.description = internalGetDescription();
        return builder;
    }

    /**
     * Class to build instances of {@link CreativeWritable1}.
     */
    public static class Builder {
        private String resourceType = "letter";
        private String campaignId;
        private LetterDetailsWritable details;
        private CrvFile file;
        private FromAttribute from;
        private OptionalNullable<String> description;
        private Map<String, String> metadata;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  resourceType  String value for resourceType.
         * @param  campaignId  String value for campaignId.
         * @param  details  LetterDetailsWritable value for details.
         * @param  file  CrvFile value for file.
         * @param  from  FromAttribute value for from.
         */
        public Builder(String resourceType, String campaignId, LetterDetailsWritable details,
                CrvFile file, FromAttribute from) {
            this.resourceType = resourceType;
            this.campaignId = campaignId;
            this.details = details;
            this.file = file;
            this.from = from;
        }

        /**
         * Setter for resourceType.
         * @param  resourceType  String value for resourceType.
         * @return Builder
         */
        public Builder resourceType(String resourceType) {
            this.resourceType = resourceType;
            return this;
        }

        /**
         * Setter for campaignId.
         * @param  campaignId  String value for campaignId.
         * @return Builder
         */
        public Builder campaignId(String campaignId) {
            this.campaignId = campaignId;
            return this;
        }

        /**
         * Setter for details.
         * @param  details  LetterDetailsWritable value for details.
         * @return Builder
         */
        public Builder details(LetterDetailsWritable details) {
            this.details = details;
            return this;
        }

        /**
         * Setter for file.
         * @param  file  CrvFile value for file.
         * @return Builder
         */
        public Builder file(CrvFile file) {
            this.file = file;
            return this;
        }

        /**
         * Setter for from.
         * @param  from  FromAttribute value for from.
         * @return Builder
         */
        public Builder from(FromAttribute from) {
            this.from = from;
            return this;
        }

        /**
         * Setter for description.
         * @param  description  String value for description.
         * @return Builder
         */
        public Builder description(String description) {
            this.description = OptionalNullable.of(description);
            return this;
        }

        /**
         * UnSetter for description.
         * @return Builder
         */
        public Builder unsetDescription() {
            description = null;
            return this;
        }

        /**
         * Setter for metadata.
         * @param  metadata  Map of String, value for metadata.
         * @return Builder
         */
        public Builder metadata(Map<String, String> metadata) {
            this.metadata = metadata;
            return this;
        }

        /**
         * Builds a new {@link CreativeWritable1} object using the set fields.
         * @return {@link CreativeWritable1}
         */
        public CreativeWritable1 build() {
            return new CreativeWritable1(resourceType, campaignId, details, file, from, description,
                    metadata);
        }
    }
}
