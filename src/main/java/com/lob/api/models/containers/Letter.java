/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.lob.api.models.containers;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.lob.api.ApiHelper;
import com.lob.api.models.Certified;
import com.lob.api.models.NoExtraService;
import com.lob.api.models.Registered;
import io.apimatic.core.annotations.TypeCombinator.TypeCombinatorCase;
import java.io.IOException;
import java.util.Arrays;

/**
 * This is a container class for one-of types.
 */
@JsonDeserialize(using = Letter.LetterDeserializer.class)
public abstract class Letter {
    
    /**
     * This is no_extra_service case.
     * @param noExtraService NoExtraService value for noExtraService.
     * @return The NoExtraServiceCase object.
     */
    public static Letter fromNoExtraService(NoExtraService noExtraService) {
        return noExtraService == null ? null : new NoExtraServiceCase(noExtraService);
    }

    /**
     * This is registered case.
     * @param registered Registered value for registered.
     * @return The RegisteredCase object.
     */
    public static Letter fromRegistered(Registered registered) {
        return registered == null ? null : new RegisteredCase(registered);
    }

    /**
     * This is certified case.
     * @param certified Certified value for certified.
     * @return The CertifiedCase object.
     */
    public static Letter fromCertified(Certified certified) {
        return certified == null ? null : new CertifiedCase(certified);
    }

    /**
     * Method to match from the provided one-of cases.
     * @param <R> The type to return after applying callback.
     * @param cases The one-of type cases callback.
     * @return The one-of matched case.
     */
    public abstract <R> R match(Cases<R> cases);

    /**
     * This is interface for one-of cases.
     * @param <R> The type to return after applying callback.
     */
    public interface Cases<R> {
        R noExtraService(NoExtraService noExtraService);

        R registered(Registered registered);

        R certified(Certified certified);
    }

    /**
     * This is a implementation class for NoExtraServiceCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "NoExtraService")
    private static class NoExtraServiceCase extends Letter {

        @JsonValue
        private NoExtraService noExtraService;

        NoExtraServiceCase(NoExtraService noExtraService) {
            this.noExtraService = noExtraService;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.noExtraService(this.noExtraService);
        }

        @JsonCreator
        private NoExtraServiceCase(JsonNode jsonNode) throws IOException {
            this.noExtraService = ApiHelper.deserialize(jsonNode,
                NoExtraService.class);
        }

        @Override
        public String toString() {
            return noExtraService.toString();
        }
    }

    /**
     * This is a implementation class for RegisteredCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "Registered")
    private static class RegisteredCase extends Letter {

        @JsonValue
        private Registered registered;

        RegisteredCase(Registered registered) {
            this.registered = registered;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.registered(this.registered);
        }

        @JsonCreator
        private RegisteredCase(JsonNode jsonNode) throws IOException {
            this.registered = ApiHelper.deserialize(jsonNode,
                Registered.class);
        }

        @Override
        public String toString() {
            return registered.toString();
        }
    }

    /**
     * This is a implementation class for CertifiedCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "Certified")
    private static class CertifiedCase extends Letter {

        @JsonValue
        private Certified certified;

        CertifiedCase(Certified certified) {
            this.certified = certified;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.certified(this.certified);
        }

        @JsonCreator
        private CertifiedCase(JsonNode jsonNode) throws IOException {
            this.certified = ApiHelper.deserialize(jsonNode,
                Certified.class);
        }

        @Override
        public String toString() {
            return certified.toString();
        }
    }

    /**
     * This is a custom deserializer class for Letter.
     */
    protected static class LetterDeserializer
            extends JsonDeserializer<Letter> {

        @Override
        public Letter deserialize(JsonParser jp, DeserializationContext ctxt)
                throws IOException, JsonProcessingException {
            ObjectCodec oc = jp.getCodec();
            JsonNode node = oc.readTree(jp);
            return ApiHelper.deserialize(node, Arrays.asList(NoExtraServiceCase.class,
                    RegisteredCase.class, CertifiedCase.class), true);
        }
    }

}
