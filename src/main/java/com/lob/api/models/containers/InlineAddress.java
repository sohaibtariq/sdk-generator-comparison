/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.lob.api.models.containers;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.lob.api.ApiHelper;
import com.lob.api.models.InlineAddressIntl;
import com.lob.api.models.InlineAddressUs;
import io.apimatic.core.annotations.TypeCombinator.TypeCombinatorCase;
import java.io.IOException;
import java.util.Arrays;

/**
 * This is a container class for one-of types.
 */
@JsonDeserialize(using = InlineAddress.InlineAddressDeserializer.class)
public abstract class InlineAddress {
    
    /**
     * This is inline_address_us case.
     * @param inlineAddressUs InlineAddressUs value for inlineAddressUs.
     * @return The InlineAddressUsCase object.
     */
    public static InlineAddress fromInlineAddressUs(InlineAddressUs inlineAddressUs) {
        return inlineAddressUs == null ? null : new InlineAddressUsCase(inlineAddressUs);
    }

    /**
     * This is inline_address_intl case.
     * @param inlineAddressIntl InlineAddressIntl value for inlineAddressIntl.
     * @return The InlineAddressIntlCase object.
     */
    public static InlineAddress fromInlineAddressIntl(InlineAddressIntl inlineAddressIntl) {
        return inlineAddressIntl == null ? null : new InlineAddressIntlCase(inlineAddressIntl);
    }

    /**
     * Method to match from the provided one-of cases.
     * @param <R> The type to return after applying callback.
     * @param cases The one-of type cases callback.
     * @return The one-of matched case.
     */
    public abstract <R> R match(Cases<R> cases);

    /**
     * This is interface for one-of cases.
     * @param <R> The type to return after applying callback.
     */
    public interface Cases<R> {
        R inlineAddressUs(InlineAddressUs inlineAddressUs);

        R inlineAddressIntl(InlineAddressIntl inlineAddressIntl);
    }

    /**
     * This is a implementation class for InlineAddressUsCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "InlineAddressUs")
    private static class InlineAddressUsCase extends InlineAddress {

        @JsonValue
        private InlineAddressUs inlineAddressUs;

        InlineAddressUsCase(InlineAddressUs inlineAddressUs) {
            this.inlineAddressUs = inlineAddressUs;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.inlineAddressUs(this.inlineAddressUs);
        }

        @JsonCreator
        private InlineAddressUsCase(JsonNode jsonNode) throws IOException {
            this.inlineAddressUs = ApiHelper.deserialize(jsonNode,
                InlineAddressUs.class);
        }

        @Override
        public String toString() {
            return inlineAddressUs.toString();
        }
    }

    /**
     * This is a implementation class for InlineAddressIntlCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "InlineAddressIntl")
    private static class InlineAddressIntlCase extends InlineAddress {

        @JsonValue
        private InlineAddressIntl inlineAddressIntl;

        InlineAddressIntlCase(InlineAddressIntl inlineAddressIntl) {
            this.inlineAddressIntl = inlineAddressIntl;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.inlineAddressIntl(this.inlineAddressIntl);
        }

        @JsonCreator
        private InlineAddressIntlCase(JsonNode jsonNode) throws IOException {
            this.inlineAddressIntl = ApiHelper.deserialize(jsonNode,
                InlineAddressIntl.class);
        }

        @Override
        public String toString() {
            return inlineAddressIntl.toString();
        }
    }

    /**
     * This is a custom deserializer class for InlineAddress.
     */
    protected static class InlineAddressDeserializer
            extends JsonDeserializer<InlineAddress> {

        @Override
        public InlineAddress deserialize(JsonParser jp, DeserializationContext ctxt)
                throws IOException, JsonProcessingException {
            ObjectCodec oc = jp.getCodec();
            JsonNode node = oc.readTree(jp);
            return ApiHelper.deserialize(node, Arrays.asList(InlineAddressUsCase.class,
                    InlineAddressIntlCase.class), true);
        }
    }

}
