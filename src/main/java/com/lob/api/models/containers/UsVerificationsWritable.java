/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.lob.api.models.containers;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.lob.api.ApiHelper;
import com.lob.api.models.MultipleComponents;
import com.lob.api.models.SingleLineAddress;
import io.apimatic.core.annotations.TypeCombinator.TypeCombinatorCase;
import java.io.IOException;
import java.util.Arrays;

/**
 * This is a container class for one-of types.
 */
@JsonDeserialize(using = UsVerificationsWritable.UsVerificationsWritableDeserializer.class)
public abstract class UsVerificationsWritable {
    
    /**
     * This is multiple_components case.
     * @param multipleComponents MultipleComponents value for multipleComponents.
     * @return The MultipleComponentsCase object.
     */
    public static UsVerificationsWritable fromMultipleComponents(
            MultipleComponents multipleComponents) {
        return multipleComponents == null ? null : new MultipleComponentsCase(multipleComponents);
    }

    /**
     * This is single_line_address case.
     * @param singleLineAddress SingleLineAddress value for singleLineAddress.
     * @return The SingleLineAddressCase object.
     */
    public static UsVerificationsWritable fromSingleLineAddress(
            SingleLineAddress singleLineAddress) {
        return singleLineAddress == null ? null : new SingleLineAddressCase(singleLineAddress);
    }

    /**
     * Method to match from the provided one-of cases.
     * @param <R> The type to return after applying callback.
     * @param cases The one-of type cases callback.
     * @return The one-of matched case.
     */
    public abstract <R> R match(Cases<R> cases);

    /**
     * This is interface for one-of cases.
     * @param <R> The type to return after applying callback.
     */
    public interface Cases<R> {
        R multipleComponents(MultipleComponents multipleComponents);

        R singleLineAddress(SingleLineAddress singleLineAddress);
    }

    /**
     * This is a implementation class for MultipleComponentsCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "MultipleComponents")
    private static class MultipleComponentsCase extends UsVerificationsWritable {

        @JsonValue
        private MultipleComponents multipleComponents;

        MultipleComponentsCase(MultipleComponents multipleComponents) {
            this.multipleComponents = multipleComponents;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.multipleComponents(this.multipleComponents);
        }

        @JsonCreator
        private MultipleComponentsCase(JsonNode jsonNode) throws IOException {
            this.multipleComponents = ApiHelper.deserialize(jsonNode,
                MultipleComponents.class);
        }

        @Override
        public String toString() {
            return multipleComponents.toString();
        }
    }

    /**
     * This is a implementation class for SingleLineAddressCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "SingleLineAddress")
    private static class SingleLineAddressCase extends UsVerificationsWritable {

        @JsonValue
        private SingleLineAddress singleLineAddress;

        SingleLineAddressCase(SingleLineAddress singleLineAddress) {
            this.singleLineAddress = singleLineAddress;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.singleLineAddress(this.singleLineAddress);
        }

        @JsonCreator
        private SingleLineAddressCase(JsonNode jsonNode) throws IOException {
            this.singleLineAddress = ApiHelper.deserialize(jsonNode,
                SingleLineAddress.class);
        }

        @Override
        public String toString() {
            return singleLineAddress.toString();
        }
    }

    /**
     * This is a custom deserializer class for UsVerificationsWritable.
     */
    protected static class UsVerificationsWritableDeserializer
            extends JsonDeserializer<UsVerificationsWritable> {

        @Override
        public UsVerificationsWritable deserialize(JsonParser jp, DeserializationContext ctxt)
                throws IOException, JsonProcessingException {
            ObjectCodec oc = jp.getCodec();
            JsonNode node = oc.readTree(jp);
            return ApiHelper.deserialize(node, Arrays.asList(MultipleComponentsCase.class,
                    SingleLineAddressCase.class), true);
        }
    }

}
