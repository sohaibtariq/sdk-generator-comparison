/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.lob.api.models.containers;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.lob.api.ApiHelper;
import com.lob.api.DateTimeHelper;
import io.apimatic.core.annotations.TypeCombinator.TypeCombinatorCase;
import java.io.IOException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;

/**
 * This is a container class for any-of types.
 */
@JsonDeserialize(using = SendDate.SendDateDeserializer.class)
public abstract class SendDate {
    
    /**
     * This is DateTime case.
     * @param dateTime LocalDateTime value for dateTime.
     * @return The DateTimeCase object.
     */
    public static SendDate fromDateTime(LocalDateTime dateTime) {
        return dateTime == null ? null : new DateTimeCase(dateTime);
    }

    /**
     * This is Date case.
     * @param date LocalDate value for date.
     * @return The DateCase object.
     */
    public static SendDate fromDate(LocalDate date) {
        return date == null ? null : new DateCase(date);
    }

    /**
     * Method to match from the provided any-of cases.
     * @param <R> The type to return after applying callback.
     * @param cases The any-of type cases callback.
     * @return The any-of matched case.
     */
    public abstract <R> R match(Cases<R> cases);

    /**
     * This is interface for any-of cases.
     * @param <R> The type to return after applying callback.
     */
    public interface Cases<R> {
        R dateTime(LocalDateTime dateTime);

        R date(LocalDate date);
    }

    /**
     * This is a implementation class for DateTimeCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "LocalDateTime")
    private static class DateTimeCase extends SendDate {

        @JsonValue
        @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
        private LocalDateTime dateTime;

        DateTimeCase(LocalDateTime dateTime) {
            this.dateTime = dateTime;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.dateTime(this.dateTime);
        }

        @JsonCreator
        private DateTimeCase(JsonNode jsonNode) throws IOException {
            this.dateTime = DateTimeHelper.fromRfc8601DateTime(jsonNode.asText());
        }

        @Override
        public String toString() {
            return DateTimeHelper.toRfc8601DateTime(dateTime);
        }
    }

    /**
     * This is a implementation class for DateCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "LocalDate")
    private static class DateCase extends SendDate {

        @JsonValue
        @JsonSerialize(using = DateTimeHelper.SimpleDateSerializer.class)
        private LocalDate date;

        DateCase(LocalDate date) {
            this.date = date;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.date(this.date);
        }

        @JsonCreator
        private DateCase(JsonNode jsonNode) throws IOException {
            this.date = DateTimeHelper.fromSimpleDate(jsonNode.asText());
        }

        @Override
        public String toString() {
            return DateTimeHelper.toSimpleDate(date);
        }
    }

    /**
     * This is a custom deserializer class for SendDate.
     */
    protected static class SendDateDeserializer
            extends JsonDeserializer<SendDate> {

        @Override
        public SendDate deserialize(JsonParser jp, DeserializationContext ctxt)
                throws IOException, JsonProcessingException {
            ObjectCodec oc = jp.getCodec();
            JsonNode node = oc.readTree(jp);
            return ApiHelper.deserialize(node, Arrays.asList(DateTimeCase.class,
                    DateCase.class), false);
        }
    }

}
