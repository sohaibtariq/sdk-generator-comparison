/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.lob.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import java.util.Map;

/**
 * This is a model class for LinkSingle type.
 */
public class LinkSingle {
    private String redirectLink;
    private String domain;
    private String slug;
    private Map<String, String> metadataTag;
    private String billingGroupId;

    /**
     * Default constructor.
     */
    public LinkSingle() {
    }

    /**
     * Initialization constructor.
     * @param  redirectLink  String value for redirectLink.
     * @param  domain  String value for domain.
     * @param  slug  String value for slug.
     * @param  metadataTag  Map of String, value for metadataTag.
     * @param  billingGroupId  String value for billingGroupId.
     */
    public LinkSingle(
            String redirectLink,
            String domain,
            String slug,
            Map<String, String> metadataTag,
            String billingGroupId) {
        this.redirectLink = redirectLink;
        this.domain = domain;
        this.slug = slug;
        this.metadataTag = metadataTag;
        this.billingGroupId = billingGroupId;
    }

    /**
     * Getter for RedirectLink.
     * The original target URL.
     * @return Returns the String
     */
    @JsonGetter("redirect_link")
    public String getRedirectLink() {
        return redirectLink;
    }

    /**
     * Setter for RedirectLink.
     * The original target URL.
     * @param redirectLink Value for String
     */
    @JsonSetter("redirect_link")
    public void setRedirectLink(String redirectLink) {
        this.redirectLink = redirectLink;
    }

    /**
     * Getter for Domain.
     * The registered domain to be used for the short URL.
     * @return Returns the String
     */
    @JsonGetter("domain")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getDomain() {
        return domain;
    }

    /**
     * Setter for Domain.
     * The registered domain to be used for the short URL.
     * @param domain Value for String
     */
    @JsonSetter("domain")
    public void setDomain(String domain) {
        this.domain = domain;
    }

    /**
     * Getter for Slug.
     * The unique path for the shortened URL, if empty a unique path will be used.
     * @return Returns the String
     */
    @JsonGetter("slug")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getSlug() {
        return slug;
    }

    /**
     * Setter for Slug.
     * The unique path for the shortened URL, if empty a unique path will be used.
     * @param slug Value for String
     */
    @JsonSetter("slug")
    public void setSlug(String slug) {
        this.slug = slug;
    }

    /**
     * Getter for MetadataTag.
     * Use metadata to store custom information for tagging and labeling back to your internal
     * systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters
     * and values must be at most 500 characters. Neither can contain the characters `"` and `\`.
     * i.e. '{"customer_id" : "NEWYORK2015"}' Nested objects are not supported. See
     * [Metadata](#section/Metadata) for more information.
     * @return Returns the Map of String, String
     */
    @JsonGetter("metadata_tag")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Map<String, String> getMetadataTag() {
        return metadataTag;
    }

    /**
     * Setter for MetadataTag.
     * Use metadata to store custom information for tagging and labeling back to your internal
     * systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters
     * and values must be at most 500 characters. Neither can contain the characters `"` and `\`.
     * i.e. '{"customer_id" : "NEWYORK2015"}' Nested objects are not supported. See
     * [Metadata](#section/Metadata) for more information.
     * @param metadataTag Value for Map of String, String
     */
    @JsonSetter("metadata_tag")
    public void setMetadataTag(Map<String, String> metadataTag) {
        this.metadataTag = metadataTag;
    }

    /**
     * Getter for BillingGroupId.
     * An optional string with the billing group ID to tag your usage with. Is used for billing
     * purposes. Requires special activation to use. See &lt;a href="#tag/Billing-Groups"&gt;Billing Group
     * API&lt;/a&gt; for more information.
     * @return Returns the String
     */
    @JsonGetter("billing_group_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getBillingGroupId() {
        return billingGroupId;
    }

    /**
     * Setter for BillingGroupId.
     * An optional string with the billing group ID to tag your usage with. Is used for billing
     * purposes. Requires special activation to use. See &lt;a href="#tag/Billing-Groups"&gt;Billing Group
     * API&lt;/a&gt; for more information.
     * @param billingGroupId Value for String
     */
    @JsonSetter("billing_group_id")
    public void setBillingGroupId(String billingGroupId) {
        this.billingGroupId = billingGroupId;
    }

    /**
     * Converts this LinkSingle into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "LinkSingle [" + "redirectLink=" + redirectLink + ", domain=" + domain + ", slug="
                + slug + ", metadataTag=" + metadataTag + ", billingGroupId=" + billingGroupId
                + "]";
    }

    /**
     * Builds a new {@link LinkSingle.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link LinkSingle.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(redirectLink)
                .domain(getDomain())
                .slug(getSlug())
                .metadataTag(getMetadataTag())
                .billingGroupId(getBillingGroupId());
        return builder;
    }

    /**
     * Class to build instances of {@link LinkSingle}.
     */
    public static class Builder {
        private String redirectLink;
        private String domain;
        private String slug;
        private Map<String, String> metadataTag;
        private String billingGroupId;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  redirectLink  String value for redirectLink.
         */
        public Builder(String redirectLink) {
            this.redirectLink = redirectLink;
        }

        /**
         * Setter for redirectLink.
         * @param  redirectLink  String value for redirectLink.
         * @return Builder
         */
        public Builder redirectLink(String redirectLink) {
            this.redirectLink = redirectLink;
            return this;
        }

        /**
         * Setter for domain.
         * @param  domain  String value for domain.
         * @return Builder
         */
        public Builder domain(String domain) {
            this.domain = domain;
            return this;
        }

        /**
         * Setter for slug.
         * @param  slug  String value for slug.
         * @return Builder
         */
        public Builder slug(String slug) {
            this.slug = slug;
            return this;
        }

        /**
         * Setter for metadataTag.
         * @param  metadataTag  Map of String, value for metadataTag.
         * @return Builder
         */
        public Builder metadataTag(Map<String, String> metadataTag) {
            this.metadataTag = metadataTag;
            return this;
        }

        /**
         * Setter for billingGroupId.
         * @param  billingGroupId  String value for billingGroupId.
         * @return Builder
         */
        public Builder billingGroupId(String billingGroupId) {
            this.billingGroupId = billingGroupId;
            return this;
        }

        /**
         * Builds a new {@link LinkSingle} object using the set fields.
         * @return {@link LinkSingle}
         */
        public LinkSingle build() {
            return new LinkSingle(redirectLink, domain, slug, metadataTag, billingGroupId);
        }
    }
}
