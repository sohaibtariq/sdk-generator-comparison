/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.lob.api.models;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.lob.api.models.containers.CrvBack;
import com.lob.api.models.containers.CrvFront;
import com.lob.api.models.containers.FromAttribute;
import io.apimatic.core.types.OptionalNullable;
import java.util.Map;

/**
 * This is a model class for CreativeWritable type.
 */
public class CreativeWritable {
    private String resourceType;
    private String campaignId;
    private CrvFront front;
    private CrvBack back;
    private Writable details;
    private FromAttribute from;
    private OptionalNullable<String> description;
    private Map<String, String> metadata;

    /**
     * Default constructor.
     */
    public CreativeWritable() {
        resourceType = "postcard";
    }

    /**
     * Initialization constructor.
     * @param  resourceType  String value for resourceType.
     * @param  campaignId  String value for campaignId.
     * @param  front  CrvFront value for front.
     * @param  back  CrvBack value for back.
     * @param  details  Writable value for details.
     * @param  from  FromAttribute value for from.
     * @param  description  String value for description.
     * @param  metadata  Map of String, value for metadata.
     */
    public CreativeWritable(
            String resourceType,
            String campaignId,
            CrvFront front,
            CrvBack back,
            Writable details,
            FromAttribute from,
            String description,
            Map<String, String> metadata) {
        this.resourceType = resourceType;
        this.campaignId = campaignId;
        this.front = front;
        this.back = back;
        this.details = details;
        this.from = from;
        this.description = OptionalNullable.of(description);
        this.metadata = metadata;
    }

    /**
     * Initialization constructor.
     * @param  resourceType  String value for resourceType.
     * @param  campaignId  String value for campaignId.
     * @param  front  CrvFront value for front.
     * @param  back  CrvBack value for back.
     * @param  details  Writable value for details.
     * @param  from  FromAttribute value for from.
     * @param  description  String value for description.
     * @param  metadata  Map of String, value for metadata.
     */

    protected CreativeWritable(String resourceType, String campaignId, CrvFront front, CrvBack back,
            Writable details, FromAttribute from, OptionalNullable<String> description,
            Map<String, String> metadata) {
        this.resourceType = resourceType;
        this.campaignId = campaignId;
        this.front = front;
        this.back = back;
        this.details = details;
        this.from = from;
        this.description = description;
        this.metadata = metadata;
    }

    /**
     * Initialization constructor.
     * @param  resourceType  String value for resourceType.
     * @param  campaignId  String value for campaignId.
     * @param  front  CrvFront value for front.
     * @param  back  CrvBack value for back.
     * @param  details  Writable value for details.
     */
    @JsonCreator
    protected CreativeWritable(
            @JsonProperty("resource_type") String resourceType,
            @JsonProperty("campaign_id") String campaignId,
            @JsonProperty("front") CrvFront front,
            @JsonProperty("back") CrvBack back,
            @JsonProperty("details") Writable details) {
        this(resourceType, campaignId, front, back, details, null, OptionalNullable.of(null), null);
        unsetDescription();
    }

    /**
     * Getter for ResourceType.
     * Mailpiece type for the creative
     * @return Returns the String
     */
    @JsonGetter("resource_type")
    public String getResourceType() {
        return resourceType;
    }

    /**
     * Setter for ResourceType.
     * Mailpiece type for the creative
     * @param resourceType Value for String
     */
    @JsonSetter("resource_type")
    private void setResourceType(String resourceType) {
        this.resourceType = resourceType;
    }

    /**
     * Getter for CampaignId.
     * Unique identifier prefixed with `cmp_`.
     * @return Returns the String
     */
    @JsonGetter("campaign_id")
    public String getCampaignId() {
        return campaignId;
    }

    /**
     * Setter for CampaignId.
     * Unique identifier prefixed with `cmp_`.
     * @param campaignId Value for String
     */
    @JsonSetter("campaign_id")
    public void setCampaignId(String campaignId) {
        this.campaignId = campaignId;
    }

    /**
     * Getter for Front.
     * The artwork to use as the front of your postcard. Notes: - HTML merge variables should not
     * include delimiting whitespace. - PDF, PNG, and JPGs must be sized at 4.25"x6.25",
     * 6.25"x9.25", or 6.25"x11.25" at 300 DPI, while supplied HTML template will be rendered to the
     * specified `size`. See [here](#section/HTML-Examples) for HTML examples.
     * @return Returns the CrvFront
     */
    @JsonGetter("front")
    public CrvFront getFront() {
        return front;
    }

    /**
     * Setter for Front.
     * The artwork to use as the front of your postcard. Notes: - HTML merge variables should not
     * include delimiting whitespace. - PDF, PNG, and JPGs must be sized at 4.25"x6.25",
     * 6.25"x9.25", or 6.25"x11.25" at 300 DPI, while supplied HTML template will be rendered to the
     * specified `size`. See [here](#section/HTML-Examples) for HTML examples.
     * @param front Value for CrvFront
     */
    @JsonSetter("front")
    public void setFront(CrvFront front) {
        this.front = front;
    }

    /**
     * Getter for Back.
     * The artwork to use as the back of your postcard creative. Notes: - HTML merge variables
     * should not include delimiting whitespace. - PDF, PNG, and JPGs must be sized at 4.25"x6.25",
     * 6.25"x9.25", or 6.25"x11.25" at 300 DPI, while supplied HTML template will be rendered to the
     * specified `size`. - Be sure to leave room for address and postage information by following
     * the templates provided here: - &lt;a
     * href="https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/postcards/4x6_postcard.pdf"
     * target="_blank"&gt;4x6 template&lt;/a&gt; - &lt;a
     * href="https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/postcards/6x9_postcard.pdf"
     * target="_blank"&gt;6x9 template&lt;/a&gt; - &lt;a
     * href="https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/postcards/6x11_postcard.pdf"
     * target="_blank"&gt;6x11 template&lt;/a&gt; See [here](#section/HTML-Examples) for HTML examples.
     * @return Returns the CrvBack
     */
    @JsonGetter("back")
    public CrvBack getBack() {
        return back;
    }

    /**
     * Setter for Back.
     * The artwork to use as the back of your postcard creative. Notes: - HTML merge variables
     * should not include delimiting whitespace. - PDF, PNG, and JPGs must be sized at 4.25"x6.25",
     * 6.25"x9.25", or 6.25"x11.25" at 300 DPI, while supplied HTML template will be rendered to the
     * specified `size`. - Be sure to leave room for address and postage information by following
     * the templates provided here: - &lt;a
     * href="https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/postcards/4x6_postcard.pdf"
     * target="_blank"&gt;4x6 template&lt;/a&gt; - &lt;a
     * href="https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/postcards/6x9_postcard.pdf"
     * target="_blank"&gt;6x9 template&lt;/a&gt; - &lt;a
     * href="https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/postcards/6x11_postcard.pdf"
     * target="_blank"&gt;6x11 template&lt;/a&gt; See [here](#section/HTML-Examples) for HTML examples.
     * @param back Value for CrvBack
     */
    @JsonSetter("back")
    public void setBack(CrvBack back) {
        this.back = back;
    }

    /**
     * Getter for Details.
     * Properties that the postcards in your Creative should have. Check within in order to add a QR
     * code to your creative.
     * @return Returns the Writable
     */
    @JsonGetter("details")
    public Writable getDetails() {
        return details;
    }

    /**
     * Setter for Details.
     * Properties that the postcards in your Creative should have. Check within in order to add a QR
     * code to your creative.
     * @param details Value for Writable
     */
    @JsonSetter("details")
    public void setDetails(Writable details) {
        this.details = details;
    }

    /**
     * Getter for From.
     * Must either be an address ID or an inline object with correct address parameters. All
     * addresses will be standardized into uppercase without being modified by verification.
     * @return Returns the FromAttribute
     */
    @JsonGetter("from")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public FromAttribute getFrom() {
        return from;
    }

    /**
     * Setter for From.
     * Must either be an address ID or an inline object with correct address parameters. All
     * addresses will be standardized into uppercase without being modified by verification.
     * @param from Value for FromAttribute
     */
    @JsonSetter("from")
    public void setFrom(FromAttribute from) {
        this.from = from;
    }

    /**
     * Internal Getter for Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     * @return Returns the Internal String
     */
    @JsonGetter("description")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetDescription() {
        return this.description;
    }

    /**
     * Getter for Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     * @return Returns the String
     */
    public String getDescription() {
        return OptionalNullable.getFrom(description);
    }

    /**
     * Setter for Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     * @param description Value for String
     */
    @JsonSetter("description")
    public void setDescription(String description) {
        this.description = OptionalNullable.of(description);
    }

    /**
     * UnSetter for Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     */
    public void unsetDescription() {
        description = null;
    }

    /**
     * Getter for Metadata.
     * Use metadata to store custom information for tagging and labeling back to your internal
     * systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters
     * and values must be at most 500 characters. Neither can contain the characters `"` and `\`.
     * i.e. '{"customer_id" : "NEWYORK2015"}' Nested objects are not supported. See
     * [Metadata](#section/Metadata) for more information.
     * @return Returns the Map of String, String
     */
    @JsonGetter("metadata")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Map<String, String> getMetadata() {
        return metadata;
    }

    /**
     * Setter for Metadata.
     * Use metadata to store custom information for tagging and labeling back to your internal
     * systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters
     * and values must be at most 500 characters. Neither can contain the characters `"` and `\`.
     * i.e. '{"customer_id" : "NEWYORK2015"}' Nested objects are not supported. See
     * [Metadata](#section/Metadata) for more information.
     * @param metadata Value for Map of String, String
     */
    @JsonSetter("metadata")
    public void setMetadata(Map<String, String> metadata) {
        this.metadata = metadata;
    }

    /**
     * Converts this CreativeWritable into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "CreativeWritable [" + "resourceType=" + resourceType + ", campaignId=" + campaignId
                + ", front=" + front + ", back=" + back + ", details=" + details + ", from=" + from
                + ", description=" + description + ", metadata=" + metadata + "]";
    }

    /**
     * Builds a new {@link CreativeWritable.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link CreativeWritable.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(resourceType, campaignId, front, back, details)
                .from(getFrom())
                .metadata(getMetadata());
        builder.description = internalGetDescription();
        return builder;
    }

    /**
     * Class to build instances of {@link CreativeWritable}.
     */
    public static class Builder {
        private String resourceType = "postcard";
        private String campaignId;
        private CrvFront front;
        private CrvBack back;
        private Writable details;
        private FromAttribute from;
        private OptionalNullable<String> description;
        private Map<String, String> metadata;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  resourceType  String value for resourceType.
         * @param  campaignId  String value for campaignId.
         * @param  front  CrvFront value for front.
         * @param  back  CrvBack value for back.
         * @param  details  Writable value for details.
         */
        public Builder(String resourceType, String campaignId, CrvFront front, CrvBack back,
                Writable details) {
            this.resourceType = resourceType;
            this.campaignId = campaignId;
            this.front = front;
            this.back = back;
            this.details = details;
        }

        /**
         * Setter for resourceType.
         * @param  resourceType  String value for resourceType.
         * @return Builder
         */
        public Builder resourceType(String resourceType) {
            this.resourceType = resourceType;
            return this;
        }

        /**
         * Setter for campaignId.
         * @param  campaignId  String value for campaignId.
         * @return Builder
         */
        public Builder campaignId(String campaignId) {
            this.campaignId = campaignId;
            return this;
        }

        /**
         * Setter for front.
         * @param  front  CrvFront value for front.
         * @return Builder
         */
        public Builder front(CrvFront front) {
            this.front = front;
            return this;
        }

        /**
         * Setter for back.
         * @param  back  CrvBack value for back.
         * @return Builder
         */
        public Builder back(CrvBack back) {
            this.back = back;
            return this;
        }

        /**
         * Setter for details.
         * @param  details  Writable value for details.
         * @return Builder
         */
        public Builder details(Writable details) {
            this.details = details;
            return this;
        }

        /**
         * Setter for from.
         * @param  from  FromAttribute value for from.
         * @return Builder
         */
        public Builder from(FromAttribute from) {
            this.from = from;
            return this;
        }

        /**
         * Setter for description.
         * @param  description  String value for description.
         * @return Builder
         */
        public Builder description(String description) {
            this.description = OptionalNullable.of(description);
            return this;
        }

        /**
         * UnSetter for description.
         * @return Builder
         */
        public Builder unsetDescription() {
            description = null;
            return this;
        }

        /**
         * Setter for metadata.
         * @param  metadata  Map of String, value for metadata.
         * @return Builder
         */
        public Builder metadata(Map<String, String> metadata) {
            this.metadata = metadata;
            return this;
        }

        /**
         * Builds a new {@link CreativeWritable} object using the set fields.
         * @return {@link CreativeWritable}
         */
        public CreativeWritable build() {
            return new CreativeWritable(resourceType, campaignId, front, back, details, from,
                    description, metadata);
        }
    }
}
