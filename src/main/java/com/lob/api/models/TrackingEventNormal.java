/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.lob.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.lob.api.DateTimeHelper;
import io.apimatic.core.types.OptionalNullable;
import java.time.LocalDateTime;

/**
 * This is a model class for TrackingEventNormal type.
 */
public class TrackingEventNormal {
    private String id;
    private LocalDateTime time;
    private LocalDateTime dateCreated;
    private LocalDateTime dateModified;
    private Object3Enum object;
    private String type;
    private NameEnum name;
    private OptionalNullable<Object> details;
    private OptionalNullable<String> location;

    /**
     * Default constructor.
     */
    public TrackingEventNormal() {
        type = "normal";
    }

    /**
     * Initialization constructor.
     * @param  id  String value for id.
     * @param  dateCreated  LocalDateTime value for dateCreated.
     * @param  dateModified  LocalDateTime value for dateModified.
     * @param  object  Object3Enum value for object.
     * @param  type  String value for type.
     * @param  name  NameEnum value for name.
     * @param  time  LocalDateTime value for time.
     * @param  details  Object value for details.
     * @param  location  String value for location.
     */
    public TrackingEventNormal(
            String id,
            LocalDateTime dateCreated,
            LocalDateTime dateModified,
            Object3Enum object,
            String type,
            NameEnum name,
            LocalDateTime time,
            Object details,
            String location) {
        this.id = id;
        this.time = time;
        this.dateCreated = dateCreated;
        this.dateModified = dateModified;
        this.object = object;
        this.type = type;
        this.name = name;
        this.details = OptionalNullable.of(details);
        this.location = OptionalNullable.of(location);
    }

    /**
     * Initialization constructor.
     * @param  id  String value for id.
     * @param  dateCreated  LocalDateTime value for dateCreated.
     * @param  dateModified  LocalDateTime value for dateModified.
     * @param  object  Object3Enum value for object.
     * @param  type  String value for type.
     * @param  name  NameEnum value for name.
     * @param  time  LocalDateTime value for time.
     * @param  details  Object value for details.
     * @param  location  String value for location.
     */

    protected TrackingEventNormal(String id, LocalDateTime dateCreated, LocalDateTime dateModified,
            Object3Enum object, String type, NameEnum name, LocalDateTime time,
            OptionalNullable<Object> details, OptionalNullable<String> location) {
        this.id = id;
        this.time = time;
        this.dateCreated = dateCreated;
        this.dateModified = dateModified;
        this.object = object;
        this.type = type;
        this.name = name;
        this.details = details;
        this.location = location;
    }

    /**
     * Getter for Id.
     * Unique identifier prefixed with `evnt_`.
     * @return Returns the String
     */
    @JsonGetter("id")
    public String getId() {
        return id;
    }

    /**
     * Setter for Id.
     * Unique identifier prefixed with `evnt_`.
     * @param id Value for String
     */
    @JsonSetter("id")
    public void setId(String id) {
        this.id = id;
    }

    /**
     * Getter for Time.
     * A timestamp in ISO 8601 format of the date USPS registered the event.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("time")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getTime() {
        return time;
    }

    /**
     * Setter for Time.
     * A timestamp in ISO 8601 format of the date USPS registered the event.
     * @param time Value for LocalDateTime
     */
    @JsonSetter("time")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setTime(LocalDateTime time) {
        this.time = time;
    }

    /**
     * Getter for DateCreated.
     * A timestamp in ISO 8601 format of the date the resource was created.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("date_created")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getDateCreated() {
        return dateCreated;
    }

    /**
     * Setter for DateCreated.
     * A timestamp in ISO 8601 format of the date the resource was created.
     * @param dateCreated Value for LocalDateTime
     */
    @JsonSetter("date_created")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setDateCreated(LocalDateTime dateCreated) {
        this.dateCreated = dateCreated;
    }

    /**
     * Getter for DateModified.
     * A timestamp in ISO 8601 format of the date the resource was last modified.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("date_modified")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getDateModified() {
        return dateModified;
    }

    /**
     * Setter for DateModified.
     * A timestamp in ISO 8601 format of the date the resource was last modified.
     * @param dateModified Value for LocalDateTime
     */
    @JsonSetter("date_modified")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setDateModified(LocalDateTime dateModified) {
        this.dateModified = dateModified;
    }

    /**
     * Getter for Object.
     * @return Returns the Object3Enum
     */
    @JsonGetter("object")
    public Object3Enum getObject() {
        return object;
    }

    /**
     * Setter for Object.
     * @param object Value for Object3Enum
     */
    @JsonSetter("object")
    public void setObject(Object3Enum object) {
        this.object = object;
    }

    /**
     * Getter for Type.
     * non-Certified postcards, self mailers, letters, and checks
     * @return Returns the String
     */
    @JsonGetter("type")
    public String getType() {
        return type;
    }

    /**
     * Setter for Type.
     * non-Certified postcards, self mailers, letters, and checks
     * @param type Value for String
     */
    @JsonSetter("type")
    private void setType(String type) {
        this.type = type;
    }

    /**
     * Getter for Name.
     * Name of tracking event (for normal postcards, self mailers, letters, and checks): * `Mailed`
     * - The mailpiece has been handed off to and accepted by USPS and is en route. &lt;a
     * href="https://help.lob.com/print-and-mail/getting-data-and-results/tracking-your-mail#mailed-tracking-events-4"
     * target="_blank"&gt;More about Mailed.&lt;/a&gt; Note this data is only available in Enterprise
     * editions of Lob. &lt;a href="https://lob.com/support/contact#contact" target="_blank"&gt;Contact
     * Sales&lt;/a&gt; if you want access to this feature. * `In Transit` - The mailpiece is being
     * processed at the entry/origin facility. * `In Local Area` - The mailpiece is being processed
     * at the destination facility. * `Processed for Delivery` - The mailpiece has been greenlit for
     * delivery at the recipient's nearest postal facility. The mailpiece should reach the mailbox
     * within 1 business day of this tracking event. * `Delivered` - The mail piece has been
     * delivered to the recipient’s address. The final scan is generated when the mail carrier's GPS
     * unit leaves the delivery area. * `Re-Routed` - The mailpiece is re-routed due to recipient
     * change of address, address errors, or USPS relabeling of barcode/ID tag area. * `Returned to
     * Sender` - The mailpiece is being returned to sender due to barcode, ID tag area, or address
     * errors. * `International Exit` - The mail piece has been processed to ship to a destination
     * abroad. This is typically the last scan a US-originated international mail piece will receive
     * from the USPS. &lt;a
     * href="https://help.lob.com/print-and-mail/getting-data-and-results/tracking-your-mail#mailed-tracking-events-4"
     * target="_blank"&gt;More about tracking&lt;/a&gt;
     * @return Returns the NameEnum
     */
    @JsonGetter("name")
    public NameEnum getName() {
        return name;
    }

    /**
     * Setter for Name.
     * Name of tracking event (for normal postcards, self mailers, letters, and checks): * `Mailed`
     * - The mailpiece has been handed off to and accepted by USPS and is en route. &lt;a
     * href="https://help.lob.com/print-and-mail/getting-data-and-results/tracking-your-mail#mailed-tracking-events-4"
     * target="_blank"&gt;More about Mailed.&lt;/a&gt; Note this data is only available in Enterprise
     * editions of Lob. &lt;a href="https://lob.com/support/contact#contact" target="_blank"&gt;Contact
     * Sales&lt;/a&gt; if you want access to this feature. * `In Transit` - The mailpiece is being
     * processed at the entry/origin facility. * `In Local Area` - The mailpiece is being processed
     * at the destination facility. * `Processed for Delivery` - The mailpiece has been greenlit for
     * delivery at the recipient's nearest postal facility. The mailpiece should reach the mailbox
     * within 1 business day of this tracking event. * `Delivered` - The mail piece has been
     * delivered to the recipient’s address. The final scan is generated when the mail carrier's GPS
     * unit leaves the delivery area. * `Re-Routed` - The mailpiece is re-routed due to recipient
     * change of address, address errors, or USPS relabeling of barcode/ID tag area. * `Returned to
     * Sender` - The mailpiece is being returned to sender due to barcode, ID tag area, or address
     * errors. * `International Exit` - The mail piece has been processed to ship to a destination
     * abroad. This is typically the last scan a US-originated international mail piece will receive
     * from the USPS. &lt;a
     * href="https://help.lob.com/print-and-mail/getting-data-and-results/tracking-your-mail#mailed-tracking-events-4"
     * target="_blank"&gt;More about tracking&lt;/a&gt;
     * @param name Value for NameEnum
     */
    @JsonSetter("name")
    public void setName(NameEnum name) {
        this.name = name;
    }

    /**
     * Internal Getter for Details.
     * Will be `null` for `type=normal` events
     * @return Returns the Internal Object
     */
    @JsonGetter("details")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Object> internalGetDetails() {
        return this.details;
    }

    /**
     * Getter for Details.
     * Will be `null` for `type=normal` events
     * @return Returns the Object
     */
    public Object getDetails() {
        return OptionalNullable.getFrom(details);
    }

    /**
     * Setter for Details.
     * Will be `null` for `type=normal` events
     * @param details Value for Object
     */
    @JsonSetter("details")
    public void setDetails(Object details) {
        this.details = OptionalNullable.of(details);
    }

    /**
     * UnSetter for Details.
     * Will be `null` for `type=normal` events
     */
    public void unsetDetails() {
        details = null;
    }

    /**
     * Internal Getter for Location.
     * The zip code in which the scan event occurred. Null for `Mailed` events.
     * @return Returns the Internal String
     */
    @JsonGetter("location")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetLocation() {
        return this.location;
    }

    /**
     * Getter for Location.
     * The zip code in which the scan event occurred. Null for `Mailed` events.
     * @return Returns the String
     */
    public String getLocation() {
        return OptionalNullable.getFrom(location);
    }

    /**
     * Setter for Location.
     * The zip code in which the scan event occurred. Null for `Mailed` events.
     * @param location Value for String
     */
    @JsonSetter("location")
    public void setLocation(String location) {
        this.location = OptionalNullable.of(location);
    }

    /**
     * UnSetter for Location.
     * The zip code in which the scan event occurred. Null for `Mailed` events.
     */
    public void unsetLocation() {
        location = null;
    }

    /**
     * Converts this TrackingEventNormal into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "TrackingEventNormal [" + "id=" + id + ", dateCreated=" + dateCreated
                + ", dateModified=" + dateModified + ", object=" + object + ", type=" + type
                + ", name=" + name + ", time=" + time + ", details=" + details + ", location="
                + location + "]";
    }

    /**
     * Builds a new {@link TrackingEventNormal.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link TrackingEventNormal.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(id, dateCreated, dateModified, object, type, name)
                .time(getTime());
        builder.details = internalGetDetails();
        builder.location = internalGetLocation();
        return builder;
    }

    /**
     * Class to build instances of {@link TrackingEventNormal}.
     */
    public static class Builder {
        private String id;
        private LocalDateTime dateCreated;
        private LocalDateTime dateModified;
        private Object3Enum object;
        private String type = "normal";
        private NameEnum name;
        private LocalDateTime time;
        private OptionalNullable<Object> details;
        private OptionalNullable<String> location;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  id  String value for id.
         * @param  dateCreated  LocalDateTime value for dateCreated.
         * @param  dateModified  LocalDateTime value for dateModified.
         * @param  object  Object3Enum value for object.
         * @param  type  String value for type.
         * @param  name  NameEnum value for name.
         */
        public Builder(String id, LocalDateTime dateCreated, LocalDateTime dateModified,
                Object3Enum object, String type, NameEnum name) {
            this.id = id;
            this.dateCreated = dateCreated;
            this.dateModified = dateModified;
            this.object = object;
            this.type = type;
            this.name = name;
        }

        /**
         * Setter for id.
         * @param  id  String value for id.
         * @return Builder
         */
        public Builder id(String id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for dateCreated.
         * @param  dateCreated  LocalDateTime value for dateCreated.
         * @return Builder
         */
        public Builder dateCreated(LocalDateTime dateCreated) {
            this.dateCreated = dateCreated;
            return this;
        }

        /**
         * Setter for dateModified.
         * @param  dateModified  LocalDateTime value for dateModified.
         * @return Builder
         */
        public Builder dateModified(LocalDateTime dateModified) {
            this.dateModified = dateModified;
            return this;
        }

        /**
         * Setter for object.
         * @param  object  Object3Enum value for object.
         * @return Builder
         */
        public Builder object(Object3Enum object) {
            this.object = object;
            return this;
        }

        /**
         * Setter for type.
         * @param  type  String value for type.
         * @return Builder
         */
        public Builder type(String type) {
            this.type = type;
            return this;
        }

        /**
         * Setter for name.
         * @param  name  NameEnum value for name.
         * @return Builder
         */
        public Builder name(NameEnum name) {
            this.name = name;
            return this;
        }

        /**
         * Setter for time.
         * @param  time  LocalDateTime value for time.
         * @return Builder
         */
        public Builder time(LocalDateTime time) {
            this.time = time;
            return this;
        }

        /**
         * Setter for details.
         * @param  details  Object value for details.
         * @return Builder
         */
        public Builder details(Object details) {
            this.details = OptionalNullable.of(details);
            return this;
        }

        /**
         * UnSetter for details.
         * @return Builder
         */
        public Builder unsetDetails() {
            details = null;
            return this;
        }

        /**
         * Setter for location.
         * @param  location  String value for location.
         * @return Builder
         */
        public Builder location(String location) {
            this.location = OptionalNullable.of(location);
            return this;
        }

        /**
         * UnSetter for location.
         * @return Builder
         */
        public Builder unsetLocation() {
            location = null;
            return this;
        }

        /**
         * Builds a new {@link TrackingEventNormal} object using the set fields.
         * @return {@link TrackingEventNormal}
         */
        public TrackingEventNormal build() {
            return new TrackingEventNormal(id, dateCreated, dateModified, object, type, name, time,
                    details, location);
        }
    }
}
