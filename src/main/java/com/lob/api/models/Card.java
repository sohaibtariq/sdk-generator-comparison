/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.lob.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.lob.api.DateTimeHelper;
import java.time.LocalDateTime;
import java.util.List;

/**
 * This is a model class for Card type.
 */
public class Card {
    private LocalDateTime dateCreated;
    private LocalDateTime dateModified;
    private Boolean deleted;
    private String object;
    private String description;
    private Size1Enum size;
    private String id;
    private String url;
    private boolean autoReorder;
    private Integer reorderQuantity;
    private String rawUrl;
    private String frontOriginalUrl;
    private String backOriginalUrl;
    private List<Thumbnail> thumbnails;
    private int availableQuantity;
    private int pendingQuantity;
    private TheStatusOfTheCardEnum status;
    private OrientationEnum orientation;
    private int thresholdAmount;

    /**
     * Default constructor.
     */
    public Card() {
        object = "card";
        autoReorder = false;
        availableQuantity = 0;
        pendingQuantity = 0;
        orientation = OrientationEnum.HORIZONTAL;
        thresholdAmount = 0;
        size = Size1Enum.ENUM_2125X3375;
    }

    /**
     * Initialization constructor.
     * @param  dateCreated  LocalDateTime value for dateCreated.
     * @param  dateModified  LocalDateTime value for dateModified.
     * @param  object  String value for object.
     * @param  description  String value for description.
     * @param  id  String value for id.
     * @param  url  String value for url.
     * @param  autoReorder  boolean value for autoReorder.
     * @param  reorderQuantity  Integer value for reorderQuantity.
     * @param  rawUrl  String value for rawUrl.
     * @param  frontOriginalUrl  String value for frontOriginalUrl.
     * @param  backOriginalUrl  String value for backOriginalUrl.
     * @param  thumbnails  List of Thumbnail value for thumbnails.
     * @param  availableQuantity  int value for availableQuantity.
     * @param  pendingQuantity  int value for pendingQuantity.
     * @param  status  TheStatusOfTheCardEnum value for status.
     * @param  orientation  OrientationEnum value for orientation.
     * @param  thresholdAmount  int value for thresholdAmount.
     * @param  deleted  Boolean value for deleted.
     * @param  size  Size1Enum value for size.
     */
    public Card(
            LocalDateTime dateCreated,
            LocalDateTime dateModified,
            String object,
            String description,
            String id,
            String url,
            boolean autoReorder,
            Integer reorderQuantity,
            String rawUrl,
            String frontOriginalUrl,
            String backOriginalUrl,
            List<Thumbnail> thumbnails,
            int availableQuantity,
            int pendingQuantity,
            TheStatusOfTheCardEnum status,
            OrientationEnum orientation,
            int thresholdAmount,
            Boolean deleted,
            Size1Enum size) {
        this.dateCreated = dateCreated;
        this.dateModified = dateModified;
        this.deleted = deleted;
        this.object = object;
        this.description = description;
        this.size = size;
        this.id = id;
        this.url = url;
        this.autoReorder = autoReorder;
        this.reorderQuantity = reorderQuantity;
        this.rawUrl = rawUrl;
        this.frontOriginalUrl = frontOriginalUrl;
        this.backOriginalUrl = backOriginalUrl;
        this.thumbnails = thumbnails;
        this.availableQuantity = availableQuantity;
        this.pendingQuantity = pendingQuantity;
        this.status = status;
        this.orientation = orientation;
        this.thresholdAmount = thresholdAmount;
    }

    /**
     * Getter for DateCreated.
     * A timestamp in ISO 8601 format of the date the resource was created.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("date_created")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getDateCreated() {
        return dateCreated;
    }

    /**
     * Setter for DateCreated.
     * A timestamp in ISO 8601 format of the date the resource was created.
     * @param dateCreated Value for LocalDateTime
     */
    @JsonSetter("date_created")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setDateCreated(LocalDateTime dateCreated) {
        this.dateCreated = dateCreated;
    }

    /**
     * Getter for DateModified.
     * A timestamp in ISO 8601 format of the date the resource was last modified.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("date_modified")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getDateModified() {
        return dateModified;
    }

    /**
     * Setter for DateModified.
     * A timestamp in ISO 8601 format of the date the resource was last modified.
     * @param dateModified Value for LocalDateTime
     */
    @JsonSetter("date_modified")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setDateModified(LocalDateTime dateModified) {
        this.dateModified = dateModified;
    }

    /**
     * Getter for Deleted.
     * Only returned if the resource has been successfully deleted.
     * @return Returns the Boolean
     */
    @JsonGetter("deleted")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getDeleted() {
        return deleted;
    }

    /**
     * Setter for Deleted.
     * Only returned if the resource has been successfully deleted.
     * @param deleted Value for Boolean
     */
    @JsonSetter("deleted")
    public void setDeleted(Boolean deleted) {
        this.deleted = deleted;
    }

    /**
     * Getter for Object.
     * Value is resource type.
     * @return Returns the String
     */
    @JsonGetter("object")
    public String getObject() {
        return object;
    }

    /**
     * Setter for Object.
     * Value is resource type.
     * @param object Value for String
     */
    @JsonSetter("object")
    private void setObject(String object) {
        this.object = object;
    }

    /**
     * Getter for Description.
     * Description of the card.
     * @return Returns the String
     */
    @JsonGetter("description")
    public String getDescription() {
        return description;
    }

    /**
     * Setter for Description.
     * Description of the card.
     * @param description Value for String
     */
    @JsonSetter("description")
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Getter for Size.
     * The size of the card
     * @return Returns the Size1Enum
     */
    @JsonGetter("size")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Size1Enum getSize() {
        return size;
    }

    /**
     * Setter for Size.
     * The size of the card
     * @param size Value for Size1Enum
     */
    @JsonSetter("size")
    public void setSize(Size1Enum size) {
        this.size = size;
    }

    /**
     * Getter for Id.
     * Unique identifier prefixed with `card_`.
     * @return Returns the String
     */
    @JsonGetter("id")
    public String getId() {
        return id;
    }

    /**
     * Setter for Id.
     * Unique identifier prefixed with `card_`.
     * @param id Value for String
     */
    @JsonSetter("id")
    public void setId(String id) {
        this.id = id;
    }

    /**
     * Getter for Url.
     * The signed link for the card.
     * @return Returns the String
     */
    @JsonGetter("url")
    public String getUrl() {
        return url;
    }

    /**
     * Setter for Url.
     * The signed link for the card.
     * @param url Value for String
     */
    @JsonSetter("url")
    public void setUrl(String url) {
        this.url = url;
    }

    /**
     * Getter for AutoReorder.
     * True if the cards should be auto-reordered.
     * @return Returns the boolean
     */
    @JsonGetter("auto_reorder")
    public boolean getAutoReorder() {
        return autoReorder;
    }

    /**
     * Setter for AutoReorder.
     * True if the cards should be auto-reordered.
     * @param autoReorder Value for boolean
     */
    @JsonSetter("auto_reorder")
    public void setAutoReorder(boolean autoReorder) {
        this.autoReorder = autoReorder;
    }

    /**
     * Getter for ReorderQuantity.
     * The number of cards to be reordered.
     * @return Returns the Integer
     */
    @JsonGetter("reorder_quantity")
    public Integer getReorderQuantity() {
        return reorderQuantity;
    }

    /**
     * Setter for ReorderQuantity.
     * The number of cards to be reordered.
     * @param reorderQuantity Value for Integer
     */
    @JsonSetter("reorder_quantity")
    public void setReorderQuantity(Integer reorderQuantity) {
        this.reorderQuantity = reorderQuantity;
    }

    /**
     * Getter for RawUrl.
     * The raw URL of the card.
     * @return Returns the String
     */
    @JsonGetter("raw_url")
    public String getRawUrl() {
        return rawUrl;
    }

    /**
     * Setter for RawUrl.
     * The raw URL of the card.
     * @param rawUrl Value for String
     */
    @JsonSetter("raw_url")
    public void setRawUrl(String rawUrl) {
        this.rawUrl = rawUrl;
    }

    /**
     * Getter for FrontOriginalUrl.
     * The original URL of the front template.
     * @return Returns the String
     */
    @JsonGetter("front_original_url")
    public String getFrontOriginalUrl() {
        return frontOriginalUrl;
    }

    /**
     * Setter for FrontOriginalUrl.
     * The original URL of the front template.
     * @param frontOriginalUrl Value for String
     */
    @JsonSetter("front_original_url")
    public void setFrontOriginalUrl(String frontOriginalUrl) {
        this.frontOriginalUrl = frontOriginalUrl;
    }

    /**
     * Getter for BackOriginalUrl.
     * The original URL of the back template.
     * @return Returns the String
     */
    @JsonGetter("back_original_url")
    public String getBackOriginalUrl() {
        return backOriginalUrl;
    }

    /**
     * Setter for BackOriginalUrl.
     * The original URL of the back template.
     * @param backOriginalUrl Value for String
     */
    @JsonSetter("back_original_url")
    public void setBackOriginalUrl(String backOriginalUrl) {
        this.backOriginalUrl = backOriginalUrl;
    }

    /**
     * Getter for Thumbnails.
     * @return Returns the List of Thumbnail
     */
    @JsonGetter("thumbnails")
    public List<Thumbnail> getThumbnails() {
        return thumbnails;
    }

    /**
     * Setter for Thumbnails.
     * @param thumbnails Value for List of Thumbnail
     */
    @JsonSetter("thumbnails")
    public void setThumbnails(List<Thumbnail> thumbnails) {
        this.thumbnails = thumbnails;
    }

    /**
     * Getter for AvailableQuantity.
     * The available quantity of cards.
     * @return Returns the int
     */
    @JsonGetter("available_quantity")
    public int getAvailableQuantity() {
        return availableQuantity;
    }

    /**
     * Setter for AvailableQuantity.
     * The available quantity of cards.
     * @param availableQuantity Value for int
     */
    @JsonSetter("available_quantity")
    public void setAvailableQuantity(int availableQuantity) {
        this.availableQuantity = availableQuantity;
    }

    /**
     * Getter for PendingQuantity.
     * The pending quantity of cards.
     * @return Returns the int
     */
    @JsonGetter("pending_quantity")
    public int getPendingQuantity() {
        return pendingQuantity;
    }

    /**
     * Setter for PendingQuantity.
     * The pending quantity of cards.
     * @param pendingQuantity Value for int
     */
    @JsonSetter("pending_quantity")
    public void setPendingQuantity(int pendingQuantity) {
        this.pendingQuantity = pendingQuantity;
    }

    /**
     * Getter for Status.
     * @return Returns the TheStatusOfTheCardEnum
     */
    @JsonGetter("status")
    public TheStatusOfTheCardEnum getStatus() {
        return status;
    }

    /**
     * Setter for Status.
     * @param status Value for TheStatusOfTheCardEnum
     */
    @JsonSetter("status")
    public void setStatus(TheStatusOfTheCardEnum status) {
        this.status = status;
    }

    /**
     * Getter for Orientation.
     * The orientation of the card.
     * @return Returns the OrientationEnum
     */
    @JsonGetter("orientation")
    public OrientationEnum getOrientation() {
        return orientation;
    }

    /**
     * Setter for Orientation.
     * The orientation of the card.
     * @param orientation Value for OrientationEnum
     */
    @JsonSetter("orientation")
    public void setOrientation(OrientationEnum orientation) {
        this.orientation = orientation;
    }

    /**
     * Getter for ThresholdAmount.
     * The threshold amount of the card
     * @return Returns the int
     */
    @JsonGetter("threshold_amount")
    public int getThresholdAmount() {
        return thresholdAmount;
    }

    /**
     * Setter for ThresholdAmount.
     * The threshold amount of the card
     * @param thresholdAmount Value for int
     */
    @JsonSetter("threshold_amount")
    public void setThresholdAmount(int thresholdAmount) {
        this.thresholdAmount = thresholdAmount;
    }

    /**
     * Converts this Card into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Card [" + "dateCreated=" + dateCreated + ", dateModified=" + dateModified
                + ", object=" + object + ", description=" + description + ", id=" + id + ", url="
                + url + ", autoReorder=" + autoReorder + ", reorderQuantity=" + reorderQuantity
                + ", rawUrl=" + rawUrl + ", frontOriginalUrl=" + frontOriginalUrl
                + ", backOriginalUrl=" + backOriginalUrl + ", thumbnails=" + thumbnails
                + ", availableQuantity=" + availableQuantity + ", pendingQuantity="
                + pendingQuantity + ", status=" + status + ", orientation=" + orientation
                + ", thresholdAmount=" + thresholdAmount + ", deleted=" + deleted + ", size=" + size
                + "]";
    }

    /**
     * Builds a new {@link Card.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Card.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(dateCreated, dateModified, object, description, id, url,
                autoReorder, reorderQuantity, rawUrl, frontOriginalUrl, backOriginalUrl, thumbnails,
                availableQuantity, pendingQuantity, status, orientation, thresholdAmount)
                .deleted(getDeleted())
                .size(getSize());
        return builder;
    }

    /**
     * Class to build instances of {@link Card}.
     */
    public static class Builder {
        private LocalDateTime dateCreated;
        private LocalDateTime dateModified;
        private String object = "card";
        private String description;
        private String id;
        private String url;
        private boolean autoReorder = false;
        private Integer reorderQuantity;
        private String rawUrl;
        private String frontOriginalUrl;
        private String backOriginalUrl;
        private List<Thumbnail> thumbnails;
        private int availableQuantity = 0;
        private int pendingQuantity = 0;
        private TheStatusOfTheCardEnum status;
        private OrientationEnum orientation = OrientationEnum.HORIZONTAL;
        private int thresholdAmount = 0;
        private Boolean deleted;
        private Size1Enum size = Size1Enum.ENUM_2125X3375;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  dateCreated  LocalDateTime value for dateCreated.
         * @param  dateModified  LocalDateTime value for dateModified.
         * @param  object  String value for object.
         * @param  description  String value for description.
         * @param  id  String value for id.
         * @param  url  String value for url.
         * @param  autoReorder  boolean value for autoReorder.
         * @param  reorderQuantity  Integer value for reorderQuantity.
         * @param  rawUrl  String value for rawUrl.
         * @param  frontOriginalUrl  String value for frontOriginalUrl.
         * @param  backOriginalUrl  String value for backOriginalUrl.
         * @param  thumbnails  List of Thumbnail value for thumbnails.
         * @param  availableQuantity  int value for availableQuantity.
         * @param  pendingQuantity  int value for pendingQuantity.
         * @param  status  TheStatusOfTheCardEnum value for status.
         * @param  orientation  OrientationEnum value for orientation.
         * @param  thresholdAmount  int value for thresholdAmount.
         */
        public Builder(LocalDateTime dateCreated, LocalDateTime dateModified, String object,
                String description, String id, String url, boolean autoReorder,
                Integer reorderQuantity, String rawUrl, String frontOriginalUrl,
                String backOriginalUrl, List<Thumbnail> thumbnails, int availableQuantity,
                int pendingQuantity, TheStatusOfTheCardEnum status, OrientationEnum orientation,
                int thresholdAmount) {
            this.dateCreated = dateCreated;
            this.dateModified = dateModified;
            this.object = object;
            this.description = description;
            this.id = id;
            this.url = url;
            this.autoReorder = autoReorder;
            this.reorderQuantity = reorderQuantity;
            this.rawUrl = rawUrl;
            this.frontOriginalUrl = frontOriginalUrl;
            this.backOriginalUrl = backOriginalUrl;
            this.thumbnails = thumbnails;
            this.availableQuantity = availableQuantity;
            this.pendingQuantity = pendingQuantity;
            this.status = status;
            this.orientation = orientation;
            this.thresholdAmount = thresholdAmount;
        }

        /**
         * Setter for dateCreated.
         * @param  dateCreated  LocalDateTime value for dateCreated.
         * @return Builder
         */
        public Builder dateCreated(LocalDateTime dateCreated) {
            this.dateCreated = dateCreated;
            return this;
        }

        /**
         * Setter for dateModified.
         * @param  dateModified  LocalDateTime value for dateModified.
         * @return Builder
         */
        public Builder dateModified(LocalDateTime dateModified) {
            this.dateModified = dateModified;
            return this;
        }

        /**
         * Setter for object.
         * @param  object  String value for object.
         * @return Builder
         */
        public Builder object(String object) {
            this.object = object;
            return this;
        }

        /**
         * Setter for description.
         * @param  description  String value for description.
         * @return Builder
         */
        public Builder description(String description) {
            this.description = description;
            return this;
        }

        /**
         * Setter for id.
         * @param  id  String value for id.
         * @return Builder
         */
        public Builder id(String id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for url.
         * @param  url  String value for url.
         * @return Builder
         */
        public Builder url(String url) {
            this.url = url;
            return this;
        }

        /**
         * Setter for autoReorder.
         * @param  autoReorder  boolean value for autoReorder.
         * @return Builder
         */
        public Builder autoReorder(boolean autoReorder) {
            this.autoReorder = autoReorder;
            return this;
        }

        /**
         * Setter for reorderQuantity.
         * @param  reorderQuantity  Integer value for reorderQuantity.
         * @return Builder
         */
        public Builder reorderQuantity(Integer reorderQuantity) {
            this.reorderQuantity = reorderQuantity;
            return this;
        }

        /**
         * Setter for rawUrl.
         * @param  rawUrl  String value for rawUrl.
         * @return Builder
         */
        public Builder rawUrl(String rawUrl) {
            this.rawUrl = rawUrl;
            return this;
        }

        /**
         * Setter for frontOriginalUrl.
         * @param  frontOriginalUrl  String value for frontOriginalUrl.
         * @return Builder
         */
        public Builder frontOriginalUrl(String frontOriginalUrl) {
            this.frontOriginalUrl = frontOriginalUrl;
            return this;
        }

        /**
         * Setter for backOriginalUrl.
         * @param  backOriginalUrl  String value for backOriginalUrl.
         * @return Builder
         */
        public Builder backOriginalUrl(String backOriginalUrl) {
            this.backOriginalUrl = backOriginalUrl;
            return this;
        }

        /**
         * Setter for thumbnails.
         * @param  thumbnails  List of Thumbnail value for thumbnails.
         * @return Builder
         */
        public Builder thumbnails(List<Thumbnail> thumbnails) {
            this.thumbnails = thumbnails;
            return this;
        }

        /**
         * Setter for availableQuantity.
         * @param  availableQuantity  int value for availableQuantity.
         * @return Builder
         */
        public Builder availableQuantity(int availableQuantity) {
            this.availableQuantity = availableQuantity;
            return this;
        }

        /**
         * Setter for pendingQuantity.
         * @param  pendingQuantity  int value for pendingQuantity.
         * @return Builder
         */
        public Builder pendingQuantity(int pendingQuantity) {
            this.pendingQuantity = pendingQuantity;
            return this;
        }

        /**
         * Setter for status.
         * @param  status  TheStatusOfTheCardEnum value for status.
         * @return Builder
         */
        public Builder status(TheStatusOfTheCardEnum status) {
            this.status = status;
            return this;
        }

        /**
         * Setter for orientation.
         * @param  orientation  OrientationEnum value for orientation.
         * @return Builder
         */
        public Builder orientation(OrientationEnum orientation) {
            this.orientation = orientation;
            return this;
        }

        /**
         * Setter for thresholdAmount.
         * @param  thresholdAmount  int value for thresholdAmount.
         * @return Builder
         */
        public Builder thresholdAmount(int thresholdAmount) {
            this.thresholdAmount = thresholdAmount;
            return this;
        }

        /**
         * Setter for deleted.
         * @param  deleted  Boolean value for deleted.
         * @return Builder
         */
        public Builder deleted(Boolean deleted) {
            this.deleted = deleted;
            return this;
        }

        /**
         * Setter for size.
         * @param  size  Size1Enum value for size.
         * @return Builder
         */
        public Builder size(Size1Enum size) {
            this.size = size;
            return this;
        }

        /**
         * Builds a new {@link Card} object using the set fields.
         * @return {@link Card}
         */
        public Card build() {
            return new Card(dateCreated, dateModified, object, description, id, url, autoReorder,
                    reorderQuantity, rawUrl, frontOriginalUrl, backOriginalUrl, thumbnails,
                    availableQuantity, pendingQuantity, status, orientation, thresholdAmount,
                    deleted, size);
        }
    }
}
