/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.lob.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.lob.api.DateTimeHelper;
import com.lob.api.models.containers.Address;
import com.lob.api.models.containers.SendDate;
import io.apimatic.core.types.OptionalNullable;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;

/**
 * This is a model class for Postcard type.
 */
public class Postcard {
    private OptionalNullable<String> description;
    private Map<String, String> metadata;
    private MailTypeEnum mailType;
    private OptionalNullable<Object> mergeVariables;
    private SendDate sendDate;
    private PostcardSizeEnum size;
    private Address to;
    private String carrier;
    private List<Thumbnail> thumbnails;
    private LocalDate expectedDeliveryDate;
    private LocalDateTime dateCreated;
    private LocalDateTime dateModified;
    private Boolean deleted;
    private AddressUs from;
    private String id;
    private String frontTemplateId;
    private String backTemplateId;
    private OptionalNullable<String> frontTemplateVersionId;
    private OptionalNullable<String> backTemplateVersionId;
    private OptionalNullable<List<TrackingEventNormal>> trackingEvents;
    private String url;
    private OptionalNullable<String> campaignId;
    private OptionalNullable<PscUseTypeEnum> useType;
    private Boolean fsc;
    private TheStatusOfThePostcardEnum status;
    private OptionalNullable<String> failureReason;
    private Object10Enum object;

    /**
     * Default constructor.
     */
    public Postcard() {
        carrier = "USPS";
        mailType = MailTypeEnum.USPS_FIRST_CLASS;
        size = PostcardSizeEnum.ENUM_4X6;
        fsc = false;
        object = Object10Enum.POSTCARD;
    }

    /**
     * Initialization constructor.
     * @param  to  Address value for to.
     * @param  carrier  String value for carrier.
     * @param  id  String value for id.
     * @param  frontTemplateId  String value for frontTemplateId.
     * @param  backTemplateId  String value for backTemplateId.
     * @param  url  String value for url.
     * @param  description  String value for description.
     * @param  metadata  Map of String, value for metadata.
     * @param  mailType  MailTypeEnum value for mailType.
     * @param  mergeVariables  Object value for mergeVariables.
     * @param  sendDate  SendDate value for sendDate.
     * @param  size  PostcardSizeEnum value for size.
     * @param  thumbnails  List of Thumbnail value for thumbnails.
     * @param  expectedDeliveryDate  LocalDate value for expectedDeliveryDate.
     * @param  dateCreated  LocalDateTime value for dateCreated.
     * @param  dateModified  LocalDateTime value for dateModified.
     * @param  deleted  Boolean value for deleted.
     * @param  from  AddressUs value for from.
     * @param  frontTemplateVersionId  String value for frontTemplateVersionId.
     * @param  backTemplateVersionId  String value for backTemplateVersionId.
     * @param  trackingEvents  List of TrackingEventNormal value for trackingEvents.
     * @param  campaignId  String value for campaignId.
     * @param  useType  PscUseTypeEnum value for useType.
     * @param  fsc  Boolean value for fsc.
     * @param  status  TheStatusOfThePostcardEnum value for status.
     * @param  failureReason  String value for failureReason.
     * @param  object  Object10Enum value for object.
     */
    public Postcard(
            Address to,
            String carrier,
            String id,
            String frontTemplateId,
            String backTemplateId,
            String url,
            String description,
            Map<String, String> metadata,
            MailTypeEnum mailType,
            Object mergeVariables,
            SendDate sendDate,
            PostcardSizeEnum size,
            List<Thumbnail> thumbnails,
            LocalDate expectedDeliveryDate,
            LocalDateTime dateCreated,
            LocalDateTime dateModified,
            Boolean deleted,
            AddressUs from,
            String frontTemplateVersionId,
            String backTemplateVersionId,
            List<TrackingEventNormal> trackingEvents,
            String campaignId,
            PscUseTypeEnum useType,
            Boolean fsc,
            TheStatusOfThePostcardEnum status,
            String failureReason,
            Object10Enum object) {
        this.description = OptionalNullable.of(description);
        this.metadata = metadata;
        this.mailType = mailType;
        this.mergeVariables = OptionalNullable.of(mergeVariables);
        this.sendDate = sendDate;
        this.size = size;
        this.to = to;
        this.carrier = carrier;
        this.thumbnails = thumbnails;
        this.expectedDeliveryDate = expectedDeliveryDate;
        this.dateCreated = dateCreated;
        this.dateModified = dateModified;
        this.deleted = deleted;
        this.from = from;
        this.id = id;
        this.frontTemplateId = frontTemplateId;
        this.backTemplateId = backTemplateId;
        this.frontTemplateVersionId = OptionalNullable.of(frontTemplateVersionId);
        this.backTemplateVersionId = OptionalNullable.of(backTemplateVersionId);
        this.trackingEvents = OptionalNullable.of(trackingEvents);
        this.url = url;
        this.campaignId = OptionalNullable.of(campaignId);
        this.useType = OptionalNullable.of(useType);
        this.fsc = fsc;
        this.status = status;
        this.failureReason = OptionalNullable.of(failureReason);
        this.object = object;
    }

    /**
     * Initialization constructor.
     * @param  to  Address value for to.
     * @param  carrier  String value for carrier.
     * @param  id  String value for id.
     * @param  frontTemplateId  String value for frontTemplateId.
     * @param  backTemplateId  String value for backTemplateId.
     * @param  url  String value for url.
     * @param  description  String value for description.
     * @param  metadata  Map of String, value for metadata.
     * @param  mailType  MailTypeEnum value for mailType.
     * @param  mergeVariables  Object value for mergeVariables.
     * @param  sendDate  SendDate value for sendDate.
     * @param  size  PostcardSizeEnum value for size.
     * @param  thumbnails  List of Thumbnail value for thumbnails.
     * @param  expectedDeliveryDate  LocalDate value for expectedDeliveryDate.
     * @param  dateCreated  LocalDateTime value for dateCreated.
     * @param  dateModified  LocalDateTime value for dateModified.
     * @param  deleted  Boolean value for deleted.
     * @param  from  AddressUs value for from.
     * @param  frontTemplateVersionId  String value for frontTemplateVersionId.
     * @param  backTemplateVersionId  String value for backTemplateVersionId.
     * @param  trackingEvents  List of TrackingEventNormal value for trackingEvents.
     * @param  campaignId  String value for campaignId.
     * @param  useType  PscUseTypeEnum value for useType.
     * @param  fsc  Boolean value for fsc.
     * @param  status  TheStatusOfThePostcardEnum value for status.
     * @param  failureReason  String value for failureReason.
     * @param  object  Object10Enum value for object.
     */

    protected Postcard(Address to, String carrier, String id, String frontTemplateId,
            String backTemplateId, String url, OptionalNullable<String> description,
            Map<String, String> metadata, MailTypeEnum mailType,
            OptionalNullable<Object> mergeVariables, SendDate sendDate, PostcardSizeEnum size,
            List<Thumbnail> thumbnails, LocalDate expectedDeliveryDate, LocalDateTime dateCreated,
            LocalDateTime dateModified, Boolean deleted, AddressUs from,
            OptionalNullable<String> frontTemplateVersionId,
            OptionalNullable<String> backTemplateVersionId,
            OptionalNullable<List<TrackingEventNormal>> trackingEvents,
            OptionalNullable<String> campaignId, OptionalNullable<PscUseTypeEnum> useType,
            Boolean fsc, TheStatusOfThePostcardEnum status, OptionalNullable<String> failureReason,
            Object10Enum object) {
        this.description = description;
        this.metadata = metadata;
        this.mailType = mailType;
        this.mergeVariables = mergeVariables;
        this.sendDate = sendDate;
        this.size = size;
        this.to = to;
        this.carrier = carrier;
        this.thumbnails = thumbnails;
        this.expectedDeliveryDate = expectedDeliveryDate;
        this.dateCreated = dateCreated;
        this.dateModified = dateModified;
        this.deleted = deleted;
        this.from = from;
        this.id = id;
        this.frontTemplateId = frontTemplateId;
        this.backTemplateId = backTemplateId;
        this.frontTemplateVersionId = frontTemplateVersionId;
        this.backTemplateVersionId = backTemplateVersionId;
        this.trackingEvents = trackingEvents;
        this.url = url;
        this.campaignId = campaignId;
        this.useType = useType;
        this.fsc = fsc;
        this.status = status;
        this.failureReason = failureReason;
        this.object = object;
    }

    /**
     * Internal Getter for Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     * @return Returns the Internal String
     */
    @JsonGetter("description")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetDescription() {
        return this.description;
    }

    /**
     * Getter for Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     * @return Returns the String
     */
    public String getDescription() {
        return OptionalNullable.getFrom(description);
    }

    /**
     * Setter for Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     * @param description Value for String
     */
    @JsonSetter("description")
    public void setDescription(String description) {
        this.description = OptionalNullable.of(description);
    }

    /**
     * UnSetter for Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     */
    public void unsetDescription() {
        description = null;
    }

    /**
     * Getter for Metadata.
     * Use metadata to store custom information for tagging and labeling back to your internal
     * systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters
     * and values must be at most 500 characters. Neither can contain the characters `"` and `\`.
     * i.e. '{"customer_id" : "NEWYORK2015"}' Nested objects are not supported. See
     * [Metadata](#section/Metadata) for more information.
     * @return Returns the Map of String, String
     */
    @JsonGetter("metadata")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Map<String, String> getMetadata() {
        return metadata;
    }

    /**
     * Setter for Metadata.
     * Use metadata to store custom information for tagging and labeling back to your internal
     * systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters
     * and values must be at most 500 characters. Neither can contain the characters `"` and `\`.
     * i.e. '{"customer_id" : "NEWYORK2015"}' Nested objects are not supported. See
     * [Metadata](#section/Metadata) for more information.
     * @param metadata Value for Map of String, String
     */
    @JsonSetter("metadata")
    public void setMetadata(Map<String, String> metadata) {
        this.metadata = metadata;
    }

    /**
     * Getter for MailType.
     * A string designating the mail postage type: * `usps_first_class` - (default) *
     * `usps_standard` - a &lt;a href="https://lob.com/pricing/print-mail#compare"
     * target="_blank"&gt;cheaper option&lt;/a&gt; which is less predictable and takes longer to deliver.
     * `usps_standard` cannot be used with `4x6` postcards or for any postcards sent outside of the
     * United States.
     * @return Returns the MailTypeEnum
     */
    @JsonGetter("mail_type")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public MailTypeEnum getMailType() {
        return mailType;
    }

    /**
     * Setter for MailType.
     * A string designating the mail postage type: * `usps_first_class` - (default) *
     * `usps_standard` - a &lt;a href="https://lob.com/pricing/print-mail#compare"
     * target="_blank"&gt;cheaper option&lt;/a&gt; which is less predictable and takes longer to deliver.
     * `usps_standard` cannot be used with `4x6` postcards or for any postcards sent outside of the
     * United States.
     * @param mailType Value for MailTypeEnum
     */
    @JsonSetter("mail_type")
    public void setMailType(MailTypeEnum mailType) {
        this.mailType = mailType;
    }

    /**
     * Internal Getter for MergeVariables.
     * You can input a merge variable payload object to your template to render dynamic content. For
     * example, if you have a template like: `{{variable_name}}`, pass in `{"variable_name":
     * "Harry"}` to render `Harry`. `merge_variables` must be an object. Any type of value is
     * accepted as long as the object is valid JSON; you can use `strings`, `numbers`, `booleans`,
     * `arrays`, `objects`, or `null`. The max length of the object is 25,000 characters. If you
     * call `JSON.stringify` on your object, it can be no longer than 25,000 characters. Your
     * variable names cannot contain any whitespace or any of the following special characters: `!`,
     * `"`, `#`, `%`, `&amp;`, `'`, `(`, `)`, `*`, `+`, `,`, `/`, `;`, `&lt;`, `=`, `&gt;`, `{@literal @}`, `[`, `\`,
     * `]`, `^`, `` ` ``, `{`, `|`, `}`, `~`. More instructions can be found in &lt;a
     * href="https://help.lob.com/print-and-mail/designing-mail-creatives/dynamic-personalization#using-html-and-merge-variables-10"
     * target="_blank"&gt;our guide to using html and merge variables&lt;/a&gt;. Depending on your &lt;a
     * href="https://dashboard.lob.com/#/settings/account" target="_blank"&gt;Merge Variable
     * strictness&lt;/a&gt; setting, if you define variables in your HTML but do not pass them here, you
     * will either receive an error or the variable will render as an empty string.
     * @return Returns the Internal Object
     */
    @JsonGetter("merge_variables")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Object> internalGetMergeVariables() {
        return this.mergeVariables;
    }

    /**
     * Getter for MergeVariables.
     * You can input a merge variable payload object to your template to render dynamic content. For
     * example, if you have a template like: `{{variable_name}}`, pass in `{"variable_name":
     * "Harry"}` to render `Harry`. `merge_variables` must be an object. Any type of value is
     * accepted as long as the object is valid JSON; you can use `strings`, `numbers`, `booleans`,
     * `arrays`, `objects`, or `null`. The max length of the object is 25,000 characters. If you
     * call `JSON.stringify` on your object, it can be no longer than 25,000 characters. Your
     * variable names cannot contain any whitespace or any of the following special characters: `!`,
     * `"`, `#`, `%`, `&amp;`, `'`, `(`, `)`, `*`, `+`, `,`, `/`, `;`, `&lt;`, `=`, `&gt;`, `{@literal @}`, `[`, `\`,
     * `]`, `^`, `` ` ``, `{`, `|`, `}`, `~`. More instructions can be found in &lt;a
     * href="https://help.lob.com/print-and-mail/designing-mail-creatives/dynamic-personalization#using-html-and-merge-variables-10"
     * target="_blank"&gt;our guide to using html and merge variables&lt;/a&gt;. Depending on your &lt;a
     * href="https://dashboard.lob.com/#/settings/account" target="_blank"&gt;Merge Variable
     * strictness&lt;/a&gt; setting, if you define variables in your HTML but do not pass them here, you
     * will either receive an error or the variable will render as an empty string.
     * @return Returns the Object
     */
    public Object getMergeVariables() {
        return OptionalNullable.getFrom(mergeVariables);
    }

    /**
     * Setter for MergeVariables.
     * You can input a merge variable payload object to your template to render dynamic content. For
     * example, if you have a template like: `{{variable_name}}`, pass in `{"variable_name":
     * "Harry"}` to render `Harry`. `merge_variables` must be an object. Any type of value is
     * accepted as long as the object is valid JSON; you can use `strings`, `numbers`, `booleans`,
     * `arrays`, `objects`, or `null`. The max length of the object is 25,000 characters. If you
     * call `JSON.stringify` on your object, it can be no longer than 25,000 characters. Your
     * variable names cannot contain any whitespace or any of the following special characters: `!`,
     * `"`, `#`, `%`, `&amp;`, `'`, `(`, `)`, `*`, `+`, `,`, `/`, `;`, `&lt;`, `=`, `&gt;`, `{@literal @}`, `[`, `\`,
     * `]`, `^`, `` ` ``, `{`, `|`, `}`, `~`. More instructions can be found in &lt;a
     * href="https://help.lob.com/print-and-mail/designing-mail-creatives/dynamic-personalization#using-html-and-merge-variables-10"
     * target="_blank"&gt;our guide to using html and merge variables&lt;/a&gt;. Depending on your &lt;a
     * href="https://dashboard.lob.com/#/settings/account" target="_blank"&gt;Merge Variable
     * strictness&lt;/a&gt; setting, if you define variables in your HTML but do not pass them here, you
     * will either receive an error or the variable will render as an empty string.
     * @param mergeVariables Value for Object
     */
    @JsonSetter("merge_variables")
    public void setMergeVariables(Object mergeVariables) {
        this.mergeVariables = OptionalNullable.of(mergeVariables);
    }

    /**
     * UnSetter for MergeVariables.
     * You can input a merge variable payload object to your template to render dynamic content. For
     * example, if you have a template like: `{{variable_name}}`, pass in `{"variable_name":
     * "Harry"}` to render `Harry`. `merge_variables` must be an object. Any type of value is
     * accepted as long as the object is valid JSON; you can use `strings`, `numbers`, `booleans`,
     * `arrays`, `objects`, or `null`. The max length of the object is 25,000 characters. If you
     * call `JSON.stringify` on your object, it can be no longer than 25,000 characters. Your
     * variable names cannot contain any whitespace or any of the following special characters: `!`,
     * `"`, `#`, `%`, `&amp;`, `'`, `(`, `)`, `*`, `+`, `,`, `/`, `;`, `&lt;`, `=`, `&gt;`, `{@literal @}`, `[`, `\`,
     * `]`, `^`, `` ` ``, `{`, `|`, `}`, `~`. More instructions can be found in &lt;a
     * href="https://help.lob.com/print-and-mail/designing-mail-creatives/dynamic-personalization#using-html-and-merge-variables-10"
     * target="_blank"&gt;our guide to using html and merge variables&lt;/a&gt;. Depending on your &lt;a
     * href="https://dashboard.lob.com/#/settings/account" target="_blank"&gt;Merge Variable
     * strictness&lt;/a&gt; setting, if you define variables in your HTML but do not pass them here, you
     * will either receive an error or the variable will render as an empty string.
     */
    public void unsetMergeVariables() {
        mergeVariables = null;
    }

    /**
     * Getter for SendDate.
     * A timestamp in ISO 8601 format which specifies a date after the current time and up to 180
     * days in the future to send the letter off for production. Setting a send date overrides the
     * default [cancellation window](#section/Cancellation-Windows) applied to the mailpiece. Until
     * the `send_date` has passed, the mailpiece can be canceled. If a date in the format
     * `2017-11-01` is passed, it will evaluate to midnight UTC of that date
     * (`2017-11-01T00:00:00.000Z`). If a datetime is passed, that exact time will be used. A
     * `send_date` passed with no time zone will default to UTC, while a `send_date` passed with a
     * time zone will be converted to UTC.
     * @return Returns the SendDate
     */
    @JsonGetter("send_date")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public SendDate getSendDate() {
        return sendDate;
    }

    /**
     * Setter for SendDate.
     * A timestamp in ISO 8601 format which specifies a date after the current time and up to 180
     * days in the future to send the letter off for production. Setting a send date overrides the
     * default [cancellation window](#section/Cancellation-Windows) applied to the mailpiece. Until
     * the `send_date` has passed, the mailpiece can be canceled. If a date in the format
     * `2017-11-01` is passed, it will evaluate to midnight UTC of that date
     * (`2017-11-01T00:00:00.000Z`). If a datetime is passed, that exact time will be used. A
     * `send_date` passed with no time zone will default to UTC, while a `send_date` passed with a
     * time zone will be converted to UTC.
     * @param sendDate Value for SendDate
     */
    @JsonSetter("send_date")
    public void setSendDate(SendDate sendDate) {
        this.sendDate = sendDate;
    }

    /**
     * Getter for Size.
     * Specifies the size of the postcard. Only `4x6` postcards can be sent to international
     * destinations.
     * @return Returns the PostcardSizeEnum
     */
    @JsonGetter("size")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public PostcardSizeEnum getSize() {
        return size;
    }

    /**
     * Setter for Size.
     * Specifies the size of the postcard. Only `4x6` postcards can be sent to international
     * destinations.
     * @param size Value for PostcardSizeEnum
     */
    @JsonSetter("size")
    public void setSize(PostcardSizeEnum size) {
        this.size = size;
    }

    /**
     * Getter for To.
     * @return Returns the Address
     */
    @JsonGetter("to")
    public Address getTo() {
        return to;
    }

    /**
     * Setter for To.
     * @param to Value for Address
     */
    @JsonSetter("to")
    public void setTo(Address to) {
        this.to = to;
    }

    /**
     * Getter for Carrier.
     * @return Returns the String
     */
    @JsonGetter("carrier")
    public String getCarrier() {
        return carrier;
    }

    /**
     * Setter for Carrier.
     * @param carrier Value for String
     */
    @JsonSetter("carrier")
    private void setCarrier(String carrier) {
        this.carrier = carrier;
    }

    /**
     * Getter for Thumbnails.
     * @return Returns the List of Thumbnail
     */
    @JsonGetter("thumbnails")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<Thumbnail> getThumbnails() {
        return thumbnails;
    }

    /**
     * Setter for Thumbnails.
     * @param thumbnails Value for List of Thumbnail
     */
    @JsonSetter("thumbnails")
    public void setThumbnails(List<Thumbnail> thumbnails) {
        this.thumbnails = thumbnails;
    }

    /**
     * Getter for ExpectedDeliveryDate.
     * A date in YYYY-MM-DD format of the mailpiece's expected delivery date based on its
     * `send_date`.
     * @return Returns the LocalDate
     */
    @JsonGetter("expected_delivery_date")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = DateTimeHelper.SimpleDateSerializer.class)
    public LocalDate getExpectedDeliveryDate() {
        return expectedDeliveryDate;
    }

    /**
     * Setter for ExpectedDeliveryDate.
     * A date in YYYY-MM-DD format of the mailpiece's expected delivery date based on its
     * `send_date`.
     * @param expectedDeliveryDate Value for LocalDate
     */
    @JsonSetter("expected_delivery_date")
    @JsonDeserialize(using = DateTimeHelper.SimpleDateDeserializer.class)
    public void setExpectedDeliveryDate(LocalDate expectedDeliveryDate) {
        this.expectedDeliveryDate = expectedDeliveryDate;
    }

    /**
     * Getter for DateCreated.
     * A timestamp in ISO 8601 format of the date the resource was created.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("date_created")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getDateCreated() {
        return dateCreated;
    }

    /**
     * Setter for DateCreated.
     * A timestamp in ISO 8601 format of the date the resource was created.
     * @param dateCreated Value for LocalDateTime
     */
    @JsonSetter("date_created")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setDateCreated(LocalDateTime dateCreated) {
        this.dateCreated = dateCreated;
    }

    /**
     * Getter for DateModified.
     * A timestamp in ISO 8601 format of the date the resource was last modified.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("date_modified")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getDateModified() {
        return dateModified;
    }

    /**
     * Setter for DateModified.
     * A timestamp in ISO 8601 format of the date the resource was last modified.
     * @param dateModified Value for LocalDateTime
     */
    @JsonSetter("date_modified")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setDateModified(LocalDateTime dateModified) {
        this.dateModified = dateModified;
    }

    /**
     * Getter for Deleted.
     * Only returned if the resource has been successfully deleted.
     * @return Returns the Boolean
     */
    @JsonGetter("deleted")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getDeleted() {
        return deleted;
    }

    /**
     * Setter for Deleted.
     * Only returned if the resource has been successfully deleted.
     * @param deleted Value for Boolean
     */
    @JsonSetter("deleted")
    public void setDeleted(Boolean deleted) {
        this.deleted = deleted;
    }

    /**
     * Getter for From.
     * @return Returns the AddressUs
     */
    @JsonGetter("from")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public AddressUs getFrom() {
        return from;
    }

    /**
     * Setter for From.
     * @param from Value for AddressUs
     */
    @JsonSetter("from")
    public void setFrom(AddressUs from) {
        this.from = from;
    }

    /**
     * Getter for Id.
     * Unique identifier prefixed with `psc_`.
     * @return Returns the String
     */
    @JsonGetter("id")
    public String getId() {
        return id;
    }

    /**
     * Setter for Id.
     * Unique identifier prefixed with `psc_`.
     * @param id Value for String
     */
    @JsonSetter("id")
    public void setId(String id) {
        this.id = id;
    }

    /**
     * Getter for FrontTemplateId.
     * The unique ID of the HTML template used for the front of the postcard. Only filled out when
     * the request contains a valid postcard template ID.
     * @return Returns the String
     */
    @JsonGetter("front_template_id")
    public String getFrontTemplateId() {
        return frontTemplateId;
    }

    /**
     * Setter for FrontTemplateId.
     * The unique ID of the HTML template used for the front of the postcard. Only filled out when
     * the request contains a valid postcard template ID.
     * @param frontTemplateId Value for String
     */
    @JsonSetter("front_template_id")
    public void setFrontTemplateId(String frontTemplateId) {
        this.frontTemplateId = frontTemplateId;
    }

    /**
     * Getter for BackTemplateId.
     * The unique ID of the HTML template used for the back of the postcard. Only filled out when
     * the request contains a valid postcard template ID.
     * @return Returns the String
     */
    @JsonGetter("back_template_id")
    public String getBackTemplateId() {
        return backTemplateId;
    }

    /**
     * Setter for BackTemplateId.
     * The unique ID of the HTML template used for the back of the postcard. Only filled out when
     * the request contains a valid postcard template ID.
     * @param backTemplateId Value for String
     */
    @JsonSetter("back_template_id")
    public void setBackTemplateId(String backTemplateId) {
        this.backTemplateId = backTemplateId;
    }

    /**
     * Internal Getter for FrontTemplateVersionId.
     * The unique ID of the specific version of the HTML template used for the front of the
     * postcard. Only filled out when the request contains a valid postcard template ID.
     * @return Returns the Internal String
     */
    @JsonGetter("front_template_version_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetFrontTemplateVersionId() {
        return this.frontTemplateVersionId;
    }

    /**
     * Getter for FrontTemplateVersionId.
     * The unique ID of the specific version of the HTML template used for the front of the
     * postcard. Only filled out when the request contains a valid postcard template ID.
     * @return Returns the String
     */
    public String getFrontTemplateVersionId() {
        return OptionalNullable.getFrom(frontTemplateVersionId);
    }

    /**
     * Setter for FrontTemplateVersionId.
     * The unique ID of the specific version of the HTML template used for the front of the
     * postcard. Only filled out when the request contains a valid postcard template ID.
     * @param frontTemplateVersionId Value for String
     */
    @JsonSetter("front_template_version_id")
    public void setFrontTemplateVersionId(String frontTemplateVersionId) {
        this.frontTemplateVersionId = OptionalNullable.of(frontTemplateVersionId);
    }

    /**
     * UnSetter for FrontTemplateVersionId.
     * The unique ID of the specific version of the HTML template used for the front of the
     * postcard. Only filled out when the request contains a valid postcard template ID.
     */
    public void unsetFrontTemplateVersionId() {
        frontTemplateVersionId = null;
    }

    /**
     * Internal Getter for BackTemplateVersionId.
     * The unique ID of the specific version of the HTML template used for the back of the postcard.
     * Only filled out when the request contains a valid postcard template ID.
     * @return Returns the Internal String
     */
    @JsonGetter("back_template_version_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetBackTemplateVersionId() {
        return this.backTemplateVersionId;
    }

    /**
     * Getter for BackTemplateVersionId.
     * The unique ID of the specific version of the HTML template used for the back of the postcard.
     * Only filled out when the request contains a valid postcard template ID.
     * @return Returns the String
     */
    public String getBackTemplateVersionId() {
        return OptionalNullable.getFrom(backTemplateVersionId);
    }

    /**
     * Setter for BackTemplateVersionId.
     * The unique ID of the specific version of the HTML template used for the back of the postcard.
     * Only filled out when the request contains a valid postcard template ID.
     * @param backTemplateVersionId Value for String
     */
    @JsonSetter("back_template_version_id")
    public void setBackTemplateVersionId(String backTemplateVersionId) {
        this.backTemplateVersionId = OptionalNullable.of(backTemplateVersionId);
    }

    /**
     * UnSetter for BackTemplateVersionId.
     * The unique ID of the specific version of the HTML template used for the back of the postcard.
     * Only filled out when the request contains a valid postcard template ID.
     */
    public void unsetBackTemplateVersionId() {
        backTemplateVersionId = null;
    }

    /**
     * Internal Getter for TrackingEvents.
     * An array of tracking_event objects ordered by ascending `time`. Will not be populated for
     * postcards created in test mode.
     * @return Returns the Internal List of TrackingEventNormal
     */
    @JsonGetter("tracking_events")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<List<TrackingEventNormal>> internalGetTrackingEvents() {
        return this.trackingEvents;
    }

    /**
     * Getter for TrackingEvents.
     * An array of tracking_event objects ordered by ascending `time`. Will not be populated for
     * postcards created in test mode.
     * @return Returns the List of TrackingEventNormal
     */
    public List<TrackingEventNormal> getTrackingEvents() {
        return OptionalNullable.getFrom(trackingEvents);
    }

    /**
     * Setter for TrackingEvents.
     * An array of tracking_event objects ordered by ascending `time`. Will not be populated for
     * postcards created in test mode.
     * @param trackingEvents Value for List of TrackingEventNormal
     */
    @JsonSetter("tracking_events")
    public void setTrackingEvents(List<TrackingEventNormal> trackingEvents) {
        this.trackingEvents = OptionalNullable.of(trackingEvents);
    }

    /**
     * UnSetter for TrackingEvents.
     * An array of tracking_event objects ordered by ascending `time`. Will not be populated for
     * postcards created in test mode.
     */
    public void unsetTrackingEvents() {
        trackingEvents = null;
    }

    /**
     * Getter for Url.
     * A [signed link](#section/Asset-URLs) served over HTTPS. The link returned will expire in 30
     * days to prevent mis-sharing. Each time a GET request is initiated, a new signed URL will be
     * generated.
     * @return Returns the String
     */
    @JsonGetter("url")
    public String getUrl() {
        return url;
    }

    /**
     * Setter for Url.
     * A [signed link](#section/Asset-URLs) served over HTTPS. The link returned will expire in 30
     * days to prevent mis-sharing. Each time a GET request is initiated, a new signed URL will be
     * generated.
     * @param url Value for String
     */
    @JsonSetter("url")
    public void setUrl(String url) {
        this.url = url;
    }

    /**
     * Internal Getter for CampaignId.
     * The unique ID of the associated campaign if the resource was generated from a campaign.
     * @return Returns the Internal String
     */
    @JsonGetter("campaign_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCampaignId() {
        return this.campaignId;
    }

    /**
     * Getter for CampaignId.
     * The unique ID of the associated campaign if the resource was generated from a campaign.
     * @return Returns the String
     */
    public String getCampaignId() {
        return OptionalNullable.getFrom(campaignId);
    }

    /**
     * Setter for CampaignId.
     * The unique ID of the associated campaign if the resource was generated from a campaign.
     * @param campaignId Value for String
     */
    @JsonSetter("campaign_id")
    public void setCampaignId(String campaignId) {
        this.campaignId = OptionalNullable.of(campaignId);
    }

    /**
     * UnSetter for CampaignId.
     * The unique ID of the associated campaign if the resource was generated from a campaign.
     */
    public void unsetCampaignId() {
        campaignId = null;
    }

    /**
     * Internal Getter for UseType.
     * The use type for each mailpiece. Can be one of marketing, operational, or null. Null use_type
     * is only allowed if an account default use_type is selected in Account Settings. For more
     * information on use_type, see our [Help Center
     * article](https://help.lob.com/print-and-mail/building-a-mail-strategy/managing-mail-settings/declaring-mail-use-type).
     * @return Returns the Internal PscUseTypeEnum
     */
    @JsonGetter("use_type")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<PscUseTypeEnum> internalGetUseType() {
        return this.useType;
    }

    /**
     * Getter for UseType.
     * The use type for each mailpiece. Can be one of marketing, operational, or null. Null use_type
     * is only allowed if an account default use_type is selected in Account Settings. For more
     * information on use_type, see our [Help Center
     * article](https://help.lob.com/print-and-mail/building-a-mail-strategy/managing-mail-settings/declaring-mail-use-type).
     * @return Returns the PscUseTypeEnum
     */
    public PscUseTypeEnum getUseType() {
        return OptionalNullable.getFrom(useType);
    }

    /**
     * Setter for UseType.
     * The use type for each mailpiece. Can be one of marketing, operational, or null. Null use_type
     * is only allowed if an account default use_type is selected in Account Settings. For more
     * information on use_type, see our [Help Center
     * article](https://help.lob.com/print-and-mail/building-a-mail-strategy/managing-mail-settings/declaring-mail-use-type).
     * @param useType Value for PscUseTypeEnum
     */
    @JsonSetter("use_type")
    public void setUseType(PscUseTypeEnum useType) {
        this.useType = OptionalNullable.of(useType);
    }

    /**
     * UnSetter for UseType.
     * The use type for each mailpiece. Can be one of marketing, operational, or null. Null use_type
     * is only allowed if an account default use_type is selected in Account Settings. For more
     * information on use_type, see our [Help Center
     * article](https://help.lob.com/print-and-mail/building-a-mail-strategy/managing-mail-settings/declaring-mail-use-type).
     */
    public void unsetUseType() {
        useType = null;
    }

    /**
     * Getter for Fsc.
     * This is in beta. Contact support{@literal @}lob.com or your account contact to learn more. Not available
     * for `4x6` or `A5` postcard sizes.
     * @return Returns the Boolean
     */
    @JsonGetter("fsc")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getFsc() {
        return fsc;
    }

    /**
     * Setter for Fsc.
     * This is in beta. Contact support{@literal @}lob.com or your account contact to learn more. Not available
     * for `4x6` or `A5` postcard sizes.
     * @param fsc Value for Boolean
     */
    @JsonSetter("fsc")
    public void setFsc(Boolean fsc) {
        this.fsc = fsc;
    }

    /**
     * Getter for Status.
     * @return Returns the TheStatusOfThePostcardEnum
     */
    @JsonGetter("status")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public TheStatusOfThePostcardEnum getStatus() {
        return status;
    }

    /**
     * Setter for Status.
     * @param status Value for TheStatusOfThePostcardEnum
     */
    @JsonSetter("status")
    public void setStatus(TheStatusOfThePostcardEnum status) {
        this.status = status;
    }

    /**
     * Internal Getter for FailureReason.
     * A string describing the reason for failure if the postcard failed to render.
     * @return Returns the Internal String
     */
    @JsonGetter("failure_reason")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetFailureReason() {
        return this.failureReason;
    }

    /**
     * Getter for FailureReason.
     * A string describing the reason for failure if the postcard failed to render.
     * @return Returns the String
     */
    public String getFailureReason() {
        return OptionalNullable.getFrom(failureReason);
    }

    /**
     * Setter for FailureReason.
     * A string describing the reason for failure if the postcard failed to render.
     * @param failureReason Value for String
     */
    @JsonSetter("failure_reason")
    public void setFailureReason(String failureReason) {
        this.failureReason = OptionalNullable.of(failureReason);
    }

    /**
     * UnSetter for FailureReason.
     * A string describing the reason for failure if the postcard failed to render.
     */
    public void unsetFailureReason() {
        failureReason = null;
    }

    /**
     * Getter for Object.
     * Value is resource type.
     * @return Returns the Object10Enum
     */
    @JsonGetter("object")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Object10Enum getObject() {
        return object;
    }

    /**
     * Setter for Object.
     * Value is resource type.
     * @param object Value for Object10Enum
     */
    @JsonSetter("object")
    public void setObject(Object10Enum object) {
        this.object = object;
    }

    /**
     * Converts this Postcard into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Postcard [" + "to=" + to + ", carrier=" + carrier + ", id=" + id
                + ", frontTemplateId=" + frontTemplateId + ", backTemplateId=" + backTemplateId
                + ", url=" + url + ", description=" + description + ", metadata=" + metadata
                + ", mailType=" + mailType + ", mergeVariables=" + mergeVariables + ", sendDate="
                + sendDate + ", size=" + size + ", thumbnails=" + thumbnails
                + ", expectedDeliveryDate=" + expectedDeliveryDate + ", dateCreated=" + dateCreated
                + ", dateModified=" + dateModified + ", deleted=" + deleted + ", from=" + from
                + ", frontTemplateVersionId=" + frontTemplateVersionId + ", backTemplateVersionId="
                + backTemplateVersionId + ", trackingEvents=" + trackingEvents + ", campaignId="
                + campaignId + ", useType=" + useType + ", fsc=" + fsc + ", status=" + status
                + ", failureReason=" + failureReason + ", object=" + object + "]";
    }

    /**
     * Builds a new {@link Postcard.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Postcard.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(to, carrier, id, frontTemplateId, backTemplateId, url)
                .metadata(getMetadata())
                .mailType(getMailType())
                .sendDate(getSendDate())
                .size(getSize())
                .thumbnails(getThumbnails())
                .expectedDeliveryDate(getExpectedDeliveryDate())
                .dateCreated(getDateCreated())
                .dateModified(getDateModified())
                .deleted(getDeleted())
                .from(getFrom())
                .fsc(getFsc())
                .status(getStatus())
                .object(getObject());
        builder.description = internalGetDescription();
        builder.mergeVariables = internalGetMergeVariables();
        builder.frontTemplateVersionId = internalGetFrontTemplateVersionId();
        builder.backTemplateVersionId = internalGetBackTemplateVersionId();
        builder.trackingEvents = internalGetTrackingEvents();
        builder.campaignId = internalGetCampaignId();
        builder.useType = internalGetUseType();
        builder.failureReason = internalGetFailureReason();
        return builder;
    }

    /**
     * Class to build instances of {@link Postcard}.
     */
    public static class Builder {
        private Address to;
        private String carrier = "USPS";
        private String id;
        private String frontTemplateId;
        private String backTemplateId;
        private String url;
        private OptionalNullable<String> description;
        private Map<String, String> metadata;
        private MailTypeEnum mailType = MailTypeEnum.USPS_FIRST_CLASS;
        private OptionalNullable<Object> mergeVariables;
        private SendDate sendDate;
        private PostcardSizeEnum size = PostcardSizeEnum.ENUM_4X6;
        private List<Thumbnail> thumbnails;
        private LocalDate expectedDeliveryDate;
        private LocalDateTime dateCreated;
        private LocalDateTime dateModified;
        private Boolean deleted;
        private AddressUs from;
        private OptionalNullable<String> frontTemplateVersionId;
        private OptionalNullable<String> backTemplateVersionId;
        private OptionalNullable<List<TrackingEventNormal>> trackingEvents;
        private OptionalNullable<String> campaignId;
        private OptionalNullable<PscUseTypeEnum> useType;
        private Boolean fsc = false;
        private TheStatusOfThePostcardEnum status;
        private OptionalNullable<String> failureReason;
        private Object10Enum object = Object10Enum.POSTCARD;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  to  Address value for to.
         * @param  carrier  String value for carrier.
         * @param  id  String value for id.
         * @param  frontTemplateId  String value for frontTemplateId.
         * @param  backTemplateId  String value for backTemplateId.
         * @param  url  String value for url.
         */
        public Builder(Address to, String carrier, String id, String frontTemplateId,
                String backTemplateId, String url) {
            this.to = to;
            this.carrier = carrier;
            this.id = id;
            this.frontTemplateId = frontTemplateId;
            this.backTemplateId = backTemplateId;
            this.url = url;
        }

        /**
         * Setter for to.
         * @param  to  Address value for to.
         * @return Builder
         */
        public Builder to(Address to) {
            this.to = to;
            return this;
        }

        /**
         * Setter for carrier.
         * @param  carrier  String value for carrier.
         * @return Builder
         */
        public Builder carrier(String carrier) {
            this.carrier = carrier;
            return this;
        }

        /**
         * Setter for id.
         * @param  id  String value for id.
         * @return Builder
         */
        public Builder id(String id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for frontTemplateId.
         * @param  frontTemplateId  String value for frontTemplateId.
         * @return Builder
         */
        public Builder frontTemplateId(String frontTemplateId) {
            this.frontTemplateId = frontTemplateId;
            return this;
        }

        /**
         * Setter for backTemplateId.
         * @param  backTemplateId  String value for backTemplateId.
         * @return Builder
         */
        public Builder backTemplateId(String backTemplateId) {
            this.backTemplateId = backTemplateId;
            return this;
        }

        /**
         * Setter for url.
         * @param  url  String value for url.
         * @return Builder
         */
        public Builder url(String url) {
            this.url = url;
            return this;
        }

        /**
         * Setter for description.
         * @param  description  String value for description.
         * @return Builder
         */
        public Builder description(String description) {
            this.description = OptionalNullable.of(description);
            return this;
        }

        /**
         * UnSetter for description.
         * @return Builder
         */
        public Builder unsetDescription() {
            description = null;
            return this;
        }

        /**
         * Setter for metadata.
         * @param  metadata  Map of String, value for metadata.
         * @return Builder
         */
        public Builder metadata(Map<String, String> metadata) {
            this.metadata = metadata;
            return this;
        }

        /**
         * Setter for mailType.
         * @param  mailType  MailTypeEnum value for mailType.
         * @return Builder
         */
        public Builder mailType(MailTypeEnum mailType) {
            this.mailType = mailType;
            return this;
        }

        /**
         * Setter for mergeVariables.
         * @param  mergeVariables  Object value for mergeVariables.
         * @return Builder
         */
        public Builder mergeVariables(Object mergeVariables) {
            this.mergeVariables = OptionalNullable.of(mergeVariables);
            return this;
        }

        /**
         * UnSetter for mergeVariables.
         * @return Builder
         */
        public Builder unsetMergeVariables() {
            mergeVariables = null;
            return this;
        }

        /**
         * Setter for sendDate.
         * @param  sendDate  SendDate value for sendDate.
         * @return Builder
         */
        public Builder sendDate(SendDate sendDate) {
            this.sendDate = sendDate;
            return this;
        }

        /**
         * Setter for size.
         * @param  size  PostcardSizeEnum value for size.
         * @return Builder
         */
        public Builder size(PostcardSizeEnum size) {
            this.size = size;
            return this;
        }

        /**
         * Setter for thumbnails.
         * @param  thumbnails  List of Thumbnail value for thumbnails.
         * @return Builder
         */
        public Builder thumbnails(List<Thumbnail> thumbnails) {
            this.thumbnails = thumbnails;
            return this;
        }

        /**
         * Setter for expectedDeliveryDate.
         * @param  expectedDeliveryDate  LocalDate value for expectedDeliveryDate.
         * @return Builder
         */
        public Builder expectedDeliveryDate(LocalDate expectedDeliveryDate) {
            this.expectedDeliveryDate = expectedDeliveryDate;
            return this;
        }

        /**
         * Setter for dateCreated.
         * @param  dateCreated  LocalDateTime value for dateCreated.
         * @return Builder
         */
        public Builder dateCreated(LocalDateTime dateCreated) {
            this.dateCreated = dateCreated;
            return this;
        }

        /**
         * Setter for dateModified.
         * @param  dateModified  LocalDateTime value for dateModified.
         * @return Builder
         */
        public Builder dateModified(LocalDateTime dateModified) {
            this.dateModified = dateModified;
            return this;
        }

        /**
         * Setter for deleted.
         * @param  deleted  Boolean value for deleted.
         * @return Builder
         */
        public Builder deleted(Boolean deleted) {
            this.deleted = deleted;
            return this;
        }

        /**
         * Setter for from.
         * @param  from  AddressUs value for from.
         * @return Builder
         */
        public Builder from(AddressUs from) {
            this.from = from;
            return this;
        }

        /**
         * Setter for frontTemplateVersionId.
         * @param  frontTemplateVersionId  String value for frontTemplateVersionId.
         * @return Builder
         */
        public Builder frontTemplateVersionId(String frontTemplateVersionId) {
            this.frontTemplateVersionId = OptionalNullable.of(frontTemplateVersionId);
            return this;
        }

        /**
         * UnSetter for frontTemplateVersionId.
         * @return Builder
         */
        public Builder unsetFrontTemplateVersionId() {
            frontTemplateVersionId = null;
            return this;
        }

        /**
         * Setter for backTemplateVersionId.
         * @param  backTemplateVersionId  String value for backTemplateVersionId.
         * @return Builder
         */
        public Builder backTemplateVersionId(String backTemplateVersionId) {
            this.backTemplateVersionId = OptionalNullable.of(backTemplateVersionId);
            return this;
        }

        /**
         * UnSetter for backTemplateVersionId.
         * @return Builder
         */
        public Builder unsetBackTemplateVersionId() {
            backTemplateVersionId = null;
            return this;
        }

        /**
         * Setter for trackingEvents.
         * @param  trackingEvents  List of TrackingEventNormal value for trackingEvents.
         * @return Builder
         */
        public Builder trackingEvents(List<TrackingEventNormal> trackingEvents) {
            this.trackingEvents = OptionalNullable.of(trackingEvents);
            return this;
        }

        /**
         * UnSetter for trackingEvents.
         * @return Builder
         */
        public Builder unsetTrackingEvents() {
            trackingEvents = null;
            return this;
        }

        /**
         * Setter for campaignId.
         * @param  campaignId  String value for campaignId.
         * @return Builder
         */
        public Builder campaignId(String campaignId) {
            this.campaignId = OptionalNullable.of(campaignId);
            return this;
        }

        /**
         * UnSetter for campaignId.
         * @return Builder
         */
        public Builder unsetCampaignId() {
            campaignId = null;
            return this;
        }

        /**
         * Setter for useType.
         * @param  useType  PscUseTypeEnum value for useType.
         * @return Builder
         */
        public Builder useType(PscUseTypeEnum useType) {
            this.useType = OptionalNullable.of(useType);
            return this;
        }

        /**
         * UnSetter for useType.
         * @return Builder
         */
        public Builder unsetUseType() {
            useType = null;
            return this;
        }

        /**
         * Setter for fsc.
         * @param  fsc  Boolean value for fsc.
         * @return Builder
         */
        public Builder fsc(Boolean fsc) {
            this.fsc = fsc;
            return this;
        }

        /**
         * Setter for status.
         * @param  status  TheStatusOfThePostcardEnum value for status.
         * @return Builder
         */
        public Builder status(TheStatusOfThePostcardEnum status) {
            this.status = status;
            return this;
        }

        /**
         * Setter for failureReason.
         * @param  failureReason  String value for failureReason.
         * @return Builder
         */
        public Builder failureReason(String failureReason) {
            this.failureReason = OptionalNullable.of(failureReason);
            return this;
        }

        /**
         * UnSetter for failureReason.
         * @return Builder
         */
        public Builder unsetFailureReason() {
            failureReason = null;
            return this;
        }

        /**
         * Setter for object.
         * @param  object  Object10Enum value for object.
         * @return Builder
         */
        public Builder object(Object10Enum object) {
            this.object = object;
            return this;
        }

        /**
         * Builds a new {@link Postcard} object using the set fields.
         * @return {@link Postcard}
         */
        public Postcard build() {
            return new Postcard(to, carrier, id, frontTemplateId, backTemplateId, url, description,
                    metadata, mailType, mergeVariables, sendDate, size, thumbnails,
                    expectedDeliveryDate, dateCreated, dateModified, deleted, from,
                    frontTemplateVersionId, backTemplateVersionId, trackingEvents, campaignId,
                    useType, fsc, status, failureReason, object);
        }
    }
}
