/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.lob.api.models;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;


/**
 * FailureStatusCodeEnum to be used.
 */
public enum FailureStatusCodeEnum {
    ENUM_401,

    ENUM_403,

    ENUM_404,

    ENUM_413,

    ENUM_422,

    ENUM_429,

    ENUM_500;


    private static TreeMap<Integer, FailureStatusCodeEnum> valueMap = new TreeMap<>();
    private Integer value;

    static {
        ENUM_401.value = 401;
        ENUM_403.value = 403;
        ENUM_404.value = 404;
        ENUM_413.value = 413;
        ENUM_422.value = 422;
        ENUM_429.value = 429;
        ENUM_500.value = 500;

        valueMap.put(401, ENUM_401);
        valueMap.put(403, ENUM_403);
        valueMap.put(404, ENUM_404);
        valueMap.put(413, ENUM_413);
        valueMap.put(422, ENUM_422);
        valueMap.put(429, ENUM_429);
        valueMap.put(500, ENUM_500);
    }

    /**
     * Returns the enum member associated with the given integer value.
     * @param toConvert String value to get enum member.
     * @return The enum member against the given integer value.
     * @throws IOException when provided value is not mapped to any enum member.
     */
    @JsonCreator
    public static FailureStatusCodeEnum constructFromInteger(Integer toConvert) throws IOException {
        FailureStatusCodeEnum enumValue = fromInteger(toConvert);
        if (enumValue == null)
        {
            throw new IOException("Unable to create enum instance with value: " + toConvert);
        }
        return enumValue;
    }

    /**
     * Returns the enum member associated with the given integer value.
     * @param toConvert String value to get enum member.
     * @return The enum member against the given integer value.
     */
    public static FailureStatusCodeEnum fromInteger(Integer toConvert) {
        return valueMap.get(toConvert);
    }

    /**
     * Returns the integer value associated with the enum member.
     * @return The integer value against enum member.
     */
    @JsonValue
    public Integer value() {
        return value;
    }
        
    /**
     * Get string representation of this enum.
     */
    @Override
    public String toString() {
        return value.toString();
    }

    /**
     * Convert list of FailureStatusCodeEnum values to list of integer values.
     * @param toConvert The list of FailureStatusCodeEnum values to convert.
     * @return List of representative integer values.
     */
    public static List<Integer> toValue(List<FailureStatusCodeEnum> toConvert) {
        if (toConvert == null) {
            return null;
        }
        List<Integer> convertedValues = new ArrayList<>();
        for (FailureStatusCodeEnum enumValue : toConvert) {
            convertedValues.add(enumValue.value);
        }
        return convertedValues;
    }
} 