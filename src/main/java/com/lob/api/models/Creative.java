/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.lob.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.lob.api.DateTimeHelper;
import com.lob.api.models.containers.CreativeFrom;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;

/**
 * This is a model class for Creative type.
 */
public class Creative {
    private LocalDateTime dateCreated;
    private LocalDateTime dateModified;
    private boolean deleted;
    private String object;
    private String resourceType;
    private Returned1 details;
    private CreativeFrom from;
    private String description;
    private Map<String, String> metadata;
    private String id;
    private Object templatePreviewUrls;
    private List<Object> templatePreviews;
    private List<CampaignItem> campaigns;

    /**
     * Default constructor.
     */
    public Creative() {
        object = "creative";
        resourceType = "postcard";
    }

    /**
     * Initialization constructor.
     * @param  dateCreated  LocalDateTime value for dateCreated.
     * @param  dateModified  LocalDateTime value for dateModified.
     * @param  deleted  boolean value for deleted.
     * @param  object  String value for object.
     * @param  resourceType  String value for resourceType.
     * @param  details  Returned1 value for details.
     * @param  from  CreativeFrom value for from.
     * @param  description  String value for description.
     * @param  metadata  Map of String, value for metadata.
     * @param  id  String value for id.
     * @param  templatePreviewUrls  Object value for templatePreviewUrls.
     * @param  templatePreviews  List of Object value for templatePreviews.
     * @param  campaigns  List of CampaignItem value for campaigns.
     */
    public Creative(
            LocalDateTime dateCreated,
            LocalDateTime dateModified,
            boolean deleted,
            String object,
            String resourceType,
            Returned1 details,
            CreativeFrom from,
            String description,
            Map<String, String> metadata,
            String id,
            Object templatePreviewUrls,
            List<Object> templatePreviews,
            List<CampaignItem> campaigns) {
        this.dateCreated = dateCreated;
        this.dateModified = dateModified;
        this.deleted = deleted;
        this.object = object;
        this.resourceType = resourceType;
        this.details = details;
        this.from = from;
        this.description = description;
        this.metadata = metadata;
        this.id = id;
        this.templatePreviewUrls = templatePreviewUrls;
        this.templatePreviews = templatePreviews;
        this.campaigns = campaigns;
    }

    /**
     * Getter for DateCreated.
     * A timestamp in ISO 8601 format of the date the resource was created.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("date_created")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getDateCreated() {
        return dateCreated;
    }

    /**
     * Setter for DateCreated.
     * A timestamp in ISO 8601 format of the date the resource was created.
     * @param dateCreated Value for LocalDateTime
     */
    @JsonSetter("date_created")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setDateCreated(LocalDateTime dateCreated) {
        this.dateCreated = dateCreated;
    }

    /**
     * Getter for DateModified.
     * A timestamp in ISO 8601 format of the date the resource was last modified.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("date_modified")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getDateModified() {
        return dateModified;
    }

    /**
     * Setter for DateModified.
     * A timestamp in ISO 8601 format of the date the resource was last modified.
     * @param dateModified Value for LocalDateTime
     */
    @JsonSetter("date_modified")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setDateModified(LocalDateTime dateModified) {
        this.dateModified = dateModified;
    }

    /**
     * Getter for Deleted.
     * Only returned if the resource has been successfully deleted.
     * @return Returns the boolean
     */
    @JsonGetter("deleted")
    public boolean getDeleted() {
        return deleted;
    }

    /**
     * Setter for Deleted.
     * Only returned if the resource has been successfully deleted.
     * @param deleted Value for boolean
     */
    @JsonSetter("deleted")
    public void setDeleted(boolean deleted) {
        this.deleted = deleted;
    }

    /**
     * Getter for Object.
     * Value is resource type.
     * @return Returns the String
     */
    @JsonGetter("object")
    public String getObject() {
        return object;
    }

    /**
     * Setter for Object.
     * Value is resource type.
     * @param object Value for String
     */
    @JsonSetter("object")
    private void setObject(String object) {
        this.object = object;
    }

    /**
     * Getter for ResourceType.
     * Mailpiece type for the creative
     * @return Returns the String
     */
    @JsonGetter("resource_type")
    public String getResourceType() {
        return resourceType;
    }

    /**
     * Setter for ResourceType.
     * Mailpiece type for the creative
     * @param resourceType Value for String
     */
    @JsonSetter("resource_type")
    private void setResourceType(String resourceType) {
        this.resourceType = resourceType;
    }

    /**
     * Getter for Details.
     * Properties that the postcards in your Creative should have. Check within in order to add a QR
     * code to your creative.
     * @return Returns the Returned1
     */
    @JsonGetter("details")
    public Returned1 getDetails() {
        return details;
    }

    /**
     * Setter for Details.
     * Properties that the postcards in your Creative should have. Check within in order to add a QR
     * code to your creative.
     * @param details Value for Returned1
     */
    @JsonSetter("details")
    public void setDetails(Returned1 details) {
        this.details = details;
    }

    /**
     * Getter for From.
     * Must either be an address ID or an inline object with correct address parameters. All
     * addresses will be standardized into uppercase without being modified by verification.
     * @return Returns the CreativeFrom
     */
    @JsonGetter("from")
    public CreativeFrom getFrom() {
        return from;
    }

    /**
     * Setter for From.
     * Must either be an address ID or an inline object with correct address parameters. All
     * addresses will be standardized into uppercase without being modified by verification.
     * @param from Value for CreativeFrom
     */
    @JsonSetter("from")
    public void setFrom(CreativeFrom from) {
        this.from = from;
    }

    /**
     * Getter for Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     * @return Returns the String
     */
    @JsonGetter("description")
    public String getDescription() {
        return description;
    }

    /**
     * Setter for Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     * @param description Value for String
     */
    @JsonSetter("description")
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Getter for Metadata.
     * Use metadata to store custom information for tagging and labeling back to your internal
     * systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters
     * and values must be at most 500 characters. Neither can contain the characters `"` and `\`.
     * i.e. '{"customer_id" : "NEWYORK2015"}' Nested objects are not supported. See
     * [Metadata](#section/Metadata) for more information.
     * @return Returns the Map of String, String
     */
    @JsonGetter("metadata")
    public Map<String, String> getMetadata() {
        return metadata;
    }

    /**
     * Setter for Metadata.
     * Use metadata to store custom information for tagging and labeling back to your internal
     * systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters
     * and values must be at most 500 characters. Neither can contain the characters `"` and `\`.
     * i.e. '{"customer_id" : "NEWYORK2015"}' Nested objects are not supported. See
     * [Metadata](#section/Metadata) for more information.
     * @param metadata Value for Map of String, String
     */
    @JsonSetter("metadata")
    public void setMetadata(Map<String, String> metadata) {
        this.metadata = metadata;
    }

    /**
     * Getter for Id.
     * Unique identifier prefixed with `crv_`.
     * @return Returns the String
     */
    @JsonGetter("id")
    public String getId() {
        return id;
    }

    /**
     * Setter for Id.
     * Unique identifier prefixed with `crv_`.
     * @param id Value for String
     */
    @JsonSetter("id")
    public void setId(String id) {
        this.id = id;
    }

    /**
     * Getter for TemplatePreviewUrls.
     * Preview URLs associated with a creative's artwork asset(s) if the creative uses HTML
     * templates as assets. An empty object will be returned if no `template_preview`s have been
     * generated.
     * @return Returns the Object
     */
    @JsonGetter("template_preview_urls")
    public Object getTemplatePreviewUrls() {
        return templatePreviewUrls;
    }

    /**
     * Setter for TemplatePreviewUrls.
     * Preview URLs associated with a creative's artwork asset(s) if the creative uses HTML
     * templates as assets. An empty object will be returned if no `template_preview`s have been
     * generated.
     * @param templatePreviewUrls Value for Object
     */
    @JsonSetter("template_preview_urls")
    public void setTemplatePreviewUrls(Object templatePreviewUrls) {
        this.templatePreviewUrls = templatePreviewUrls;
    }

    /**
     * Getter for TemplatePreviews.
     * A list of template preview objects if the creative uses HTML template(s) as artwork asset(s).
     * An empty array will be returned if no `template_preview`s have been generated for the
     * creative.
     * @return Returns the List of Object
     */
    @JsonGetter("template_previews")
    public List<Object> getTemplatePreviews() {
        return templatePreviews;
    }

    /**
     * Setter for TemplatePreviews.
     * A list of template preview objects if the creative uses HTML template(s) as artwork asset(s).
     * An empty array will be returned if no `template_preview`s have been generated for the
     * creative.
     * @param templatePreviews Value for List of Object
     */
    @JsonSetter("template_previews")
    public void setTemplatePreviews(List<Object> templatePreviews) {
        this.templatePreviews = templatePreviews;
    }

    /**
     * Getter for Campaigns.
     * Array of campaigns associated with the creative ID
     * @return Returns the List of CampaignItem
     */
    @JsonGetter("campaigns")
    public List<CampaignItem> getCampaigns() {
        return campaigns;
    }

    /**
     * Setter for Campaigns.
     * Array of campaigns associated with the creative ID
     * @param campaigns Value for List of CampaignItem
     */
    @JsonSetter("campaigns")
    public void setCampaigns(List<CampaignItem> campaigns) {
        this.campaigns = campaigns;
    }

    /**
     * Converts this Creative into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Creative [" + "dateCreated=" + dateCreated + ", dateModified=" + dateModified
                + ", deleted=" + deleted + ", object=" + object + ", resourceType=" + resourceType
                + ", details=" + details + ", from=" + from + ", description=" + description
                + ", metadata=" + metadata + ", id=" + id + ", templatePreviewUrls="
                + templatePreviewUrls + ", templatePreviews=" + templatePreviews + ", campaigns="
                + campaigns + "]";
    }

    /**
     * Builds a new {@link Creative.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Creative.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(dateCreated, dateModified, deleted, object, resourceType,
                details, from, description, metadata, id, templatePreviewUrls, templatePreviews,
                campaigns);
        return builder;
    }

    /**
     * Class to build instances of {@link Creative}.
     */
    public static class Builder {
        private LocalDateTime dateCreated;
        private LocalDateTime dateModified;
        private boolean deleted;
        private String object = "creative";
        private String resourceType = "postcard";
        private Returned1 details;
        private CreativeFrom from;
        private String description;
        private Map<String, String> metadata;
        private String id;
        private Object templatePreviewUrls;
        private List<Object> templatePreviews;
        private List<CampaignItem> campaigns;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  dateCreated  LocalDateTime value for dateCreated.
         * @param  dateModified  LocalDateTime value for dateModified.
         * @param  deleted  boolean value for deleted.
         * @param  object  String value for object.
         * @param  resourceType  String value for resourceType.
         * @param  details  Returned1 value for details.
         * @param  from  CreativeFrom value for from.
         * @param  description  String value for description.
         * @param  metadata  Map of String, value for metadata.
         * @param  id  String value for id.
         * @param  templatePreviewUrls  Object value for templatePreviewUrls.
         * @param  templatePreviews  List of Object value for templatePreviews.
         * @param  campaigns  List of CampaignItem value for campaigns.
         */
        public Builder(LocalDateTime dateCreated, LocalDateTime dateModified, boolean deleted,
                String object, String resourceType, Returned1 details, CreativeFrom from,
                String description, Map<String, String> metadata, String id,
                Object templatePreviewUrls, List<Object> templatePreviews,
                List<CampaignItem> campaigns) {
            this.dateCreated = dateCreated;
            this.dateModified = dateModified;
            this.deleted = deleted;
            this.object = object;
            this.resourceType = resourceType;
            this.details = details;
            this.from = from;
            this.description = description;
            this.metadata = metadata;
            this.id = id;
            this.templatePreviewUrls = templatePreviewUrls;
            this.templatePreviews = templatePreviews;
            this.campaigns = campaigns;
        }

        /**
         * Setter for dateCreated.
         * @param  dateCreated  LocalDateTime value for dateCreated.
         * @return Builder
         */
        public Builder dateCreated(LocalDateTime dateCreated) {
            this.dateCreated = dateCreated;
            return this;
        }

        /**
         * Setter for dateModified.
         * @param  dateModified  LocalDateTime value for dateModified.
         * @return Builder
         */
        public Builder dateModified(LocalDateTime dateModified) {
            this.dateModified = dateModified;
            return this;
        }

        /**
         * Setter for deleted.
         * @param  deleted  boolean value for deleted.
         * @return Builder
         */
        public Builder deleted(boolean deleted) {
            this.deleted = deleted;
            return this;
        }

        /**
         * Setter for object.
         * @param  object  String value for object.
         * @return Builder
         */
        public Builder object(String object) {
            this.object = object;
            return this;
        }

        /**
         * Setter for resourceType.
         * @param  resourceType  String value for resourceType.
         * @return Builder
         */
        public Builder resourceType(String resourceType) {
            this.resourceType = resourceType;
            return this;
        }

        /**
         * Setter for details.
         * @param  details  Returned1 value for details.
         * @return Builder
         */
        public Builder details(Returned1 details) {
            this.details = details;
            return this;
        }

        /**
         * Setter for from.
         * @param  from  CreativeFrom value for from.
         * @return Builder
         */
        public Builder from(CreativeFrom from) {
            this.from = from;
            return this;
        }

        /**
         * Setter for description.
         * @param  description  String value for description.
         * @return Builder
         */
        public Builder description(String description) {
            this.description = description;
            return this;
        }

        /**
         * Setter for metadata.
         * @param  metadata  Map of String, value for metadata.
         * @return Builder
         */
        public Builder metadata(Map<String, String> metadata) {
            this.metadata = metadata;
            return this;
        }

        /**
         * Setter for id.
         * @param  id  String value for id.
         * @return Builder
         */
        public Builder id(String id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for templatePreviewUrls.
         * @param  templatePreviewUrls  Object value for templatePreviewUrls.
         * @return Builder
         */
        public Builder templatePreviewUrls(Object templatePreviewUrls) {
            this.templatePreviewUrls = templatePreviewUrls;
            return this;
        }

        /**
         * Setter for templatePreviews.
         * @param  templatePreviews  List of Object value for templatePreviews.
         * @return Builder
         */
        public Builder templatePreviews(List<Object> templatePreviews) {
            this.templatePreviews = templatePreviews;
            return this;
        }

        /**
         * Setter for campaigns.
         * @param  campaigns  List of CampaignItem value for campaigns.
         * @return Builder
         */
        public Builder campaigns(List<CampaignItem> campaigns) {
            this.campaigns = campaigns;
            return this;
        }

        /**
         * Builds a new {@link Creative} object using the set fields.
         * @return {@link Creative}
         */
        public Creative build() {
            return new Creative(dateCreated, dateModified, deleted, object, resourceType, details,
                    from, description, metadata, id, templatePreviewUrls, templatePreviews,
                    campaigns);
        }
    }
}
