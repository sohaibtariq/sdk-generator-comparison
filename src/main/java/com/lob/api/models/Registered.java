/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.lob.api.models;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.lob.api.DateTimeHelper;
import com.lob.api.models.containers.Address;
import com.lob.api.models.containers.ReturnAddress;
import com.lob.api.models.containers.ReturnEnvelopeReturned2;
import com.lob.api.models.containers.SendDate;
import io.apimatic.core.types.OptionalNullable;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;

/**
 * This is a model class for Registered type.
 */
public class Registered {
    private String extraService;
    private OptionalNullable<String> trackingNumber;
    private List<TrackingEventNormal> trackingEvents;
    private ReturnAddress returnAddress;
    private OptionalNullable<String> description;
    private Map<String, String> metadata;
    private OptionalNullable<Object> mergeVariables;
    private SendDate sendDate;
    private MailTypeEnum mailType;
    private boolean color;
    private Boolean doubleSided;
    private AddressPlacementEnum addressPlacement;
    private ReturnEnvelopeReturned2 returnEnvelope;
    private OptionalNullable<Integer> perforatedPage;
    private OptionalNullable<CustomEnvelopeReturned> customEnvelope;
    private Address to;
    private String carrier;
    private List<Thumbnail> thumbnails;
    private LocalDate expectedDeliveryDate;
    private LocalDateTime dateCreated;
    private LocalDateTime dateModified;
    private Boolean deleted;
    private Address from;
    private String url;
    private String id;
    private String templateId;
    private String templateVersionId;
    private OptionalNullable<String> campaignId;
    private LtrUseTypeEnum useType;
    private Boolean fsc;
    private TheStatusOfTheLetterEnum status;
    private OptionalNullable<String> failureReason;
    private Object8Enum object;

    /**
     * Default constructor.
     */
    public Registered() {
        extraService = "registered";
        carrier = "USPS";
        mailType = MailTypeEnum.USPS_FIRST_CLASS;
        doubleSided = true;
        addressPlacement = AddressPlacementEnum.TOP_FIRST_PAGE;
        fsc = false;
        object = Object8Enum.LETTER;
    }

    /**
     * Initialization constructor.
     * @param  extraService  String value for extraService.
     * @param  color  boolean value for color.
     * @param  to  Address value for to.
     * @param  carrier  String value for carrier.
     * @param  from  Address value for from.
     * @param  id  String value for id.
     * @param  useType  LtrUseTypeEnum value for useType.
     * @param  trackingNumber  String value for trackingNumber.
     * @param  trackingEvents  List of TrackingEventNormal value for trackingEvents.
     * @param  returnAddress  ReturnAddress value for returnAddress.
     * @param  description  String value for description.
     * @param  metadata  Map of String, value for metadata.
     * @param  mergeVariables  Object value for mergeVariables.
     * @param  sendDate  SendDate value for sendDate.
     * @param  mailType  MailTypeEnum value for mailType.
     * @param  doubleSided  Boolean value for doubleSided.
     * @param  addressPlacement  AddressPlacementEnum value for addressPlacement.
     * @param  returnEnvelope  ReturnEnvelopeReturned2 value for returnEnvelope.
     * @param  perforatedPage  Integer value for perforatedPage.
     * @param  customEnvelope  CustomEnvelopeReturned value for customEnvelope.
     * @param  thumbnails  List of Thumbnail value for thumbnails.
     * @param  expectedDeliveryDate  LocalDate value for expectedDeliveryDate.
     * @param  dateCreated  LocalDateTime value for dateCreated.
     * @param  dateModified  LocalDateTime value for dateModified.
     * @param  deleted  Boolean value for deleted.
     * @param  url  String value for url.
     * @param  templateId  String value for templateId.
     * @param  templateVersionId  String value for templateVersionId.
     * @param  campaignId  String value for campaignId.
     * @param  fsc  Boolean value for fsc.
     * @param  status  TheStatusOfTheLetterEnum value for status.
     * @param  failureReason  String value for failureReason.
     * @param  object  Object8Enum value for object.
     */
    public Registered(
            String extraService,
            boolean color,
            Address to,
            String carrier,
            Address from,
            String id,
            LtrUseTypeEnum useType,
            String trackingNumber,
            List<TrackingEventNormal> trackingEvents,
            ReturnAddress returnAddress,
            String description,
            Map<String, String> metadata,
            Object mergeVariables,
            SendDate sendDate,
            MailTypeEnum mailType,
            Boolean doubleSided,
            AddressPlacementEnum addressPlacement,
            ReturnEnvelopeReturned2 returnEnvelope,
            Integer perforatedPage,
            CustomEnvelopeReturned customEnvelope,
            List<Thumbnail> thumbnails,
            LocalDate expectedDeliveryDate,
            LocalDateTime dateCreated,
            LocalDateTime dateModified,
            Boolean deleted,
            String url,
            String templateId,
            String templateVersionId,
            String campaignId,
            Boolean fsc,
            TheStatusOfTheLetterEnum status,
            String failureReason,
            Object8Enum object) {
        this.extraService = extraService;
        this.trackingNumber = OptionalNullable.of(trackingNumber);
        this.trackingEvents = trackingEvents;
        this.returnAddress = returnAddress;
        this.description = OptionalNullable.of(description);
        this.metadata = metadata;
        this.mergeVariables = OptionalNullable.of(mergeVariables);
        this.sendDate = sendDate;
        this.mailType = mailType;
        this.color = color;
        this.doubleSided = doubleSided;
        this.addressPlacement = addressPlacement;
        this.returnEnvelope = returnEnvelope;
        this.perforatedPage = OptionalNullable.of(perforatedPage);
        this.customEnvelope = OptionalNullable.of(customEnvelope);
        this.to = to;
        this.carrier = carrier;
        this.thumbnails = thumbnails;
        this.expectedDeliveryDate = expectedDeliveryDate;
        this.dateCreated = dateCreated;
        this.dateModified = dateModified;
        this.deleted = deleted;
        this.from = from;
        this.url = url;
        this.id = id;
        this.templateId = templateId;
        this.templateVersionId = templateVersionId;
        this.campaignId = OptionalNullable.of(campaignId);
        this.useType = useType;
        this.fsc = fsc;
        this.status = status;
        this.failureReason = OptionalNullable.of(failureReason);
        this.object = object;
    }

    /**
     * Initialization constructor.
     * @param  extraService  String value for extraService.
     * @param  color  boolean value for color.
     * @param  to  Address value for to.
     * @param  carrier  String value for carrier.
     * @param  from  Address value for from.
     * @param  id  String value for id.
     * @param  useType  LtrUseTypeEnum value for useType.
     * @param  trackingNumber  String value for trackingNumber.
     * @param  trackingEvents  List of TrackingEventNormal value for trackingEvents.
     * @param  returnAddress  ReturnAddress value for returnAddress.
     * @param  description  String value for description.
     * @param  metadata  Map of String, value for metadata.
     * @param  mergeVariables  Object value for mergeVariables.
     * @param  sendDate  SendDate value for sendDate.
     * @param  mailType  MailTypeEnum value for mailType.
     * @param  doubleSided  Boolean value for doubleSided.
     * @param  addressPlacement  AddressPlacementEnum value for addressPlacement.
     * @param  returnEnvelope  ReturnEnvelopeReturned2 value for returnEnvelope.
     * @param  perforatedPage  Integer value for perforatedPage.
     * @param  customEnvelope  CustomEnvelopeReturned value for customEnvelope.
     * @param  thumbnails  List of Thumbnail value for thumbnails.
     * @param  expectedDeliveryDate  LocalDate value for expectedDeliveryDate.
     * @param  dateCreated  LocalDateTime value for dateCreated.
     * @param  dateModified  LocalDateTime value for dateModified.
     * @param  deleted  Boolean value for deleted.
     * @param  url  String value for url.
     * @param  templateId  String value for templateId.
     * @param  templateVersionId  String value for templateVersionId.
     * @param  campaignId  String value for campaignId.
     * @param  fsc  Boolean value for fsc.
     * @param  status  TheStatusOfTheLetterEnum value for status.
     * @param  failureReason  String value for failureReason.
     * @param  object  Object8Enum value for object.
     */

    protected Registered(String extraService, boolean color, Address to, String carrier,
            Address from, String id, LtrUseTypeEnum useType,
            OptionalNullable<String> trackingNumber, List<TrackingEventNormal> trackingEvents,
            ReturnAddress returnAddress, OptionalNullable<String> description,
            Map<String, String> metadata, OptionalNullable<Object> mergeVariables,
            SendDate sendDate, MailTypeEnum mailType, Boolean doubleSided,
            AddressPlacementEnum addressPlacement, ReturnEnvelopeReturned2 returnEnvelope,
            OptionalNullable<Integer> perforatedPage,
            OptionalNullable<CustomEnvelopeReturned> customEnvelope, List<Thumbnail> thumbnails,
            LocalDate expectedDeliveryDate, LocalDateTime dateCreated, LocalDateTime dateModified,
            Boolean deleted, String url, String templateId, String templateVersionId,
            OptionalNullable<String> campaignId, Boolean fsc, TheStatusOfTheLetterEnum status,
            OptionalNullable<String> failureReason, Object8Enum object) {
        this.extraService = extraService;
        this.trackingNumber = trackingNumber;
        this.trackingEvents = trackingEvents;
        this.returnAddress = returnAddress;
        this.description = description;
        this.metadata = metadata;
        this.mergeVariables = mergeVariables;
        this.sendDate = sendDate;
        this.mailType = mailType;
        this.color = color;
        this.doubleSided = doubleSided;
        this.addressPlacement = addressPlacement;
        this.returnEnvelope = returnEnvelope;
        this.perforatedPage = perforatedPage;
        this.customEnvelope = customEnvelope;
        this.to = to;
        this.carrier = carrier;
        this.thumbnails = thumbnails;
        this.expectedDeliveryDate = expectedDeliveryDate;
        this.dateCreated = dateCreated;
        this.dateModified = dateModified;
        this.deleted = deleted;
        this.from = from;
        this.url = url;
        this.id = id;
        this.templateId = templateId;
        this.templateVersionId = templateVersionId;
        this.campaignId = campaignId;
        this.useType = useType;
        this.fsc = fsc;
        this.status = status;
        this.failureReason = failureReason;
        this.object = object;
    }

    /**
     * Initialization constructor.
     * @param  extraService  String value for extraService.
     * @param  color  boolean value for color.
     * @param  to  Address value for to.
     * @param  carrier  String value for carrier.
     * @param  from  Address value for from.
     * @param  id  String value for id.
     * @param  useType  LtrUseTypeEnum value for useType.
     */
    @JsonCreator
    protected Registered(
            @JsonProperty("extra_service") String extraService,
            @JsonProperty("color") boolean color,
            @JsonProperty("to") Address to,
            @JsonProperty("carrier") String carrier,
            @JsonProperty("from") Address from,
            @JsonProperty("id") String id,
            @JsonProperty("use_type") LtrUseTypeEnum useType) {
        this(extraService, color, to, carrier, from, id, useType, OptionalNullable.of(null), null,
                null, OptionalNullable.of(null), null, OptionalNullable.of(null), null, null, null,
                null, null, OptionalNullable.of(null), OptionalNullable.of(null), null, null, null,
                null, null, null, null, null, OptionalNullable.of(null), null, null,
                OptionalNullable.of(null), null);
        unsetTrackingNumber();
        unsetDescription();
        unsetMergeVariables();
        unsetPerforatedPage();
        unsetCustomEnvelope();
        unsetCampaignId();
        unsetFailureReason();
    }

    /**
     * Getter for ExtraService.
     * Add an extra service to your letter. See &lt;a
     * href="https://www.lob.com/pricing/print-mail#compare" target="_blank"&gt;pricing&lt;/a&gt; for extra
     * costs incurred. * registered - provides tracking and confirmation for international addresses
     * @return Returns the String
     */
    @JsonGetter("extra_service")
    public String getExtraService() {
        return extraService;
    }

    /**
     * Setter for ExtraService.
     * Add an extra service to your letter. See &lt;a
     * href="https://www.lob.com/pricing/print-mail#compare" target="_blank"&gt;pricing&lt;/a&gt; for extra
     * costs incurred. * registered - provides tracking and confirmation for international addresses
     * @param extraService Value for String
     */
    @JsonSetter("extra_service")
    private void setExtraService(String extraService) {
        this.extraService = extraService;
    }

    /**
     * Internal Getter for TrackingNumber.
     * The tracking number will appear here when it becomes available. Dummy tracking numbers are
     * not created in test mode.
     * @return Returns the Internal String
     */
    @JsonGetter("tracking_number")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetTrackingNumber() {
        return this.trackingNumber;
    }

    /**
     * Getter for TrackingNumber.
     * The tracking number will appear here when it becomes available. Dummy tracking numbers are
     * not created in test mode.
     * @return Returns the String
     */
    public String getTrackingNumber() {
        return OptionalNullable.getFrom(trackingNumber);
    }

    /**
     * Setter for TrackingNumber.
     * The tracking number will appear here when it becomes available. Dummy tracking numbers are
     * not created in test mode.
     * @param trackingNumber Value for String
     */
    @JsonSetter("tracking_number")
    public void setTrackingNumber(String trackingNumber) {
        this.trackingNumber = OptionalNullable.of(trackingNumber);
    }

    /**
     * UnSetter for TrackingNumber.
     * The tracking number will appear here when it becomes available. Dummy tracking numbers are
     * not created in test mode.
     */
    public void unsetTrackingNumber() {
        trackingNumber = null;
    }

    /**
     * Getter for TrackingEvents.
     * Tracking events are not populated for registered letters.
     * @return Returns the List of TrackingEventNormal
     */
    @JsonGetter("tracking_events")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<TrackingEventNormal> getTrackingEvents() {
        return trackingEvents;
    }

    /**
     * Setter for TrackingEvents.
     * Tracking events are not populated for registered letters.
     * @param trackingEvents Value for List of TrackingEventNormal
     */
    @JsonSetter("tracking_events")
    public void setTrackingEvents(List<TrackingEventNormal> trackingEvents) {
        this.trackingEvents = trackingEvents;
    }

    /**
     * Getter for ReturnAddress.
     * Specifies the address the return envelope will be sent back to. This is an optional argument
     * that is available if an account is signed up for the return envelope tracking beta, and has
     * `return_envelope`, and `perforated_page` fields populated in the API request.
     * @return Returns the ReturnAddress
     */
    @JsonGetter("return_address")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public ReturnAddress getReturnAddress() {
        return returnAddress;
    }

    /**
     * Setter for ReturnAddress.
     * Specifies the address the return envelope will be sent back to. This is an optional argument
     * that is available if an account is signed up for the return envelope tracking beta, and has
     * `return_envelope`, and `perforated_page` fields populated in the API request.
     * @param returnAddress Value for ReturnAddress
     */
    @JsonSetter("return_address")
    public void setReturnAddress(ReturnAddress returnAddress) {
        this.returnAddress = returnAddress;
    }

    /**
     * Internal Getter for Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     * @return Returns the Internal String
     */
    @JsonGetter("description")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetDescription() {
        return this.description;
    }

    /**
     * Getter for Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     * @return Returns the String
     */
    public String getDescription() {
        return OptionalNullable.getFrom(description);
    }

    /**
     * Setter for Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     * @param description Value for String
     */
    @JsonSetter("description")
    public void setDescription(String description) {
        this.description = OptionalNullable.of(description);
    }

    /**
     * UnSetter for Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     */
    public void unsetDescription() {
        description = null;
    }

    /**
     * Getter for Metadata.
     * Use metadata to store custom information for tagging and labeling back to your internal
     * systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters
     * and values must be at most 500 characters. Neither can contain the characters `"` and `\`.
     * i.e. '{"customer_id" : "NEWYORK2015"}' Nested objects are not supported. See
     * [Metadata](#section/Metadata) for more information.
     * @return Returns the Map of String, String
     */
    @JsonGetter("metadata")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Map<String, String> getMetadata() {
        return metadata;
    }

    /**
     * Setter for Metadata.
     * Use metadata to store custom information for tagging and labeling back to your internal
     * systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters
     * and values must be at most 500 characters. Neither can contain the characters `"` and `\`.
     * i.e. '{"customer_id" : "NEWYORK2015"}' Nested objects are not supported. See
     * [Metadata](#section/Metadata) for more information.
     * @param metadata Value for Map of String, String
     */
    @JsonSetter("metadata")
    public void setMetadata(Map<String, String> metadata) {
        this.metadata = metadata;
    }

    /**
     * Internal Getter for MergeVariables.
     * You can input a merge variable payload object to your template to render dynamic content. For
     * example, if you have a template like: `{{variable_name}}`, pass in `{"variable_name":
     * "Harry"}` to render `Harry`. `merge_variables` must be an object. Any type of value is
     * accepted as long as the object is valid JSON; you can use `strings`, `numbers`, `booleans`,
     * `arrays`, `objects`, or `null`. The max length of the object is 25,000 characters. If you
     * call `JSON.stringify` on your object, it can be no longer than 25,000 characters. Your
     * variable names cannot contain any whitespace or any of the following special characters: `!`,
     * `"`, `#`, `%`, `&amp;`, `'`, `(`, `)`, `*`, `+`, `,`, `/`, `;`, `&lt;`, `=`, `&gt;`, `{@literal @}`, `[`, `\`,
     * `]`, `^`, `` ` ``, `{`, `|`, `}`, `~`. More instructions can be found in &lt;a
     * href="https://help.lob.com/print-and-mail/designing-mail-creatives/dynamic-personalization#using-html-and-merge-variables-10"
     * target="_blank"&gt;our guide to using html and merge variables&lt;/a&gt;. Depending on your &lt;a
     * href="https://dashboard.lob.com/#/settings/account" target="_blank"&gt;Merge Variable
     * strictness&lt;/a&gt; setting, if you define variables in your HTML but do not pass them here, you
     * will either receive an error or the variable will render as an empty string.
     * @return Returns the Internal Object
     */
    @JsonGetter("merge_variables")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Object> internalGetMergeVariables() {
        return this.mergeVariables;
    }

    /**
     * Getter for MergeVariables.
     * You can input a merge variable payload object to your template to render dynamic content. For
     * example, if you have a template like: `{{variable_name}}`, pass in `{"variable_name":
     * "Harry"}` to render `Harry`. `merge_variables` must be an object. Any type of value is
     * accepted as long as the object is valid JSON; you can use `strings`, `numbers`, `booleans`,
     * `arrays`, `objects`, or `null`. The max length of the object is 25,000 characters. If you
     * call `JSON.stringify` on your object, it can be no longer than 25,000 characters. Your
     * variable names cannot contain any whitespace or any of the following special characters: `!`,
     * `"`, `#`, `%`, `&amp;`, `'`, `(`, `)`, `*`, `+`, `,`, `/`, `;`, `&lt;`, `=`, `&gt;`, `{@literal @}`, `[`, `\`,
     * `]`, `^`, `` ` ``, `{`, `|`, `}`, `~`. More instructions can be found in &lt;a
     * href="https://help.lob.com/print-and-mail/designing-mail-creatives/dynamic-personalization#using-html-and-merge-variables-10"
     * target="_blank"&gt;our guide to using html and merge variables&lt;/a&gt;. Depending on your &lt;a
     * href="https://dashboard.lob.com/#/settings/account" target="_blank"&gt;Merge Variable
     * strictness&lt;/a&gt; setting, if you define variables in your HTML but do not pass them here, you
     * will either receive an error or the variable will render as an empty string.
     * @return Returns the Object
     */
    public Object getMergeVariables() {
        return OptionalNullable.getFrom(mergeVariables);
    }

    /**
     * Setter for MergeVariables.
     * You can input a merge variable payload object to your template to render dynamic content. For
     * example, if you have a template like: `{{variable_name}}`, pass in `{"variable_name":
     * "Harry"}` to render `Harry`. `merge_variables` must be an object. Any type of value is
     * accepted as long as the object is valid JSON; you can use `strings`, `numbers`, `booleans`,
     * `arrays`, `objects`, or `null`. The max length of the object is 25,000 characters. If you
     * call `JSON.stringify` on your object, it can be no longer than 25,000 characters. Your
     * variable names cannot contain any whitespace or any of the following special characters: `!`,
     * `"`, `#`, `%`, `&amp;`, `'`, `(`, `)`, `*`, `+`, `,`, `/`, `;`, `&lt;`, `=`, `&gt;`, `{@literal @}`, `[`, `\`,
     * `]`, `^`, `` ` ``, `{`, `|`, `}`, `~`. More instructions can be found in &lt;a
     * href="https://help.lob.com/print-and-mail/designing-mail-creatives/dynamic-personalization#using-html-and-merge-variables-10"
     * target="_blank"&gt;our guide to using html and merge variables&lt;/a&gt;. Depending on your &lt;a
     * href="https://dashboard.lob.com/#/settings/account" target="_blank"&gt;Merge Variable
     * strictness&lt;/a&gt; setting, if you define variables in your HTML but do not pass them here, you
     * will either receive an error or the variable will render as an empty string.
     * @param mergeVariables Value for Object
     */
    @JsonSetter("merge_variables")
    public void setMergeVariables(Object mergeVariables) {
        this.mergeVariables = OptionalNullable.of(mergeVariables);
    }

    /**
     * UnSetter for MergeVariables.
     * You can input a merge variable payload object to your template to render dynamic content. For
     * example, if you have a template like: `{{variable_name}}`, pass in `{"variable_name":
     * "Harry"}` to render `Harry`. `merge_variables` must be an object. Any type of value is
     * accepted as long as the object is valid JSON; you can use `strings`, `numbers`, `booleans`,
     * `arrays`, `objects`, or `null`. The max length of the object is 25,000 characters. If you
     * call `JSON.stringify` on your object, it can be no longer than 25,000 characters. Your
     * variable names cannot contain any whitespace or any of the following special characters: `!`,
     * `"`, `#`, `%`, `&amp;`, `'`, `(`, `)`, `*`, `+`, `,`, `/`, `;`, `&lt;`, `=`, `&gt;`, `{@literal @}`, `[`, `\`,
     * `]`, `^`, `` ` ``, `{`, `|`, `}`, `~`. More instructions can be found in &lt;a
     * href="https://help.lob.com/print-and-mail/designing-mail-creatives/dynamic-personalization#using-html-and-merge-variables-10"
     * target="_blank"&gt;our guide to using html and merge variables&lt;/a&gt;. Depending on your &lt;a
     * href="https://dashboard.lob.com/#/settings/account" target="_blank"&gt;Merge Variable
     * strictness&lt;/a&gt; setting, if you define variables in your HTML but do not pass them here, you
     * will either receive an error or the variable will render as an empty string.
     */
    public void unsetMergeVariables() {
        mergeVariables = null;
    }

    /**
     * Getter for SendDate.
     * A timestamp in ISO 8601 format which specifies a date after the current time and up to 180
     * days in the future to send the letter off for production. Setting a send date overrides the
     * default [cancellation window](#section/Cancellation-Windows) applied to the mailpiece. Until
     * the `send_date` has passed, the mailpiece can be canceled. If a date in the format
     * `2017-11-01` is passed, it will evaluate to midnight UTC of that date
     * (`2017-11-01T00:00:00.000Z`). If a datetime is passed, that exact time will be used. A
     * `send_date` passed with no time zone will default to UTC, while a `send_date` passed with a
     * time zone will be converted to UTC.
     * @return Returns the SendDate
     */
    @JsonGetter("send_date")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public SendDate getSendDate() {
        return sendDate;
    }

    /**
     * Setter for SendDate.
     * A timestamp in ISO 8601 format which specifies a date after the current time and up to 180
     * days in the future to send the letter off for production. Setting a send date overrides the
     * default [cancellation window](#section/Cancellation-Windows) applied to the mailpiece. Until
     * the `send_date` has passed, the mailpiece can be canceled. If a date in the format
     * `2017-11-01` is passed, it will evaluate to midnight UTC of that date
     * (`2017-11-01T00:00:00.000Z`). If a datetime is passed, that exact time will be used. A
     * `send_date` passed with no time zone will default to UTC, while a `send_date` passed with a
     * time zone will be converted to UTC.
     * @param sendDate Value for SendDate
     */
    @JsonSetter("send_date")
    public void setSendDate(SendDate sendDate) {
        this.sendDate = sendDate;
    }

    /**
     * Getter for MailType.
     * A string designating the mail postage type: * `usps_first_class` - (default) *
     * `usps_standard` - a &lt;a href="https://lob.com/pricing/print-mail#compare"
     * target="_blank"&gt;cheaper option&lt;/a&gt; which is less predictable and takes longer to deliver.
     * `usps_standard` cannot be used with `4x6` postcards or for any postcards sent outside of the
     * United States.
     * @return Returns the MailTypeEnum
     */
    @JsonGetter("mail_type")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public MailTypeEnum getMailType() {
        return mailType;
    }

    /**
     * Setter for MailType.
     * A string designating the mail postage type: * `usps_first_class` - (default) *
     * `usps_standard` - a &lt;a href="https://lob.com/pricing/print-mail#compare"
     * target="_blank"&gt;cheaper option&lt;/a&gt; which is less predictable and takes longer to deliver.
     * `usps_standard` cannot be used with `4x6` postcards or for any postcards sent outside of the
     * United States.
     * @param mailType Value for MailTypeEnum
     */
    @JsonSetter("mail_type")
    public void setMailType(MailTypeEnum mailType) {
        this.mailType = mailType;
    }

    /**
     * Getter for Color.
     * Set this key to `true` if you would like to print in color. Set to `false` if you would like
     * to print in black and white.
     * @return Returns the boolean
     */
    @JsonGetter("color")
    public boolean getColor() {
        return color;
    }

    /**
     * Setter for Color.
     * Set this key to `true` if you would like to print in color. Set to `false` if you would like
     * to print in black and white.
     * @param color Value for boolean
     */
    @JsonSetter("color")
    public void setColor(boolean color) {
        this.color = color;
    }

    /**
     * Getter for DoubleSided.
     * Set this attribute to `true` for double sided printing, or `false` for for single sided
     * printing. Defaults to `true`.
     * @return Returns the Boolean
     */
    @JsonGetter("double_sided")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getDoubleSided() {
        return doubleSided;
    }

    /**
     * Setter for DoubleSided.
     * Set this attribute to `true` for double sided printing, or `false` for for single sided
     * printing. Defaults to `true`.
     * @param doubleSided Value for Boolean
     */
    @JsonSetter("double_sided")
    public void setDoubleSided(Boolean doubleSided) {
        this.doubleSided = doubleSided;
    }

    /**
     * Getter for AddressPlacement.
     * Specifies the location of the address information that will show through the double-window
     * envelope. To see how this will impact your letter design, view our letter template. Some
     * values are exclusive to certain customers. Upgrade to the appropriate &lt;a
     * href="https://dashboard.lob.com/#/settings/editions" target="_blank"&gt;Print &amp; Mail Edition&lt;/a&gt;
     * to gain access. * `top_first_page` - (default) print address information at the top of your
     * provided first page * `insert_blank_page` - insert a blank address page at the beginning of
     * your file (you will be charged for the extra page) * `bottom_first_page_center` -
     * **(exclusive, deprecation planned within a few months)** print address information at the
     * bottom center of your provided first page * `bottom_first_page` - **(exclusive)** print
     * address information at the bottom of your provided first page
     * @return Returns the AddressPlacementEnum
     */
    @JsonGetter("address_placement")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public AddressPlacementEnum getAddressPlacement() {
        return addressPlacement;
    }

    /**
     * Setter for AddressPlacement.
     * Specifies the location of the address information that will show through the double-window
     * envelope. To see how this will impact your letter design, view our letter template. Some
     * values are exclusive to certain customers. Upgrade to the appropriate &lt;a
     * href="https://dashboard.lob.com/#/settings/editions" target="_blank"&gt;Print &amp; Mail Edition&lt;/a&gt;
     * to gain access. * `top_first_page` - (default) print address information at the top of your
     * provided first page * `insert_blank_page` - insert a blank address page at the beginning of
     * your file (you will be charged for the extra page) * `bottom_first_page_center` -
     * **(exclusive, deprecation planned within a few months)** print address information at the
     * bottom center of your provided first page * `bottom_first_page` - **(exclusive)** print
     * address information at the bottom of your provided first page
     * @param addressPlacement Value for AddressPlacementEnum
     */
    @JsonSetter("address_placement")
    public void setAddressPlacement(AddressPlacementEnum addressPlacement) {
        this.addressPlacement = addressPlacement;
    }

    /**
     * Getter for ReturnEnvelope.
     * @return Returns the ReturnEnvelopeReturned2
     */
    @JsonGetter("return_envelope")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public ReturnEnvelopeReturned2 getReturnEnvelope() {
        return returnEnvelope;
    }

    /**
     * Setter for ReturnEnvelope.
     * @param returnEnvelope Value for ReturnEnvelopeReturned2
     */
    @JsonSetter("return_envelope")
    public void setReturnEnvelope(ReturnEnvelopeReturned2 returnEnvelope) {
        this.returnEnvelope = returnEnvelope;
    }

    /**
     * Internal Getter for PerforatedPage.
     * Required if `return_envelope` is `true`. The number of the page that should be perforated for
     * use with the return envelope. Must be greater than or equal to `1`. The blank page added by
     * `address_placement=insert_blank_page` will be ignored when considering the perforated page
     * number. To see how perforation will impact your letter design, view our &lt;a
     * href="https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/letter_perf_template.pdf"
     * target="_blank"&gt;perforation guide&lt;/a&gt;.
     * @return Returns the Internal Integer
     */
    @JsonGetter("perforated_page")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetPerforatedPage() {
        return this.perforatedPage;
    }

    /**
     * Getter for PerforatedPage.
     * Required if `return_envelope` is `true`. The number of the page that should be perforated for
     * use with the return envelope. Must be greater than or equal to `1`. The blank page added by
     * `address_placement=insert_blank_page` will be ignored when considering the perforated page
     * number. To see how perforation will impact your letter design, view our &lt;a
     * href="https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/letter_perf_template.pdf"
     * target="_blank"&gt;perforation guide&lt;/a&gt;.
     * @return Returns the Integer
     */
    public Integer getPerforatedPage() {
        return OptionalNullable.getFrom(perforatedPage);
    }

    /**
     * Setter for PerforatedPage.
     * Required if `return_envelope` is `true`. The number of the page that should be perforated for
     * use with the return envelope. Must be greater than or equal to `1`. The blank page added by
     * `address_placement=insert_blank_page` will be ignored when considering the perforated page
     * number. To see how perforation will impact your letter design, view our &lt;a
     * href="https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/letter_perf_template.pdf"
     * target="_blank"&gt;perforation guide&lt;/a&gt;.
     * @param perforatedPage Value for Integer
     */
    @JsonSetter("perforated_page")
    public void setPerforatedPage(Integer perforatedPage) {
        this.perforatedPage = OptionalNullable.of(perforatedPage);
    }

    /**
     * UnSetter for PerforatedPage.
     * Required if `return_envelope` is `true`. The number of the page that should be perforated for
     * use with the return envelope. Must be greater than or equal to `1`. The blank page added by
     * `address_placement=insert_blank_page` will be ignored when considering the perforated page
     * number. To see how perforation will impact your letter design, view our &lt;a
     * href="https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/letter_perf_template.pdf"
     * target="_blank"&gt;perforation guide&lt;/a&gt;.
     */
    public void unsetPerforatedPage() {
        perforatedPage = null;
    }

    /**
     * Internal Getter for CustomEnvelope.
     * A nested custom envelope object containing more information about the custom envelope used or
     * `null` if a custom envelope was not used.
     * @return Returns the Internal CustomEnvelopeReturned
     */
    @JsonGetter("custom_envelope")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<CustomEnvelopeReturned> internalGetCustomEnvelope() {
        return this.customEnvelope;
    }

    /**
     * Getter for CustomEnvelope.
     * A nested custom envelope object containing more information about the custom envelope used or
     * `null` if a custom envelope was not used.
     * @return Returns the CustomEnvelopeReturned
     */
    public CustomEnvelopeReturned getCustomEnvelope() {
        return OptionalNullable.getFrom(customEnvelope);
    }

    /**
     * Setter for CustomEnvelope.
     * A nested custom envelope object containing more information about the custom envelope used or
     * `null` if a custom envelope was not used.
     * @param customEnvelope Value for CustomEnvelopeReturned
     */
    @JsonSetter("custom_envelope")
    public void setCustomEnvelope(CustomEnvelopeReturned customEnvelope) {
        this.customEnvelope = OptionalNullable.of(customEnvelope);
    }

    /**
     * UnSetter for CustomEnvelope.
     * A nested custom envelope object containing more information about the custom envelope used or
     * `null` if a custom envelope was not used.
     */
    public void unsetCustomEnvelope() {
        customEnvelope = null;
    }

    /**
     * Getter for To.
     * @return Returns the Address
     */
    @JsonGetter("to")
    public Address getTo() {
        return to;
    }

    /**
     * Setter for To.
     * @param to Value for Address
     */
    @JsonSetter("to")
    public void setTo(Address to) {
        this.to = to;
    }

    /**
     * Getter for Carrier.
     * @return Returns the String
     */
    @JsonGetter("carrier")
    public String getCarrier() {
        return carrier;
    }

    /**
     * Setter for Carrier.
     * @param carrier Value for String
     */
    @JsonSetter("carrier")
    private void setCarrier(String carrier) {
        this.carrier = carrier;
    }

    /**
     * Getter for Thumbnails.
     * @return Returns the List of Thumbnail
     */
    @JsonGetter("thumbnails")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<Thumbnail> getThumbnails() {
        return thumbnails;
    }

    /**
     * Setter for Thumbnails.
     * @param thumbnails Value for List of Thumbnail
     */
    @JsonSetter("thumbnails")
    public void setThumbnails(List<Thumbnail> thumbnails) {
        this.thumbnails = thumbnails;
    }

    /**
     * Getter for ExpectedDeliveryDate.
     * A date in YYYY-MM-DD format of the mailpiece's expected delivery date based on its
     * `send_date`.
     * @return Returns the LocalDate
     */
    @JsonGetter("expected_delivery_date")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = DateTimeHelper.SimpleDateSerializer.class)
    public LocalDate getExpectedDeliveryDate() {
        return expectedDeliveryDate;
    }

    /**
     * Setter for ExpectedDeliveryDate.
     * A date in YYYY-MM-DD format of the mailpiece's expected delivery date based on its
     * `send_date`.
     * @param expectedDeliveryDate Value for LocalDate
     */
    @JsonSetter("expected_delivery_date")
    @JsonDeserialize(using = DateTimeHelper.SimpleDateDeserializer.class)
    public void setExpectedDeliveryDate(LocalDate expectedDeliveryDate) {
        this.expectedDeliveryDate = expectedDeliveryDate;
    }

    /**
     * Getter for DateCreated.
     * A timestamp in ISO 8601 format of the date the resource was created.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("date_created")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getDateCreated() {
        return dateCreated;
    }

    /**
     * Setter for DateCreated.
     * A timestamp in ISO 8601 format of the date the resource was created.
     * @param dateCreated Value for LocalDateTime
     */
    @JsonSetter("date_created")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setDateCreated(LocalDateTime dateCreated) {
        this.dateCreated = dateCreated;
    }

    /**
     * Getter for DateModified.
     * A timestamp in ISO 8601 format of the date the resource was last modified.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("date_modified")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getDateModified() {
        return dateModified;
    }

    /**
     * Setter for DateModified.
     * A timestamp in ISO 8601 format of the date the resource was last modified.
     * @param dateModified Value for LocalDateTime
     */
    @JsonSetter("date_modified")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setDateModified(LocalDateTime dateModified) {
        this.dateModified = dateModified;
    }

    /**
     * Getter for Deleted.
     * Only returned if the resource has been successfully deleted.
     * @return Returns the Boolean
     */
    @JsonGetter("deleted")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getDeleted() {
        return deleted;
    }

    /**
     * Setter for Deleted.
     * Only returned if the resource has been successfully deleted.
     * @param deleted Value for Boolean
     */
    @JsonSetter("deleted")
    public void setDeleted(Boolean deleted) {
        this.deleted = deleted;
    }

    /**
     * Getter for From.
     * @return Returns the Address
     */
    @JsonGetter("from")
    public Address getFrom() {
        return from;
    }

    /**
     * Setter for From.
     * @param from Value for Address
     */
    @JsonSetter("from")
    public void setFrom(Address from) {
        this.from = from;
    }

    /**
     * Getter for Url.
     * A [signed link](#section/Asset-URLs) served over HTTPS. The link returned will expire in 30
     * days to prevent mis-sharing. Each time a GET request is initiated, a new signed URL will be
     * generated.
     * @return Returns the String
     */
    @JsonGetter("url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getUrl() {
        return url;
    }

    /**
     * Setter for Url.
     * A [signed link](#section/Asset-URLs) served over HTTPS. The link returned will expire in 30
     * days to prevent mis-sharing. Each time a GET request is initiated, a new signed URL will be
     * generated.
     * @param url Value for String
     */
    @JsonSetter("url")
    public void setUrl(String url) {
        this.url = url;
    }

    /**
     * Getter for Id.
     * Unique identifier prefixed with `ltr_`.
     * @return Returns the String
     */
    @JsonGetter("id")
    public String getId() {
        return id;
    }

    /**
     * Setter for Id.
     * Unique identifier prefixed with `ltr_`.
     * @param id Value for String
     */
    @JsonSetter("id")
    public void setId(String id) {
        this.id = id;
    }

    /**
     * Getter for TemplateId.
     * @return Returns the String
     */
    @JsonGetter("template_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getTemplateId() {
        return templateId;
    }

    /**
     * Setter for TemplateId.
     * @param templateId Value for String
     */
    @JsonSetter("template_id")
    public void setTemplateId(String templateId) {
        this.templateId = templateId;
    }

    /**
     * Getter for TemplateVersionId.
     * @return Returns the String
     */
    @JsonGetter("template_version_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getTemplateVersionId() {
        return templateVersionId;
    }

    /**
     * Setter for TemplateVersionId.
     * @param templateVersionId Value for String
     */
    @JsonSetter("template_version_id")
    public void setTemplateVersionId(String templateVersionId) {
        this.templateVersionId = templateVersionId;
    }

    /**
     * Internal Getter for CampaignId.
     * The unique ID of the associated campaign if the resource was generated from a campaign.
     * @return Returns the Internal String
     */
    @JsonGetter("campaign_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCampaignId() {
        return this.campaignId;
    }

    /**
     * Getter for CampaignId.
     * The unique ID of the associated campaign if the resource was generated from a campaign.
     * @return Returns the String
     */
    public String getCampaignId() {
        return OptionalNullable.getFrom(campaignId);
    }

    /**
     * Setter for CampaignId.
     * The unique ID of the associated campaign if the resource was generated from a campaign.
     * @param campaignId Value for String
     */
    @JsonSetter("campaign_id")
    public void setCampaignId(String campaignId) {
        this.campaignId = OptionalNullable.of(campaignId);
    }

    /**
     * UnSetter for CampaignId.
     * The unique ID of the associated campaign if the resource was generated from a campaign.
     */
    public void unsetCampaignId() {
        campaignId = null;
    }

    /**
     * Getter for UseType.
     * The use type for each mailpiece. Can be one of marketing, operational, or null. Null use_type
     * is only allowed if an account default use_type is selected in Account Settings. For more
     * information on use_type, see our [Help Center
     * article](https://help.lob.com/print-and-mail/building-a-mail-strategy/managing-mail-settings/declaring-mail-use-type).
     * @return Returns the LtrUseTypeEnum
     */
    @JsonGetter("use_type")
    public LtrUseTypeEnum getUseType() {
        return useType;
    }

    /**
     * Setter for UseType.
     * The use type for each mailpiece. Can be one of marketing, operational, or null. Null use_type
     * is only allowed if an account default use_type is selected in Account Settings. For more
     * information on use_type, see our [Help Center
     * article](https://help.lob.com/print-and-mail/building-a-mail-strategy/managing-mail-settings/declaring-mail-use-type).
     * @param useType Value for LtrUseTypeEnum
     */
    @JsonSetter("use_type")
    public void setUseType(LtrUseTypeEnum useType) {
        this.useType = useType;
    }

    /**
     * Getter for Fsc.
     * This is in beta. Contact support{@literal @}lob.com or your account contact to learn more. Not available
     * for `A4` letter size.
     * @return Returns the Boolean
     */
    @JsonGetter("fsc")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getFsc() {
        return fsc;
    }

    /**
     * Setter for Fsc.
     * This is in beta. Contact support{@literal @}lob.com or your account contact to learn more. Not available
     * for `A4` letter size.
     * @param fsc Value for Boolean
     */
    @JsonSetter("fsc")
    public void setFsc(Boolean fsc) {
        this.fsc = fsc;
    }

    /**
     * Getter for Status.
     * @return Returns the TheStatusOfTheLetterEnum
     */
    @JsonGetter("status")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public TheStatusOfTheLetterEnum getStatus() {
        return status;
    }

    /**
     * Setter for Status.
     * @param status Value for TheStatusOfTheLetterEnum
     */
    @JsonSetter("status")
    public void setStatus(TheStatusOfTheLetterEnum status) {
        this.status = status;
    }

    /**
     * Internal Getter for FailureReason.
     * A string describing the reason for failure if the letter failed to render.
     * @return Returns the Internal String
     */
    @JsonGetter("failure_reason")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetFailureReason() {
        return this.failureReason;
    }

    /**
     * Getter for FailureReason.
     * A string describing the reason for failure if the letter failed to render.
     * @return Returns the String
     */
    public String getFailureReason() {
        return OptionalNullable.getFrom(failureReason);
    }

    /**
     * Setter for FailureReason.
     * A string describing the reason for failure if the letter failed to render.
     * @param failureReason Value for String
     */
    @JsonSetter("failure_reason")
    public void setFailureReason(String failureReason) {
        this.failureReason = OptionalNullable.of(failureReason);
    }

    /**
     * UnSetter for FailureReason.
     * A string describing the reason for failure if the letter failed to render.
     */
    public void unsetFailureReason() {
        failureReason = null;
    }

    /**
     * Getter for Object.
     * Value is resource type.
     * @return Returns the Object8Enum
     */
    @JsonGetter("object")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Object8Enum getObject() {
        return object;
    }

    /**
     * Setter for Object.
     * Value is resource type.
     * @param object Value for Object8Enum
     */
    @JsonSetter("object")
    public void setObject(Object8Enum object) {
        this.object = object;
    }

    /**
     * Converts this Registered into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Registered [" + "extraService=" + extraService + ", color=" + color + ", to=" + to
                + ", carrier=" + carrier + ", from=" + from + ", id=" + id + ", useType=" + useType
                + ", trackingNumber=" + trackingNumber + ", trackingEvents=" + trackingEvents
                + ", returnAddress=" + returnAddress + ", description=" + description
                + ", metadata=" + metadata + ", mergeVariables=" + mergeVariables + ", sendDate="
                + sendDate + ", mailType=" + mailType + ", doubleSided=" + doubleSided
                + ", addressPlacement=" + addressPlacement + ", returnEnvelope=" + returnEnvelope
                + ", perforatedPage=" + perforatedPage + ", customEnvelope=" + customEnvelope
                + ", thumbnails=" + thumbnails + ", expectedDeliveryDate=" + expectedDeliveryDate
                + ", dateCreated=" + dateCreated + ", dateModified=" + dateModified + ", deleted="
                + deleted + ", url=" + url + ", templateId=" + templateId + ", templateVersionId="
                + templateVersionId + ", campaignId=" + campaignId + ", fsc=" + fsc + ", status="
                + status + ", failureReason=" + failureReason + ", object=" + object + "]";
    }

    /**
     * Builds a new {@link Registered.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Registered.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(extraService, color, to, carrier, from, id, useType)
                .trackingEvents(getTrackingEvents())
                .returnAddress(getReturnAddress())
                .metadata(getMetadata())
                .sendDate(getSendDate())
                .mailType(getMailType())
                .doubleSided(getDoubleSided())
                .addressPlacement(getAddressPlacement())
                .returnEnvelope(getReturnEnvelope())
                .thumbnails(getThumbnails())
                .expectedDeliveryDate(getExpectedDeliveryDate())
                .dateCreated(getDateCreated())
                .dateModified(getDateModified())
                .deleted(getDeleted())
                .url(getUrl())
                .templateId(getTemplateId())
                .templateVersionId(getTemplateVersionId())
                .fsc(getFsc())
                .status(getStatus())
                .object(getObject());
        builder.trackingNumber = internalGetTrackingNumber();
        builder.description = internalGetDescription();
        builder.mergeVariables = internalGetMergeVariables();
        builder.perforatedPage = internalGetPerforatedPage();
        builder.customEnvelope = internalGetCustomEnvelope();
        builder.campaignId = internalGetCampaignId();
        builder.failureReason = internalGetFailureReason();
        return builder;
    }

    /**
     * Class to build instances of {@link Registered}.
     */
    public static class Builder {
        private String extraService = "registered";
        private boolean color;
        private Address to;
        private String carrier = "USPS";
        private Address from;
        private String id;
        private LtrUseTypeEnum useType;
        private OptionalNullable<String> trackingNumber;
        private List<TrackingEventNormal> trackingEvents;
        private ReturnAddress returnAddress;
        private OptionalNullable<String> description;
        private Map<String, String> metadata;
        private OptionalNullable<Object> mergeVariables;
        private SendDate sendDate;
        private MailTypeEnum mailType = MailTypeEnum.USPS_FIRST_CLASS;
        private Boolean doubleSided = true;
        private AddressPlacementEnum addressPlacement = AddressPlacementEnum.TOP_FIRST_PAGE;
        private ReturnEnvelopeReturned2 returnEnvelope;
        private OptionalNullable<Integer> perforatedPage;
        private OptionalNullable<CustomEnvelopeReturned> customEnvelope;
        private List<Thumbnail> thumbnails;
        private LocalDate expectedDeliveryDate;
        private LocalDateTime dateCreated;
        private LocalDateTime dateModified;
        private Boolean deleted;
        private String url;
        private String templateId;
        private String templateVersionId;
        private OptionalNullable<String> campaignId;
        private Boolean fsc = false;
        private TheStatusOfTheLetterEnum status;
        private OptionalNullable<String> failureReason;
        private Object8Enum object = Object8Enum.LETTER;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  extraService  String value for extraService.
         * @param  color  boolean value for color.
         * @param  to  Address value for to.
         * @param  carrier  String value for carrier.
         * @param  from  Address value for from.
         * @param  id  String value for id.
         * @param  useType  LtrUseTypeEnum value for useType.
         */
        public Builder(String extraService, boolean color, Address to, String carrier, Address from,
                String id, LtrUseTypeEnum useType) {
            this.extraService = extraService;
            this.color = color;
            this.to = to;
            this.carrier = carrier;
            this.from = from;
            this.id = id;
            this.useType = useType;
        }

        /**
         * Setter for extraService.
         * @param  extraService  String value for extraService.
         * @return Builder
         */
        public Builder extraService(String extraService) {
            this.extraService = extraService;
            return this;
        }

        /**
         * Setter for color.
         * @param  color  boolean value for color.
         * @return Builder
         */
        public Builder color(boolean color) {
            this.color = color;
            return this;
        }

        /**
         * Setter for to.
         * @param  to  Address value for to.
         * @return Builder
         */
        public Builder to(Address to) {
            this.to = to;
            return this;
        }

        /**
         * Setter for carrier.
         * @param  carrier  String value for carrier.
         * @return Builder
         */
        public Builder carrier(String carrier) {
            this.carrier = carrier;
            return this;
        }

        /**
         * Setter for from.
         * @param  from  Address value for from.
         * @return Builder
         */
        public Builder from(Address from) {
            this.from = from;
            return this;
        }

        /**
         * Setter for id.
         * @param  id  String value for id.
         * @return Builder
         */
        public Builder id(String id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for useType.
         * @param  useType  LtrUseTypeEnum value for useType.
         * @return Builder
         */
        public Builder useType(LtrUseTypeEnum useType) {
            this.useType = useType;
            return this;
        }

        /**
         * Setter for trackingNumber.
         * @param  trackingNumber  String value for trackingNumber.
         * @return Builder
         */
        public Builder trackingNumber(String trackingNumber) {
            this.trackingNumber = OptionalNullable.of(trackingNumber);
            return this;
        }

        /**
         * UnSetter for trackingNumber.
         * @return Builder
         */
        public Builder unsetTrackingNumber() {
            trackingNumber = null;
            return this;
        }

        /**
         * Setter for trackingEvents.
         * @param  trackingEvents  List of TrackingEventNormal value for trackingEvents.
         * @return Builder
         */
        public Builder trackingEvents(List<TrackingEventNormal> trackingEvents) {
            this.trackingEvents = trackingEvents;
            return this;
        }

        /**
         * Setter for returnAddress.
         * @param  returnAddress  ReturnAddress value for returnAddress.
         * @return Builder
         */
        public Builder returnAddress(ReturnAddress returnAddress) {
            this.returnAddress = returnAddress;
            return this;
        }

        /**
         * Setter for description.
         * @param  description  String value for description.
         * @return Builder
         */
        public Builder description(String description) {
            this.description = OptionalNullable.of(description);
            return this;
        }

        /**
         * UnSetter for description.
         * @return Builder
         */
        public Builder unsetDescription() {
            description = null;
            return this;
        }

        /**
         * Setter for metadata.
         * @param  metadata  Map of String, value for metadata.
         * @return Builder
         */
        public Builder metadata(Map<String, String> metadata) {
            this.metadata = metadata;
            return this;
        }

        /**
         * Setter for mergeVariables.
         * @param  mergeVariables  Object value for mergeVariables.
         * @return Builder
         */
        public Builder mergeVariables(Object mergeVariables) {
            this.mergeVariables = OptionalNullable.of(mergeVariables);
            return this;
        }

        /**
         * UnSetter for mergeVariables.
         * @return Builder
         */
        public Builder unsetMergeVariables() {
            mergeVariables = null;
            return this;
        }

        /**
         * Setter for sendDate.
         * @param  sendDate  SendDate value for sendDate.
         * @return Builder
         */
        public Builder sendDate(SendDate sendDate) {
            this.sendDate = sendDate;
            return this;
        }

        /**
         * Setter for mailType.
         * @param  mailType  MailTypeEnum value for mailType.
         * @return Builder
         */
        public Builder mailType(MailTypeEnum mailType) {
            this.mailType = mailType;
            return this;
        }

        /**
         * Setter for doubleSided.
         * @param  doubleSided  Boolean value for doubleSided.
         * @return Builder
         */
        public Builder doubleSided(Boolean doubleSided) {
            this.doubleSided = doubleSided;
            return this;
        }

        /**
         * Setter for addressPlacement.
         * @param  addressPlacement  AddressPlacementEnum value for addressPlacement.
         * @return Builder
         */
        public Builder addressPlacement(AddressPlacementEnum addressPlacement) {
            this.addressPlacement = addressPlacement;
            return this;
        }

        /**
         * Setter for returnEnvelope.
         * @param  returnEnvelope  ReturnEnvelopeReturned2 value for returnEnvelope.
         * @return Builder
         */
        public Builder returnEnvelope(ReturnEnvelopeReturned2 returnEnvelope) {
            this.returnEnvelope = returnEnvelope;
            return this;
        }

        /**
         * Setter for perforatedPage.
         * @param  perforatedPage  Integer value for perforatedPage.
         * @return Builder
         */
        public Builder perforatedPage(Integer perforatedPage) {
            this.perforatedPage = OptionalNullable.of(perforatedPage);
            return this;
        }

        /**
         * UnSetter for perforatedPage.
         * @return Builder
         */
        public Builder unsetPerforatedPage() {
            perforatedPage = null;
            return this;
        }

        /**
         * Setter for customEnvelope.
         * @param  customEnvelope  CustomEnvelopeReturned value for customEnvelope.
         * @return Builder
         */
        public Builder customEnvelope(CustomEnvelopeReturned customEnvelope) {
            this.customEnvelope = OptionalNullable.of(customEnvelope);
            return this;
        }

        /**
         * UnSetter for customEnvelope.
         * @return Builder
         */
        public Builder unsetCustomEnvelope() {
            customEnvelope = null;
            return this;
        }

        /**
         * Setter for thumbnails.
         * @param  thumbnails  List of Thumbnail value for thumbnails.
         * @return Builder
         */
        public Builder thumbnails(List<Thumbnail> thumbnails) {
            this.thumbnails = thumbnails;
            return this;
        }

        /**
         * Setter for expectedDeliveryDate.
         * @param  expectedDeliveryDate  LocalDate value for expectedDeliveryDate.
         * @return Builder
         */
        public Builder expectedDeliveryDate(LocalDate expectedDeliveryDate) {
            this.expectedDeliveryDate = expectedDeliveryDate;
            return this;
        }

        /**
         * Setter for dateCreated.
         * @param  dateCreated  LocalDateTime value for dateCreated.
         * @return Builder
         */
        public Builder dateCreated(LocalDateTime dateCreated) {
            this.dateCreated = dateCreated;
            return this;
        }

        /**
         * Setter for dateModified.
         * @param  dateModified  LocalDateTime value for dateModified.
         * @return Builder
         */
        public Builder dateModified(LocalDateTime dateModified) {
            this.dateModified = dateModified;
            return this;
        }

        /**
         * Setter for deleted.
         * @param  deleted  Boolean value for deleted.
         * @return Builder
         */
        public Builder deleted(Boolean deleted) {
            this.deleted = deleted;
            return this;
        }

        /**
         * Setter for url.
         * @param  url  String value for url.
         * @return Builder
         */
        public Builder url(String url) {
            this.url = url;
            return this;
        }

        /**
         * Setter for templateId.
         * @param  templateId  String value for templateId.
         * @return Builder
         */
        public Builder templateId(String templateId) {
            this.templateId = templateId;
            return this;
        }

        /**
         * Setter for templateVersionId.
         * @param  templateVersionId  String value for templateVersionId.
         * @return Builder
         */
        public Builder templateVersionId(String templateVersionId) {
            this.templateVersionId = templateVersionId;
            return this;
        }

        /**
         * Setter for campaignId.
         * @param  campaignId  String value for campaignId.
         * @return Builder
         */
        public Builder campaignId(String campaignId) {
            this.campaignId = OptionalNullable.of(campaignId);
            return this;
        }

        /**
         * UnSetter for campaignId.
         * @return Builder
         */
        public Builder unsetCampaignId() {
            campaignId = null;
            return this;
        }

        /**
         * Setter for fsc.
         * @param  fsc  Boolean value for fsc.
         * @return Builder
         */
        public Builder fsc(Boolean fsc) {
            this.fsc = fsc;
            return this;
        }

        /**
         * Setter for status.
         * @param  status  TheStatusOfTheLetterEnum value for status.
         * @return Builder
         */
        public Builder status(TheStatusOfTheLetterEnum status) {
            this.status = status;
            return this;
        }

        /**
         * Setter for failureReason.
         * @param  failureReason  String value for failureReason.
         * @return Builder
         */
        public Builder failureReason(String failureReason) {
            this.failureReason = OptionalNullable.of(failureReason);
            return this;
        }

        /**
         * UnSetter for failureReason.
         * @return Builder
         */
        public Builder unsetFailureReason() {
            failureReason = null;
            return this;
        }

        /**
         * Setter for object.
         * @param  object  Object8Enum value for object.
         * @return Builder
         */
        public Builder object(Object8Enum object) {
            this.object = object;
            return this;
        }

        /**
         * Builds a new {@link Registered} object using the set fields.
         * @return {@link Registered}
         */
        public Registered build() {
            return new Registered(extraService, color, to, carrier, from, id, useType,
                    trackingNumber, trackingEvents, returnAddress, description, metadata,
                    mergeVariables, sendDate, mailType, doubleSided, addressPlacement,
                    returnEnvelope, perforatedPage, customEnvelope, thumbnails,
                    expectedDeliveryDate, dateCreated, dateModified, deleted, url, templateId,
                    templateVersionId, campaignId, fsc, status, failureReason, object);
        }
    }
}
