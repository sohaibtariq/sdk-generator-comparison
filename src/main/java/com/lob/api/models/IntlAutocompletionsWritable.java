/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.lob.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;

/**
 * This is a model class for IntlAutocompletionsWritable type.
 */
public class IntlAutocompletionsWritable {
    private String addressPrefix;
    private String city;
    private String state;
    private String zipCode;
    private CountryExtendedEnum country;
    private Boolean geoIpSort;

    /**
     * Default constructor.
     */
    public IntlAutocompletionsWritable() {
    }

    /**
     * Initialization constructor.
     * @param  addressPrefix  String value for addressPrefix.
     * @param  country  CountryExtendedEnum value for country.
     * @param  city  String value for city.
     * @param  state  String value for state.
     * @param  zipCode  String value for zipCode.
     * @param  geoIpSort  Boolean value for geoIpSort.
     */
    public IntlAutocompletionsWritable(
            String addressPrefix,
            CountryExtendedEnum country,
            String city,
            String state,
            String zipCode,
            Boolean geoIpSort) {
        this.addressPrefix = addressPrefix;
        this.city = city;
        this.state = state;
        this.zipCode = zipCode;
        this.country = country;
        this.geoIpSort = geoIpSort;
    }

    /**
     * Getter for AddressPrefix.
     * Only accepts numbers and street names in an alphanumeric format.
     * @return Returns the String
     */
    @JsonGetter("address_prefix")
    public String getAddressPrefix() {
        return addressPrefix;
    }

    /**
     * Setter for AddressPrefix.
     * Only accepts numbers and street names in an alphanumeric format.
     * @param addressPrefix Value for String
     */
    @JsonSetter("address_prefix")
    public void setAddressPrefix(String addressPrefix) {
        this.addressPrefix = addressPrefix;
    }

    /**
     * Getter for City.
     * An optional city input used to filter suggestions. Case insensitive and does not match
     * partial abbreviations.
     * @return Returns the String
     */
    @JsonGetter("city")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getCity() {
        return city;
    }

    /**
     * Setter for City.
     * An optional city input used to filter suggestions. Case insensitive and does not match
     * partial abbreviations.
     * @param city Value for String
     */
    @JsonSetter("city")
    public void setCity(String city) {
        this.city = city;
    }

    /**
     * Getter for State.
     * An optional state input used to filter suggestions. Case insensitive and does not match
     * partial abbreviations.
     * @return Returns the String
     */
    @JsonGetter("state")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getState() {
        return state;
    }

    /**
     * Setter for State.
     * An optional state input used to filter suggestions. Case insensitive and does not match
     * partial abbreviations.
     * @param state Value for String
     */
    @JsonSetter("state")
    public void setState(String state) {
        this.state = state;
    }

    /**
     * Getter for ZipCode.
     * An optional Zip Code input used to filter suggestions. Matches partial entries.
     * @return Returns the String
     */
    @JsonGetter("zip_code")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getZipCode() {
        return zipCode;
    }

    /**
     * Setter for ZipCode.
     * An optional Zip Code input used to filter suggestions. Matches partial entries.
     * @param zipCode Value for String
     */
    @JsonSetter("zip_code")
    public void setZipCode(String zipCode) {
        this.zipCode = zipCode;
    }

    /**
     * Getter for Country.
     * Must be a 2 letter country short-name code (ISO 3166). Does not accept `US`, `AS`, `PR`,
     * `FM`, `GU`, `MH`, `MP`, `PW`, or `VI`. For these addresses, please use the US verification
     * API. Also does not accept `PS`, which is not currently supported.
     * @return Returns the CountryExtendedEnum
     */
    @JsonGetter("country")
    public CountryExtendedEnum getCountry() {
        return country;
    }

    /**
     * Setter for Country.
     * Must be a 2 letter country short-name code (ISO 3166). Does not accept `US`, `AS`, `PR`,
     * `FM`, `GU`, `MH`, `MP`, `PW`, or `VI`. For these addresses, please use the US verification
     * API. Also does not accept `PS`, which is not currently supported.
     * @param country Value for CountryExtendedEnum
     */
    @JsonSetter("country")
    public void setCountry(CountryExtendedEnum country) {
        this.country = country;
    }

    /**
     * Getter for GeoIpSort.
     * If `true`, sort suggestions by proximity to the IP set in the `X-Forwarded-For` header.
     * @return Returns the Boolean
     */
    @JsonGetter("geo_ip_sort")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getGeoIpSort() {
        return geoIpSort;
    }

    /**
     * Setter for GeoIpSort.
     * If `true`, sort suggestions by proximity to the IP set in the `X-Forwarded-For` header.
     * @param geoIpSort Value for Boolean
     */
    @JsonSetter("geo_ip_sort")
    public void setGeoIpSort(Boolean geoIpSort) {
        this.geoIpSort = geoIpSort;
    }

    /**
     * Converts this IntlAutocompletionsWritable into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "IntlAutocompletionsWritable [" + "addressPrefix=" + addressPrefix + ", country="
                + country + ", city=" + city + ", state=" + state + ", zipCode=" + zipCode
                + ", geoIpSort=" + geoIpSort + "]";
    }

    /**
     * Builds a new {@link IntlAutocompletionsWritable.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link IntlAutocompletionsWritable.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(addressPrefix, country)
                .city(getCity())
                .state(getState())
                .zipCode(getZipCode())
                .geoIpSort(getGeoIpSort());
        return builder;
    }

    /**
     * Class to build instances of {@link IntlAutocompletionsWritable}.
     */
    public static class Builder {
        private String addressPrefix;
        private CountryExtendedEnum country;
        private String city;
        private String state;
        private String zipCode;
        private Boolean geoIpSort;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  addressPrefix  String value for addressPrefix.
         * @param  country  CountryExtendedEnum value for country.
         */
        public Builder(String addressPrefix, CountryExtendedEnum country) {
            this.addressPrefix = addressPrefix;
            this.country = country;
        }

        /**
         * Setter for addressPrefix.
         * @param  addressPrefix  String value for addressPrefix.
         * @return Builder
         */
        public Builder addressPrefix(String addressPrefix) {
            this.addressPrefix = addressPrefix;
            return this;
        }

        /**
         * Setter for country.
         * @param  country  CountryExtendedEnum value for country.
         * @return Builder
         */
        public Builder country(CountryExtendedEnum country) {
            this.country = country;
            return this;
        }

        /**
         * Setter for city.
         * @param  city  String value for city.
         * @return Builder
         */
        public Builder city(String city) {
            this.city = city;
            return this;
        }

        /**
         * Setter for state.
         * @param  state  String value for state.
         * @return Builder
         */
        public Builder state(String state) {
            this.state = state;
            return this;
        }

        /**
         * Setter for zipCode.
         * @param  zipCode  String value for zipCode.
         * @return Builder
         */
        public Builder zipCode(String zipCode) {
            this.zipCode = zipCode;
            return this;
        }

        /**
         * Setter for geoIpSort.
         * @param  geoIpSort  Boolean value for geoIpSort.
         * @return Builder
         */
        public Builder geoIpSort(Boolean geoIpSort) {
            this.geoIpSort = geoIpSort;
            return this;
        }

        /**
         * Builds a new {@link IntlAutocompletionsWritable} object using the set fields.
         * @return {@link IntlAutocompletionsWritable}
         */
        public IntlAutocompletionsWritable build() {
            return new IntlAutocompletionsWritable(addressPrefix, country, city, state, zipCode,
                    geoIpSort);
        }
    }
}
