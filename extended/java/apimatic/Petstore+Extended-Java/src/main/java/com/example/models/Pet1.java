/*
 * PetstoreExtendedLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.example.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import java.util.List;

/**
 * This is a model class for Pet1 type.
 */
public class Pet1 {
    private Long id;
    private String name;
    private Category category;
    private List<String> photoUrls;
    private List<Tag> tags;
    private PetStatusEnum status;

    /**
     * Default constructor.
     */
    public Pet1() {
    }

    /**
     * Initialization constructor.
     * @param  id  Long value for id.
     * @param  name  String value for name.
     * @param  category  Category value for category.
     * @param  photoUrls  List of String value for photoUrls.
     * @param  tags  List of Tag value for tags.
     * @param  status  PetStatusEnum value for status.
     */
    public Pet1(
            Long id,
            String name,
            Category category,
            List<String> photoUrls,
            List<Tag> tags,
            PetStatusEnum status) {
        this.id = id;
        this.name = name;
        this.category = category;
        this.photoUrls = photoUrls;
        this.tags = tags;
        this.status = status;
    }

    /**
     * Getter for Id.
     * @return Returns the Long
     */
    @JsonGetter("id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Long getId() {
        return id;
    }

    /**
     * Setter for Id.
     * @param id Value for Long
     */
    @JsonSetter("id")
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Getter for Name.
     * @return Returns the String
     */
    @JsonGetter("name")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getName() {
        return name;
    }

    /**
     * Setter for Name.
     * @param name Value for String
     */
    @JsonSetter("name")
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Getter for Category.
     * details of a cateogry object
     * @return Returns the Category
     */
    @JsonGetter("category")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Category getCategory() {
        return category;
    }

    /**
     * Setter for Category.
     * details of a cateogry object
     * @param category Value for Category
     */
    @JsonSetter("category")
    public void setCategory(Category category) {
        this.category = category;
    }

    /**
     * Getter for PhotoUrls.
     * collection of photo urls
     * @return Returns the List of String
     */
    @JsonGetter("photoUrls")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<String> getPhotoUrls() {
        return photoUrls;
    }

    /**
     * Setter for PhotoUrls.
     * collection of photo urls
     * @param photoUrls Value for List of String
     */
    @JsonSetter("photoUrls")
    public void setPhotoUrls(List<String> photoUrls) {
        this.photoUrls = photoUrls;
    }

    /**
     * Getter for Tags.
     * collection of pet tag objects
     * @return Returns the List of Tag
     */
    @JsonGetter("tags")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<Tag> getTags() {
        return tags;
    }

    /**
     * Setter for Tags.
     * collection of pet tag objects
     * @param tags Value for List of Tag
     */
    @JsonSetter("tags")
    public void setTags(List<Tag> tags) {
        this.tags = tags;
    }

    /**
     * Getter for Status.
     * pet status in the store
     * @return Returns the PetStatusEnum
     */
    @JsonGetter("status")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public PetStatusEnum getStatus() {
        return status;
    }

    /**
     * Setter for Status.
     * pet status in the store
     * @param status Value for PetStatusEnum
     */
    @JsonSetter("status")
    public void setStatus(PetStatusEnum status) {
        this.status = status;
    }

    /**
     * Converts this Pet1 into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Pet1 [" + "id=" + id + ", name=" + name + ", category=" + category + ", photoUrls="
                + photoUrls + ", tags=" + tags + ", status=" + status + "]";
    }

    /**
     * Builds a new {@link Pet1.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Pet1.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .id(getId())
                .name(getName())
                .category(getCategory())
                .photoUrls(getPhotoUrls())
                .tags(getTags())
                .status(getStatus());
        return builder;
    }

    /**
     * Class to build instances of {@link Pet1}.
     */
    public static class Builder {
        private Long id;
        private String name;
        private Category category;
        private List<String> photoUrls;
        private List<Tag> tags;
        private PetStatusEnum status;



        /**
         * Setter for id.
         * @param  id  Long value for id.
         * @return Builder
         */
        public Builder id(Long id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for name.
         * @param  name  String value for name.
         * @return Builder
         */
        public Builder name(String name) {
            this.name = name;
            return this;
        }

        /**
         * Setter for category.
         * @param  category  Category value for category.
         * @return Builder
         */
        public Builder category(Category category) {
            this.category = category;
            return this;
        }

        /**
         * Setter for photoUrls.
         * @param  photoUrls  List of String value for photoUrls.
         * @return Builder
         */
        public Builder photoUrls(List<String> photoUrls) {
            this.photoUrls = photoUrls;
            return this;
        }

        /**
         * Setter for tags.
         * @param  tags  List of Tag value for tags.
         * @return Builder
         */
        public Builder tags(List<Tag> tags) {
            this.tags = tags;
            return this;
        }

        /**
         * Setter for status.
         * @param  status  PetStatusEnum value for status.
         * @return Builder
         */
        public Builder status(PetStatusEnum status) {
            this.status = status;
            return this;
        }

        /**
         * Builds a new {@link Pet1} object using the set fields.
         * @return {@link Pet1}
         */
        public Pet1 build() {
            return new Pet1(id, name, category, photoUrls, tags, status);
        }
    }
}
