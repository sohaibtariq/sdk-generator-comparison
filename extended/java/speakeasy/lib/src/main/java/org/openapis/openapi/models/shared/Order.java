/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;

/**
 * Order - an order object for the story
 */

public class Order {
    /**
     * unique identifier for an order
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public Long id;

    public Order withId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * unique identifier for pet as part of an order
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("petId")
    public Long petId;

    public Order withPetId(Long petId) {
        this.petId = petId;
        return this;
    }
    
    /**
     * total number of pets in order
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quantity")
    public Integer quantity;

    public Order withQuantity(Integer quantity) {
        this.quantity = quantity;
        return this;
    }
    
    /**
     * order date for pet
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("shipDate")
    public OffsetDateTime shipDate;

    public Order withShipDate(OffsetDateTime shipDate) {
        this.shipDate = shipDate;
        return this;
    }
    
    /**
     * Order Status
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public OrderStatus status;

    public Order withStatus(OrderStatus status) {
        this.status = status;
        return this;
    }
    
    /**
     * completion status for an order
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("complete")
    public Boolean complete;

    public Order withComplete(Boolean complete) {
        this.complete = complete;
        return this;
    }
    
    public Order(){}
}
