/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

/**
 * Everything about your Pets
 * http://swagger.io - Find out more
 */
public class Pet {
	
	private SDKConfiguration sdkConfiguration;

	public Pet(SDKConfiguration sdkConfiguration) {
		this.sdkConfiguration = sdkConfiguration;
	}

    /**
     * Add a new pet to the store
     * Add a new pet to the store
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.AddPetResponse addPet(org.openapis.openapi.models.shared.Pet request) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/pet");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);
        
        HTTPClient client = this.sdkConfiguration.securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");
        
        org.openapis.openapi.models.operations.AddPetResponse res = new org.openapis.openapi.models.operations.AddPetResponse(contentType, httpRes.statusCode(), httpRes) {{
            pet = null;
        }};
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Pet out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Pet.class);
                res.pet = out;
            }
        }
        else if (httpRes.statusCode() == 405) {
        }

        return res;
    }

    /**
     * Update an existing pet
     * Update an existing pet by Id
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdatePetResponse updatePet(org.openapis.openapi.models.shared.RequestBodiePet request) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/pet");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "request", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);
        
        HTTPClient client = this.sdkConfiguration.securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");
        
        org.openapis.openapi.models.operations.UpdatePetResponse res = new org.openapis.openapi.models.operations.UpdatePetResponse(contentType, httpRes.statusCode(), httpRes) {{
            pet = null;
        }};
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Pet out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Pet.class);
                res.pet = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 404 || httpRes.statusCode() == 405) {
        }

        return res;
    }

    /**
     * Finds Pets by status
     * Multiple status values can be provided with comma separated strings
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FindPetsByStatusResponse findPetsByStatus() throws Exception {
        return this.findPetsByStatus(null);
    }

    /**
     * Finds Pets by status
     * Multiple status values can be provided with comma separated strings
     * @param status pet status in the store
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.FindPetsByStatusResponse findPetsByStatus(org.openapis.openapi.models.shared.PetStatus status) throws Exception {
        org.openapis.openapi.models.operations.FindPetsByStatusRequest request = new org.openapis.openapi.models.operations.FindPetsByStatusRequest();
        request.status=status;
        
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/pet/findByStatus");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.FindPetsByStatusRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this.sdkConfiguration.securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");
        
        org.openapis.openapi.models.operations.FindPetsByStatusResponse res = new org.openapis.openapi.models.operations.FindPetsByStatusResponse(contentType, httpRes.statusCode(), httpRes) {{
            pets = null;
        }};
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Pet[] out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Pet[].class);
                res.pets = out;
            }
        }
        else if (httpRes.statusCode() == 400) {
        }

        return res;
    }

    /**
     * Deletes a pet
     * delete a pet based on a unique id
     * @param petId Pet id to delete
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.DeletePetResponse deletePet(Long petId) throws Exception {
        org.openapis.openapi.models.operations.DeletePetRequest request = new org.openapis.openapi.models.operations.DeletePetRequest(petId);
        
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.DeletePetRequest.class, baseUrl, "/pet/{petId}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);

        req.addHeader("Accept", "*/*");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);
        
        HTTPClient client = this.sdkConfiguration.securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");
        
        org.openapis.openapi.models.operations.DeletePetResponse res = new org.openapis.openapi.models.operations.DeletePetResponse(contentType, httpRes.statusCode(), httpRes) {{
        }};
        
        if (httpRes.statusCode() == 201 || httpRes.statusCode() == 400) {
        }

        return res;
    }

    /**
     * Find pet by ID
     * Returns a single pet
     * @param security the security details to use for authentication
     * @param petId ID of pet to return
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.GetPetByIdResponse getPetById(org.openapis.openapi.models.operations.GetPetByIdSecurity security, Long petId) throws Exception {
        org.openapis.openapi.models.operations.GetPetByIdRequest request = new org.openapis.openapi.models.operations.GetPetByIdRequest(petId);
        
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.GetPetByIdRequest.class, baseUrl, "/pet/{petId}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);
        
        HTTPClient client = org.openapis.openapi.utils.Utils.configureSecurityClient(this.sdkConfiguration.defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");
        
        org.openapis.openapi.models.operations.GetPetByIdResponse res = new org.openapis.openapi.models.operations.GetPetByIdResponse(contentType, httpRes.statusCode(), httpRes) {{
            pet = null;
        }};
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Pet out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Pet.class);
                res.pet = out;
            }
        }
        else if (httpRes.statusCode() == 400 || httpRes.statusCode() == 404) {
        }

        return res;
    }

    /**
     * Updates a pet in the store with form data
     * update a pet using form data
     * @param petId ID of pet that needs to be updated
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdatePetWithFormResponse updatePetWithForm(Long petId) throws Exception {
        return this.updatePetWithForm(petId, null, null);
    }

    /**
     * Updates a pet in the store with form data
     * update a pet using form data
     * @param petId ID of pet that needs to be updated
     * @param name Name of pet that needs to be updated
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdatePetWithFormResponse updatePetWithForm(Long petId, String name) throws Exception {
        return this.updatePetWithForm(petId, name, null);
    }

    /**
     * Updates a pet in the store with form data
     * update a pet using form data
     * @param petId ID of pet that needs to be updated
     * @param name Name of pet that needs to be updated
     * @param status Status of pet that needs to be updated
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UpdatePetWithFormResponse updatePetWithForm(Long petId, String name, String status) throws Exception {
        org.openapis.openapi.models.operations.UpdatePetWithFormRequest request = new org.openapis.openapi.models.operations.UpdatePetWithFormRequest(petId);
        request.name=name;
        request.status=status;
        
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UpdatePetWithFormRequest.class, baseUrl, "/pet/{petId}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.UpdatePetWithFormRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this.sdkConfiguration.securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");
        
        org.openapis.openapi.models.operations.UpdatePetWithFormResponse res = new org.openapis.openapi.models.operations.UpdatePetWithFormResponse(contentType, httpRes.statusCode(), httpRes) {{
            pet = null;
        }};
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Pet out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Pet.class);
                res.pet = out;
            }
        }
        else if (httpRes.statusCode() == 405) {
        }

        return res;
    }

    /**
     * uploads an image
     * upload an image of a pet
     * @param petId ID of pet to update
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UploadFileResponse uploadFile(Long petId) throws Exception {
        return this.uploadFile(petId, null, null);
    }

    /**
     * uploads an image
     * upload an image of a pet
     * @param petId ID of pet to update
     * @param requestBody binary data for body of request
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UploadFileResponse uploadFile(Long petId, byte[] requestBody) throws Exception {
        return this.uploadFile(petId, null, requestBody);
    }

    /**
     * uploads an image
     * upload an image of a pet
     * @param petId ID of pet to update
     * @param additionalMetadata Additional Metadata
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UploadFileResponse uploadFile(Long petId, String additionalMetadata) throws Exception {
        return this.uploadFile(petId, additionalMetadata, null);
    }

    /**
     * uploads an image
     * upload an image of a pet
     * @param petId ID of pet to update
     * @param additionalMetadata Additional Metadata
     * @param requestBody binary data for body of request
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UploadFileResponse uploadFile(Long petId, String additionalMetadata, byte[] requestBody) throws Exception {
        org.openapis.openapi.models.operations.UploadFileRequest request = new org.openapis.openapi.models.operations.UploadFileRequest(petId);
        request.additionalMetadata=additionalMetadata;
        request.requestBody=requestBody;
        
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.UploadFileRequest.class, baseUrl, "/pet/{petId}/uploadImage", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "raw");
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.UploadFileRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this.sdkConfiguration.securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");
        
        org.openapis.openapi.models.operations.UploadFileResponse res = new org.openapis.openapi.models.operations.UploadFileResponse(contentType, httpRes.statusCode(), httpRes) {{
            apiResponse = null;
        }};
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.ApiResponse out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.ApiResponse.class);
                res.apiResponse = out;
            }
        }

        return res;
    }
}