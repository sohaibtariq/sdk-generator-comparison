openapi: 3.0.2
info:
  contact:
    email: apiteam@swagger.io
  description: This is a sample Pet Store Server based on the OpenAPI 3.0 specification.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Petstore Extended
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
- description: version 3 of our server url
  url: /api/v3
tags:
- description: Everything about your Pets
  externalDocs:
    description: Find out more
    url: http://swagger.io
  name: pet
- description: Access to Petstore orders
  externalDocs:
    description: Find out more about our store
    url: http://swagger.io
  name: store
- description: Operations about user
  name: user
paths:
  /pet:
    post:
      description: Add a new pet to the store
      operationId: addPet
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
        description: Create a new pet in the store
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
          description: Successful operation
        "405":
          description: Invalid input
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      summary: Add a new pet to the store
      tags:
      - pet
      x-content-type: application/json
      x-accepts: application/json
    put:
      description: Update an existing pet by Id
      operationId: updatePet
      requestBody:
        $ref: '#/components/requestBodies/Pet'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
          description: Successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
        "405":
          description: Validation exception
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      summary: Update an existing pet
      tags:
      - pet
      x-content-type: application/json
      x-accepts: application/json
  /pet/findByStatus:
    get:
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus
      parameters:
      - description: Status values that need to be considered for filter
        example: pending
        explode: true
        in: query
        name: status
        required: false
        schema:
          $ref: '#/components/schemas/PetStatus'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pets'
          description: successful operation
        "400":
          description: Invalid status value
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      summary: Finds Pets by status
      tags:
      - pet
      x-accepts: application/json
  /pet/findByTags:
    get:
      description: "Multiple tags can be provided with comma separated strings. Use\
        \ tag1, tag2, tag3 for testing."
      operationId: findPetsByTags
      parameters:
      - description: Tags to filter by
        example:
        - id: 1234
          name: Hugo
        explode: true
        in: query
        name: tags
        required: false
        schema:
          $ref: '#/components/schemas/PetTags'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pets'
          description: successful operation
        "400":
          description: Invalid tag value
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      summary: Finds Pets by tags
      tags:
      - pet
      x-accepts: application/json
  /pet/{petId}:
    delete:
      description: delete a pet based on a unique id
      operationId: deletePet
      parameters:
      - description: Pet id to delete
        example: 1234
        explode: false
        in: path
        name: petId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "201":
          description: successful deletion
        "400":
          description: Invalid pet value
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      summary: Deletes a pet
      tags:
      - pet
      x-accepts: application/json
    get:
      description: Returns a single pet
      operationId: getPetById
      parameters:
      - description: ID of pet to return
        example: 1234
        explode: false
        in: path
        name: petId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
          description: successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
      security:
      - api_key: []
      - petstore_auth:
        - write:pets
        - read:pets
      summary: Find pet by ID
      tags:
      - pet
      x-accepts: application/json
    post:
      description: update a pet using form data
      operationId: updatePetWithForm
      parameters:
      - description: ID of pet that needs to be updated
        example: 12345
        explode: false
        in: path
        name: petId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      - description: Name of pet that needs to be updated
        example: Fido
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - description: Status of pet that needs to be updated
        example: pending
        explode: true
        in: query
        name: status
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
          description: Successful operation
        "405":
          description: Invalid input
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      summary: Updates a pet in the store with form data
      tags:
      - pet
      x-accepts: application/json
  /pet/{petId}/uploadImage:
    post:
      description: upload an image of a pet
      operationId: uploadFile
      parameters:
      - description: ID of pet to update
        example: 123
        explode: false
        in: path
        name: petId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      - description: Additional Metadata
        example: foobar
        explode: true
        in: query
        name: additionalMetadata
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/octet-stream:
            schema:
              description: "a binary file format that include jpeg, png and gif"
              example: !!binary |-
                aW1hZ2UuanBn
              format: binary
              type: string
        description: binary data for body of request
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
          description: successful operation
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      summary: uploads an image
      tags:
      - pet
      x-content-type: application/octet-stream
      x-accepts: application/json
  /store/inventory:
    get:
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  format: int32
                  type: integer
                description: successful object returned with inventory status code
                example:
                  code: 101
                type: object
          description: successful operation
      security:
      - api_key: []
      summary: Returns pet inventories by status
      tags:
      - store
      x-accepts: application/json
  /store/order:
    post:
      description: Place a new order in the store
      operationId: placeOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        description: body of order request
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: successful operation
        "405":
          description: Invalid input
      summary: Place an order for a pet
      tags:
      - store
      x-content-type: application/json
      x-accepts: application/json
  /store/order/{orderId}:
    delete:
      description: For valid response try integer IDs with value < 1000. Anything
        above 1000 or nonintegers will generate API errors
      operationId: deleteOrder
      parameters:
      - description: ID of the order that needs to be deleted
        example: 1234
        explode: false
        in: path
        name: orderId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "201":
          description: successful deletion of order
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
      summary: Delete purchase order by ID
      tags:
      - store
      x-accepts: application/json
    get:
      description: For valid response try integer IDs with value <= 5 or > 10. Other
        values will generate exceptions.
      operationId: getOrderById
      parameters:
      - description: ID of order that needs to be fetched
        example: 1234
        explode: false
        in: path
        name: orderId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
      summary: Find purchase order by ID
      tags:
      - store
      x-accepts: application/json
  /user:
    post:
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: successful operation
      summary: Create user
      tags:
      - user
      x-content-type: application/json
      x-accepts: application/json
  /user/createWithList:
    post:
      description: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Users'
        description: body of creating new user
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Successful operation
        default:
          description: successful operation
      summary: Creates list of users with given input array
      tags:
      - user
      x-content-type: application/json
      x-accepts: application/json
  /user/login:
    get:
      description: log a user into the petstore
      operationId: loginUser
      parameters:
      - description: The user name for login
        example: theUser
        explode: true
        in: query
        name: username
        required: false
        schema:
          type: string
        style: form
      - description: The password for login in clear text
        example: foobar
        explode: true
        in: query
        name: password
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              example: success
              schema:
                description: login success
                type: string
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              example: 300
              explode: false
              schema:
                format: int32
                type: integer
              style: simple
            X-Expires-After:
              description: date in UTC when token expires
              example: 2023-12-08T18:04:28Z
              explode: false
              schema:
                format: date-time
                type: string
              style: simple
        "400":
          description: Invalid username/password supplied
      summary: Logs user into the system
      tags:
      - user
      x-accepts: application/json
  /user/logout:
    get:
      description: log out the current user
      operationId: logoutUser
      parameters: []
      responses:
        "201":
          description: successful operation
      summary: Logs out current logged in user session
      tags:
      - user
      x-accepts: application/json
  /user/{username}:
    delete:
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - description: The name that needs to be deleted
        example: theUser
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      responses:
        "201":
          description: Successfully deleted user
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
      summary: Delete user
      tags:
      - user
      x-accepts: application/json
    get:
      description: retrieve a user by their username
      operationId: getUserByName
      parameters:
      - description: The name that needs to be fetched. Use user1 for testing.
        example: theUser
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: successful operation
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
      summary: Get user by user name
      tags:
      - user
      x-accepts: application/json
    put:
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - description: name that need to be deleted
        example: theUser
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Update an existent user in the store
      responses:
        "201":
          description: successful operation
      summary: Update user
      tags:
      - user
      x-content-type: application/json
      x-accepts: application/json
components:
  requestBodies:
    Pet:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/updatePet_request'
      description: Created user object
      required: true
  schemas:
    Order:
      description: an order object for the story
      example:
        id: 10
        petId: 1234
        quantity: 7
        shipDate: 2023-12-08T18:04:28Z
        status: placed
        complete: false
      properties:
        id:
          description: unique identifier for an order
          example: 10
          format: int64
          type: integer
        petId:
          description: unique identifier for pet as part of an order
          example: 198772
          format: int64
          type: integer
        quantity:
          description: total number of pets in order
          example: 7
          format: int32
          type: integer
        shipDate:
          description: order date for pet
          example: 2023-12-08T18:04:28Z
          format: date-time
          type: string
        status:
          $ref: '#/components/schemas/OrderStatus'
        complete:
          description: completion status for an order
          example: true
          type: boolean
      type: object
    Category:
      description: details of a cateogry object
      example:
        id: 1
        name: Dogs
      properties:
        id:
          description: unique identifier for category object
          example: 1
          format: int64
          type: integer
        name:
          description: name for an order
          example: Dogs
          type: string
      type: object
    User:
      description: details of a user
      example:
        id: 1234
        username: theUser
        firstName: John
        lastName: James
        email: john@email.com
        password: 123xyz
        phone: 867-5309
        userStatus: 1
      properties:
        id:
          description: unique identifier for user object
          example: 10
          format: int64
          type: integer
        username:
          description: username for a user object
          example: theUser
          type: string
        firstName:
          description: first name for a user object
          example: John
          type: string
        lastName:
          description: last name for a user object
          example: James
          type: string
        email:
          description: email for a user object
          example: john@email.com
          type: string
        password:
          description: password for a user object
          example: "12345"
          type: string
        phone:
          description: phone for a user object
          example: 867-5309
          type: string
        userStatus:
          description: User Status
          example: 1
          format: int32
          type: integer
      type: object
    Tag:
      description: details of a tag
      example:
        id: 1234
        name: Hugo
      properties:
        id:
          description: unique identifier for tag object
          example: 1234
          format: int64
          type: integer
        name:
          description: name or label for tag
          example: Hugo
          type: string
      type: object
    Pet:
      description: details of a pet
      example:
        name: doggie
        category:
          id: 1
          name: Dogs
        photoUrls:
        - http://www.example.com/photo.jpg
        tags:
        - id: 1
          name: Pet
        status: pending
      properties:
        id:
          description: unique identifier for a pet
          example: 123
          format: int64
          type: integer
        name:
          description: name or label for a pet
          example: doggie
          type: string
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          description: collection of photo urls
          example:
          - https://www.example.com/image.jpeg
          items:
            description: the url path
            example: https://www.example.com/image.jpeg
            type: string
          type: array
        tags:
          description: collection of pet tag objects
          example:
          - id: 1234
            name: Hugo
          items:
            $ref: '#/components/schemas/Tag'
          type: array
        status:
          $ref: '#/components/schemas/PetStatus'
      required:
      - name
      - photoUrls
      type: object
    ApiResponse:
      description: response for uploading pet image
      example:
        code: 41200
        type: uploaded
        message: successful uploaded
      properties:
        code:
          description: code response
          example: 41200
          format: int32
          type: integer
        type:
          description: type of message
          example: uploaded
          type: string
        message:
          description: message details
          example: successful uploaded
          type: string
      type: object
    Pets:
      description: collection of pet objects
      example:
      - name: doggie
        category:
          id: 1
          name: Dogs
        photoUrls:
        - http://www.example.com/photo.jpg
        tags:
        - id: 1
          name: Pet
        status: pending
      items:
        $ref: '#/components/schemas/Pet'
      type: array
    Users:
      description: collection of user objects
      example:
      - id: 1234
        username: theUser
        firstName: John
        lastName: James
        email: john@email.com
        password: 123xyz
        phone: 867-5309
        userStatus: 1
      items:
        $ref: '#/components/schemas/User'
      type: array
    PetPhotoUrls:
      description: collection of photo urls
      example:
      - https://www.example.com/image.jpeg
      items:
        description: the url path
        example: https://www.example.com/image.jpeg
        type: string
      type: array
    PetTags:
      description: collection of pet tag objects
      example:
      - id: 1234
        name: Hugo
      items:
        $ref: '#/components/schemas/Tag'
      type: array
    OrderStatus:
      description: Order Status
      enum:
      - placed
      - approved
      - delivered
      example: approved
      type: string
    PetStatus:
      description: pet status in the store
      enum:
      - available
      - pending
      - sold
      example: pending
      type: string
    updatePet_request:
      properties:
        id:
          example: 10
          format: int64
          type: integer
        name:
          example: doggie
          type: string
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          description: collection of photo urls
          example:
          - https://www.example.com/image.jpeg
          items:
            description: the url path
            example: https://www.example.com/image.jpeg
            type: string
          type: array
        tags:
          description: collection of pet tag objects
          example:
          - id: 1234
            name: Hugo
          items:
            $ref: '#/components/schemas/Tag'
          type: array
        status:
          $ref: '#/components/schemas/PetStatus'
      type: object
  securitySchemes:
    petstore_auth:
      description: secure petstore with oauth 2 authentication
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
      type: oauth2
    api_key:
      description: secure petstore with an api key
      in: header
      name: api_key
      type: apiKey

