openapi: 3.0.2
info:
  title: Petstore Extended
  description: This is a sample Pet Store Server based on the OpenAPI 3.0 specification. 
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: /api/v3
    description: version 3 of our server url
tags:
  - name: pet
    description: Everything about your Pets
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: store
    description: Access to Petstore orders
    externalDocs:
      description: Find out more about our store
      url: http://swagger.io
  - name: user
    description: Operations about user
paths:
  /pet:
    put:
      tags:
        - pet
      summary: Update an existing pet
      description: Update an existing pet by Id
      operationId: updatePet
      requestBody:
        $ref: "#/components/requestBodies/Pet"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
        "405":
          description: Validation exception
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    post:
      tags:
        - pet
      summary: Add a new pet to the store
      description: Add a new pet to the store
      operationId: addPet
      requestBody:
        description: Create a new pet in the store
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Pet"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
        "405":
          description: Invalid input
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /pet/findByStatus:
    get:
      tags:
        - pet
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          schema:
            $ref: "#/components/schemas/PetStatus"
          example: pending
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pets"
        "400":
          description: Invalid status value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /pet/findByTags:
    get:
      tags:
        - pet
      summary: Finds Pets by tags
      description: Multiple tags can be provided with comma separated strings. Use
        tag1, tag2, tag3 for testing.
      operationId: findPetsByTags
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: false
          explode: true
          schema:
            $ref: "#/components/schemas/PetTags"
          example: 
            - id: 1234
              name: Hugo
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pets"
        "400":
          description: Invalid tag value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  "/pet/{petId}":
    get:
      tags:
        - pet
      summary: Find pet by ID
      description: Returns a single pet
      operationId: getPetById
      parameters:
        - name: petId
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: integer
            format: int64
          example: 1234
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
      security:
        - api_key: []
        - petstore_auth:
            - write:pets
            - read:pets
    post:
      tags:
        - pet
      summary: Updates a pet in the store with form data
      description: "update a pet using form data"
      operationId: updatePetWithForm
      parameters:
        - name: petId
          in: path
          description: ID of pet that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
          example: 12345
        - name: name
          in: query
          description: Name of pet that needs to be updated
          schema:
            type: string
          example: Fido
        - name: status
          in: query
          description: Status of pet that needs to be updated
          schema:
            type: string
          example: pending
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
        "405":
          description: Invalid input
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    delete:
      tags:
        - pet
      summary: Deletes a pet
      description: "delete a pet based on a unique id"
      operationId: deletePet
      parameters:
        - name: petId
          in: path
          description: Pet id to delete
          required: true
          schema:
            type: integer
            format: int64
          example: 1234
      responses:
        "201":
          description: successful deletion
        "400":
          description: Invalid pet value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  "/pet/{petId}/uploadImage":
    post:
      tags:
        - pet
      summary: uploads an image
      description: "upload an image of a pet"
      operationId: uploadFile
      parameters:
        - name: petId
          in: path
          description: ID of pet to update
          required: true
          schema:
            type: integer
            format: int64
          example: 123
        - name: additionalMetadata
          in: query
          description: Additional Metadata
          required: false
          schema:
            type: string
          example: foobar
      requestBody:
        description: binary data for body of request
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
              description: a binary file format that include jpeg, png and gif
              example: image.jpg
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /store/inventory:
    get:
      tags:
        - store
      summary: Returns pet inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                description: successful object returned with inventory status code
                example:
                  code: 101
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - api_key: []
  /store/order:
    post:
      tags:
        - store
      summary: Place an order for a pet
      description: Place a new order in the store
      operationId: placeOrder
      requestBody:
        description: body of order request
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "405":
          description: Invalid input
  "/store/order/{orderId}":
    get:
      tags:
        - store
      summary: Find purchase order by ID
      description: For valid response try integer IDs with value <= 5 or > 10. Other
        values will generate exceptions.
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of order that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
          example: 1234
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
    delete:
      tags:
        - store
      summary: Delete purchase order by ID
      description: For valid response try integer IDs with value < 1000. Anything
        above 1000 or nonintegers will generate API errors
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
          example: 1234
      responses:
        "201":
          description: successful deletion of order
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        description: body of creating new user
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Users"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: "log a user into the petstore"
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
          example: theUser
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
          example: foobar
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: string
                description: login success
              example: success
        "400":
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: "log out the current user"
      operationId: logoutUser
      parameters: []
      responses:
        "201":
          description: successful operation
  "/user/{username}":
    get:
      tags:
        - user
      summary: Get user by user name
      description: "retrieve a user by their username"
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: "The name that needs to be fetched. Use user1 for testing."
          required: true
          schema:
            type: string
          example: theUser
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
          example: theUser
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "201":
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
          example: theUser
      responses:
        "201":
          description: Successfully deleted user
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
components:
  schemas:
    Order:
      type: object
      description: an order object for the story
      properties:
        id:
          description: unique identifier for an order
          type: integer
          format: int64
          example: 10
        petId:
          description: unique identifier for pet as part of an order
          type: integer
          format: int64
          example: 198772
        quantity:
          description: total number of pets in order
          type: integer
          format: int32
          example: 7
        shipDate:
          description: order date for pet
          type: string
          format: date-time
          example: 2023-12-08T18:04:28Z
        status:
          $ref: "#/components/schemas/OrderStatus"
        complete:
          description: completion status for an order
          type: boolean
          example: true
      example:
        id: 10
        petId: 1234
        quantity: 7
        shipDate: 2023-12-08T18:04:28Z
        status: placed
        complete: false
    Category:
      type: object
      description: details of a cateogry object
      properties:
        id:
          description: unique identifier for category object
          type: integer
          format: int64
          example: 1
        name:
          description: name for an order
          type: string
          example: Dogs
      example:
        id: 1
        name: Dogs
    User:
      type: object
      description: details of a user
      properties:
        id:
          description: unique identifier for user object
          type: integer
          format: int64
          example: 10
        username:
          description: username for a user object
          type: string
          example: theUser
        firstName:
          description: first name for a user object
          type: string
          example: John
        lastName:
          description: last name for a user object
          type: string
          example: James
        email:
          description: email for a user object
          type: string
          example: john@email.com
        password:
          description: password for a user object
          type: string
          example: "12345"
        phone:
          description: phone for a user object
          type: string
          example: "867-5309"
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      example:
        id: 1234
        username: theUser
        firstName: John
        lastName: James
        email: john@email.com
        password: 123xyz
        phone: 867-5309
        userStatus: 1
    Tag:
      type: object
      description: details of a tag
      properties:
        id:
          description: unique identifier for tag object
          type: integer
          format: int64
          example: 1234
        name:
          description: name or label for tag
          type: string
          example: Hugo
      example:
        id: 1234
        name: Hugo
    Pet:
      description: details of a pet
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          description: unique identifier for a pet
          type: integer
          format: int64
          example: 123
        name:
          description: name or label for a pet
          type: string
          example: doggie
        category:
          $ref: "#/components/schemas/Category"
        photoUrls:
          $ref: "#/components/schemas/PetPhotoUrls"
        tags:
          $ref: "#/components/schemas/PetTags"
        status:
          $ref: "#/components/schemas/PetStatus"
      example:
        name: doggie
        category:
            id: 1
            name: Dogs
        photoUrls: 
           - http://www.example.com/photo.jpg
        tags:
          - id: 1
            name: Pet
        status: pending
    ApiResponse:
      description: response for uploading pet image
      type: object
      properties:
        code:
          description: code response
          type: integer
          format: int32
          example: 41200
        type:
          description: type of message
          type: string
          example: uploaded
        message:
          description: message details
          type: string
          example: successful uploaded
      example:
        code: 41200
        type: uploaded
        message: successful uploaded
    Pets:
      description: collection of pet objects
      type: array
      items:
        $ref: "#/components/schemas/Pet"
      example:
        - name: doggie
          category:
              id: 1
              name: Dogs
          photoUrls: 
            - http://www.example.com/photo.jpg
          tags:
            - id: 1
              name: Pet
          status: pending
    Users:
      description: collection of user objects
      type: array
      items:
        $ref: "#/components/schemas/User"
      example:
        - id: 1234
          username: theUser
          firstName: John
          lastName: James
          email: john@email.com
          password: 123xyz
          phone: 867-5309
          userStatus: 1
    PetPhotoUrls:
      description: collection of photo urls
      type: array
      items:
        type: string
        description: the url path
        example: https://www.example.com/image.jpeg
      example:
        - https://www.example.com/image.jpeg
    PetTags:
      description: collection of pet tag objects
      type: array
      items:
        $ref: "#/components/schemas/Tag"
      example:
        - id: 1234
          name: Hugo
    OrderStatus:
      type: string
      description: Order Status
      example: approved
      enum:
        - placed
        - approved
        - delivered
    PetStatus:
      type: string
      description: pet status in the store
      enum:
        - available
        - pending
        - sold
      example: pending
  requestBodies:
    Pet:
      description: Created user object
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: integer
                format: int64
                example: 10
              name:
                type: string
                example: doggie
              category:
                $ref: "#/components/schemas/Category"
              photoUrls:
                $ref: "#/components/schemas/PetPhotoUrls"
              tags:
                $ref: "#/components/schemas/PetTags"
              status:
                $ref: "#/components/schemas/PetStatus"
  securitySchemes:
    petstore_auth:
      type: oauth2
      description: secure petstore with oauth 2 authentication
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      description: secure petstore with an api key
      type: apiKey
      name: api_key
      in: header
