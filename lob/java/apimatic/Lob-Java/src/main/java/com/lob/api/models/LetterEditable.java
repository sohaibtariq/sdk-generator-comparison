/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.lob.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.lob.api.models.containers.LetterEditableFrom;
import com.lob.api.models.containers.LetterEditableTo;
import com.lob.api.models.containers.LtrFile;
import com.lob.api.models.containers.ReturnEnvelopeUserProvided;
import com.lob.api.models.containers.SendDate;
import io.apimatic.core.types.OptionalNullable;
import java.util.List;
import java.util.Map;

/**
 * This is a model class for LetterEditable type.
 */
public class LetterEditable {
    private LetterEditableTo to;
    private LetterEditableFrom from;
    private OptionalNullable<String> description;
    private Map<String, String> metadata;
    private MailTypeEnum mailType;
    private OptionalNullable<Object> mergeVariables;
    private SendDate sendDate;
    private LtrFile file;
    private OptionalNullable<ExtraServiceEnum> extraService;
    private OptionalNullable<List<String>> cards;
    private boolean color;
    private Boolean doubleSided;
    private AddressPlacementEnum addressPlacement;
    private ReturnEnvelopeUserProvided returnEnvelope;
    private OptionalNullable<Integer> perforatedPage;
    private OptionalNullable<String> customEnvelope;
    private String billingGroupId;
    private QrCode qrCode;
    private LtrUseTypeEnum useType;
    private Boolean fsc;

    /**
     * Default constructor.
     */
    public LetterEditable() {
        mailType = MailTypeEnum.USPS_FIRST_CLASS;
        doubleSided = true;
        addressPlacement = AddressPlacementEnum.TOP_FIRST_PAGE;
        fsc = false;
    }

    /**
     * Initialization constructor.
     * @param  to  LetterEditableTo value for to.
     * @param  from  LetterEditableFrom value for from.
     * @param  file  LtrFile value for file.
     * @param  color  boolean value for color.
     * @param  useType  LtrUseTypeEnum value for useType.
     * @param  description  String value for description.
     * @param  metadata  Map of String, value for metadata.
     * @param  mailType  MailTypeEnum value for mailType.
     * @param  mergeVariables  Object value for mergeVariables.
     * @param  sendDate  SendDate value for sendDate.
     * @param  extraService  ExtraServiceEnum value for extraService.
     * @param  cards  List of String value for cards.
     * @param  doubleSided  Boolean value for doubleSided.
     * @param  addressPlacement  AddressPlacementEnum value for addressPlacement.
     * @param  returnEnvelope  ReturnEnvelopeUserProvided value for returnEnvelope.
     * @param  perforatedPage  Integer value for perforatedPage.
     * @param  customEnvelope  String value for customEnvelope.
     * @param  billingGroupId  String value for billingGroupId.
     * @param  qrCode  QrCode value for qrCode.
     * @param  fsc  Boolean value for fsc.
     */
    public LetterEditable(
            LetterEditableTo to,
            LetterEditableFrom from,
            LtrFile file,
            boolean color,
            LtrUseTypeEnum useType,
            String description,
            Map<String, String> metadata,
            MailTypeEnum mailType,
            Object mergeVariables,
            SendDate sendDate,
            ExtraServiceEnum extraService,
            List<String> cards,
            Boolean doubleSided,
            AddressPlacementEnum addressPlacement,
            ReturnEnvelopeUserProvided returnEnvelope,
            Integer perforatedPage,
            String customEnvelope,
            String billingGroupId,
            QrCode qrCode,
            Boolean fsc) {
        this.to = to;
        this.from = from;
        this.description = OptionalNullable.of(description);
        this.metadata = metadata;
        this.mailType = mailType;
        this.mergeVariables = OptionalNullable.of(mergeVariables);
        this.sendDate = sendDate;
        this.file = file;
        this.extraService = OptionalNullable.of(extraService);
        this.cards = OptionalNullable.of(cards);
        this.color = color;
        this.doubleSided = doubleSided;
        this.addressPlacement = addressPlacement;
        this.returnEnvelope = returnEnvelope;
        this.perforatedPage = OptionalNullable.of(perforatedPage);
        this.customEnvelope = OptionalNullable.of(customEnvelope);
        this.billingGroupId = billingGroupId;
        this.qrCode = qrCode;
        this.useType = useType;
        this.fsc = fsc;
    }

    /**
     * Initialization constructor.
     * @param  to  LetterEditableTo value for to.
     * @param  from  LetterEditableFrom value for from.
     * @param  file  LtrFile value for file.
     * @param  color  boolean value for color.
     * @param  useType  LtrUseTypeEnum value for useType.
     * @param  description  String value for description.
     * @param  metadata  Map of String, value for metadata.
     * @param  mailType  MailTypeEnum value for mailType.
     * @param  mergeVariables  Object value for mergeVariables.
     * @param  sendDate  SendDate value for sendDate.
     * @param  extraService  ExtraServiceEnum value for extraService.
     * @param  cards  List of String value for cards.
     * @param  doubleSided  Boolean value for doubleSided.
     * @param  addressPlacement  AddressPlacementEnum value for addressPlacement.
     * @param  returnEnvelope  ReturnEnvelopeUserProvided value for returnEnvelope.
     * @param  perforatedPage  Integer value for perforatedPage.
     * @param  customEnvelope  String value for customEnvelope.
     * @param  billingGroupId  String value for billingGroupId.
     * @param  qrCode  QrCode value for qrCode.
     * @param  fsc  Boolean value for fsc.
     */

    protected LetterEditable(LetterEditableTo to, LetterEditableFrom from, LtrFile file,
            boolean color, LtrUseTypeEnum useType, OptionalNullable<String> description,
            Map<String, String> metadata, MailTypeEnum mailType,
            OptionalNullable<Object> mergeVariables, SendDate sendDate,
            OptionalNullable<ExtraServiceEnum> extraService, OptionalNullable<List<String>> cards,
            Boolean doubleSided, AddressPlacementEnum addressPlacement,
            ReturnEnvelopeUserProvided returnEnvelope, OptionalNullable<Integer> perforatedPage,
            OptionalNullable<String> customEnvelope, String billingGroupId, QrCode qrCode,
            Boolean fsc) {
        this.to = to;
        this.from = from;
        this.description = description;
        this.metadata = metadata;
        this.mailType = mailType;
        this.mergeVariables = mergeVariables;
        this.sendDate = sendDate;
        this.file = file;
        this.extraService = extraService;
        this.cards = cards;
        this.color = color;
        this.doubleSided = doubleSided;
        this.addressPlacement = addressPlacement;
        this.returnEnvelope = returnEnvelope;
        this.perforatedPage = perforatedPage;
        this.customEnvelope = customEnvelope;
        this.billingGroupId = billingGroupId;
        this.qrCode = qrCode;
        this.useType = useType;
        this.fsc = fsc;
    }

    /**
     * Getter for To.
     * Must either be an address ID or an inline object with correct address parameters. If an
     * object is used, an address will be created, corrected, and standardized for free whenever
     * possible using our US Address Verification engine (if it is a US address), and returned back
     * with an ID. Depending on your &lt;a href="https://dashboard.lob.com/#/settings/editions"
     * target="_blank"&gt;Print &amp; Mail Edition&lt;/a&gt;, US addresses may also be run through &lt;a
     * href="#tag/National-Change-of-Address"&gt;National Change of Address Linkage(NCOALink)&lt;/a&gt;.
     * Non-US addresses will be standardized into uppercase only. If a US address used does not meet
     * your account’s &lt;a href="https://dashboard.lob.com/#/settings/account" target="_blank"&gt;US Mail
     * strictness setting&lt;/a&gt;, the request will fail. &lt;a
     * href="https://help.lob.com/print-and-mail/all-about-addresses" target="_blank"&gt;Lob Guide:
     * Verification of Mailing Addresses&lt;/a&gt;
     * @return Returns the LetterEditableTo
     */
    @JsonGetter("to")
    public LetterEditableTo getTo() {
        return to;
    }

    /**
     * Setter for To.
     * Must either be an address ID or an inline object with correct address parameters. If an
     * object is used, an address will be created, corrected, and standardized for free whenever
     * possible using our US Address Verification engine (if it is a US address), and returned back
     * with an ID. Depending on your &lt;a href="https://dashboard.lob.com/#/settings/editions"
     * target="_blank"&gt;Print &amp; Mail Edition&lt;/a&gt;, US addresses may also be run through &lt;a
     * href="#tag/National-Change-of-Address"&gt;National Change of Address Linkage(NCOALink)&lt;/a&gt;.
     * Non-US addresses will be standardized into uppercase only. If a US address used does not meet
     * your account’s &lt;a href="https://dashboard.lob.com/#/settings/account" target="_blank"&gt;US Mail
     * strictness setting&lt;/a&gt;, the request will fail. &lt;a
     * href="https://help.lob.com/print-and-mail/all-about-addresses" target="_blank"&gt;Lob Guide:
     * Verification of Mailing Addresses&lt;/a&gt;
     * @param to Value for LetterEditableTo
     */
    @JsonSetter("to")
    public void setTo(LetterEditableTo to) {
        this.to = to;
    }

    /**
     * Getter for From.
     * Must either be an address ID or an inline object with correct address parameters. Must be a
     * US address unless using a `custom_envelope`. All addresses will be standardized into
     * uppercase without being modified by verification.
     * @return Returns the LetterEditableFrom
     */
    @JsonGetter("from")
    public LetterEditableFrom getFrom() {
        return from;
    }

    /**
     * Setter for From.
     * Must either be an address ID or an inline object with correct address parameters. Must be a
     * US address unless using a `custom_envelope`. All addresses will be standardized into
     * uppercase without being modified by verification.
     * @param from Value for LetterEditableFrom
     */
    @JsonSetter("from")
    public void setFrom(LetterEditableFrom from) {
        this.from = from;
    }

    /**
     * Internal Getter for Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     * @return Returns the Internal String
     */
    @JsonGetter("description")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetDescription() {
        return this.description;
    }

    /**
     * Getter for Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     * @return Returns the String
     */
    public String getDescription() {
        return OptionalNullable.getFrom(description);
    }

    /**
     * Setter for Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     * @param description Value for String
     */
    @JsonSetter("description")
    public void setDescription(String description) {
        this.description = OptionalNullable.of(description);
    }

    /**
     * UnSetter for Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     */
    public void unsetDescription() {
        description = null;
    }

    /**
     * Getter for Metadata.
     * Use metadata to store custom information for tagging and labeling back to your internal
     * systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters
     * and values must be at most 500 characters. Neither can contain the characters `"` and `\`.
     * i.e. '{"customer_id" : "NEWYORK2015"}' Nested objects are not supported. See
     * [Metadata](#section/Metadata) for more information.
     * @return Returns the Map of String, String
     */
    @JsonGetter("metadata")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Map<String, String> getMetadata() {
        return metadata;
    }

    /**
     * Setter for Metadata.
     * Use metadata to store custom information for tagging and labeling back to your internal
     * systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters
     * and values must be at most 500 characters. Neither can contain the characters `"` and `\`.
     * i.e. '{"customer_id" : "NEWYORK2015"}' Nested objects are not supported. See
     * [Metadata](#section/Metadata) for more information.
     * @param metadata Value for Map of String, String
     */
    @JsonSetter("metadata")
    public void setMetadata(Map<String, String> metadata) {
        this.metadata = metadata;
    }

    /**
     * Getter for MailType.
     * A string designating the mail postage type: * `usps_first_class` - (default) *
     * `usps_standard` - a &lt;a href="https://lob.com/pricing/print-mail#compare"
     * target="_blank"&gt;cheaper option&lt;/a&gt; which is less predictable and takes longer to deliver.
     * `usps_standard` cannot be used with `4x6` postcards or for any postcards sent outside of the
     * United States.
     * @return Returns the MailTypeEnum
     */
    @JsonGetter("mail_type")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public MailTypeEnum getMailType() {
        return mailType;
    }

    /**
     * Setter for MailType.
     * A string designating the mail postage type: * `usps_first_class` - (default) *
     * `usps_standard` - a &lt;a href="https://lob.com/pricing/print-mail#compare"
     * target="_blank"&gt;cheaper option&lt;/a&gt; which is less predictable and takes longer to deliver.
     * `usps_standard` cannot be used with `4x6` postcards or for any postcards sent outside of the
     * United States.
     * @param mailType Value for MailTypeEnum
     */
    @JsonSetter("mail_type")
    public void setMailType(MailTypeEnum mailType) {
        this.mailType = mailType;
    }

    /**
     * Internal Getter for MergeVariables.
     * You can input a merge variable payload object to your template to render dynamic content. For
     * example, if you have a template like: `{{variable_name}}`, pass in `{"variable_name":
     * "Harry"}` to render `Harry`. `merge_variables` must be an object. Any type of value is
     * accepted as long as the object is valid JSON; you can use `strings`, `numbers`, `booleans`,
     * `arrays`, `objects`, or `null`. The max length of the object is 25,000 characters. If you
     * call `JSON.stringify` on your object, it can be no longer than 25,000 characters. Your
     * variable names cannot contain any whitespace or any of the following special characters: `!`,
     * `"`, `#`, `%`, `&amp;`, `'`, `(`, `)`, `*`, `+`, `,`, `/`, `;`, `&lt;`, `=`, `&gt;`, `{@literal @}`, `[`, `\`,
     * `]`, `^`, `` ` ``, `{`, `|`, `}`, `~`. More instructions can be found in &lt;a
     * href="https://help.lob.com/print-and-mail/designing-mail-creatives/dynamic-personalization#using-html-and-merge-variables-10"
     * target="_blank"&gt;our guide to using html and merge variables&lt;/a&gt;. Depending on your &lt;a
     * href="https://dashboard.lob.com/#/settings/account" target="_blank"&gt;Merge Variable
     * strictness&lt;/a&gt; setting, if you define variables in your HTML but do not pass them here, you
     * will either receive an error or the variable will render as an empty string.
     * @return Returns the Internal Object
     */
    @JsonGetter("merge_variables")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Object> internalGetMergeVariables() {
        return this.mergeVariables;
    }

    /**
     * Getter for MergeVariables.
     * You can input a merge variable payload object to your template to render dynamic content. For
     * example, if you have a template like: `{{variable_name}}`, pass in `{"variable_name":
     * "Harry"}` to render `Harry`. `merge_variables` must be an object. Any type of value is
     * accepted as long as the object is valid JSON; you can use `strings`, `numbers`, `booleans`,
     * `arrays`, `objects`, or `null`. The max length of the object is 25,000 characters. If you
     * call `JSON.stringify` on your object, it can be no longer than 25,000 characters. Your
     * variable names cannot contain any whitespace or any of the following special characters: `!`,
     * `"`, `#`, `%`, `&amp;`, `'`, `(`, `)`, `*`, `+`, `,`, `/`, `;`, `&lt;`, `=`, `&gt;`, `{@literal @}`, `[`, `\`,
     * `]`, `^`, `` ` ``, `{`, `|`, `}`, `~`. More instructions can be found in &lt;a
     * href="https://help.lob.com/print-and-mail/designing-mail-creatives/dynamic-personalization#using-html-and-merge-variables-10"
     * target="_blank"&gt;our guide to using html and merge variables&lt;/a&gt;. Depending on your &lt;a
     * href="https://dashboard.lob.com/#/settings/account" target="_blank"&gt;Merge Variable
     * strictness&lt;/a&gt; setting, if you define variables in your HTML but do not pass them here, you
     * will either receive an error or the variable will render as an empty string.
     * @return Returns the Object
     */
    public Object getMergeVariables() {
        return OptionalNullable.getFrom(mergeVariables);
    }

    /**
     * Setter for MergeVariables.
     * You can input a merge variable payload object to your template to render dynamic content. For
     * example, if you have a template like: `{{variable_name}}`, pass in `{"variable_name":
     * "Harry"}` to render `Harry`. `merge_variables` must be an object. Any type of value is
     * accepted as long as the object is valid JSON; you can use `strings`, `numbers`, `booleans`,
     * `arrays`, `objects`, or `null`. The max length of the object is 25,000 characters. If you
     * call `JSON.stringify` on your object, it can be no longer than 25,000 characters. Your
     * variable names cannot contain any whitespace or any of the following special characters: `!`,
     * `"`, `#`, `%`, `&amp;`, `'`, `(`, `)`, `*`, `+`, `,`, `/`, `;`, `&lt;`, `=`, `&gt;`, `{@literal @}`, `[`, `\`,
     * `]`, `^`, `` ` ``, `{`, `|`, `}`, `~`. More instructions can be found in &lt;a
     * href="https://help.lob.com/print-and-mail/designing-mail-creatives/dynamic-personalization#using-html-and-merge-variables-10"
     * target="_blank"&gt;our guide to using html and merge variables&lt;/a&gt;. Depending on your &lt;a
     * href="https://dashboard.lob.com/#/settings/account" target="_blank"&gt;Merge Variable
     * strictness&lt;/a&gt; setting, if you define variables in your HTML but do not pass them here, you
     * will either receive an error or the variable will render as an empty string.
     * @param mergeVariables Value for Object
     */
    @JsonSetter("merge_variables")
    public void setMergeVariables(Object mergeVariables) {
        this.mergeVariables = OptionalNullable.of(mergeVariables);
    }

    /**
     * UnSetter for MergeVariables.
     * You can input a merge variable payload object to your template to render dynamic content. For
     * example, if you have a template like: `{{variable_name}}`, pass in `{"variable_name":
     * "Harry"}` to render `Harry`. `merge_variables` must be an object. Any type of value is
     * accepted as long as the object is valid JSON; you can use `strings`, `numbers`, `booleans`,
     * `arrays`, `objects`, or `null`. The max length of the object is 25,000 characters. If you
     * call `JSON.stringify` on your object, it can be no longer than 25,000 characters. Your
     * variable names cannot contain any whitespace or any of the following special characters: `!`,
     * `"`, `#`, `%`, `&amp;`, `'`, `(`, `)`, `*`, `+`, `,`, `/`, `;`, `&lt;`, `=`, `&gt;`, `{@literal @}`, `[`, `\`,
     * `]`, `^`, `` ` ``, `{`, `|`, `}`, `~`. More instructions can be found in &lt;a
     * href="https://help.lob.com/print-and-mail/designing-mail-creatives/dynamic-personalization#using-html-and-merge-variables-10"
     * target="_blank"&gt;our guide to using html and merge variables&lt;/a&gt;. Depending on your &lt;a
     * href="https://dashboard.lob.com/#/settings/account" target="_blank"&gt;Merge Variable
     * strictness&lt;/a&gt; setting, if you define variables in your HTML but do not pass them here, you
     * will either receive an error or the variable will render as an empty string.
     */
    public void unsetMergeVariables() {
        mergeVariables = null;
    }

    /**
     * Getter for SendDate.
     * A timestamp in ISO 8601 format which specifies a date after the current time and up to 180
     * days in the future to send the letter off for production. Setting a send date overrides the
     * default [cancellation window](#section/Cancellation-Windows) applied to the mailpiece. Until
     * the `send_date` has passed, the mailpiece can be canceled. If a date in the format
     * `2017-11-01` is passed, it will evaluate to midnight UTC of that date
     * (`2017-11-01T00:00:00.000Z`). If a datetime is passed, that exact time will be used. A
     * `send_date` passed with no time zone will default to UTC, while a `send_date` passed with a
     * time zone will be converted to UTC.
     * @return Returns the SendDate
     */
    @JsonGetter("send_date")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public SendDate getSendDate() {
        return sendDate;
    }

    /**
     * Setter for SendDate.
     * A timestamp in ISO 8601 format which specifies a date after the current time and up to 180
     * days in the future to send the letter off for production. Setting a send date overrides the
     * default [cancellation window](#section/Cancellation-Windows) applied to the mailpiece. Until
     * the `send_date` has passed, the mailpiece can be canceled. If a date in the format
     * `2017-11-01` is passed, it will evaluate to midnight UTC of that date
     * (`2017-11-01T00:00:00.000Z`). If a datetime is passed, that exact time will be used. A
     * `send_date` passed with no time zone will default to UTC, while a `send_date` passed with a
     * time zone will be converted to UTC.
     * @param sendDate Value for SendDate
     */
    @JsonSetter("send_date")
    public void setSendDate(SendDate sendDate) {
        this.sendDate = sendDate;
    }

    /**
     * Getter for File.
     * Notes: - HTML merge variables should not include delimiting whitespace. - All pages of a
     * supplied PDF file must be sized at 8.5"x11", while supplied HTML will be rendered and trimmed
     * to as many 8.5"x11" pages as necessary. - For design specifications, please see our &lt;a
     * href="https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/letter_template.pdf"
     * target="_blank"&gt;PDF&lt;/a&gt; and [HTML](#section/HTML-Examples) templates. - If a
     * `custom_envelope` is used, follow &lt;a
     * href="https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/letter_custom_envelope.pdf"
     * target="_blank"&gt;this template&lt;/a&gt;. - For domestic destinations, the file limit is 60 pages
     * single-sided or 120 pages double-sided. For international destinations, the file limit is 6
     * pages single-sided or 12 pages double-sided. PDFs that surpass the file limit will error,
     * while HTML that renders more pages than the file limit will be trimmed. - Any letters over 6
     * pages single-sided or 12 pages double-sided will be placed in a &lt;a
     * href="https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/letter_flat_template.pdf"
     * target="_blank"&gt;flat envelope&lt;/a&gt; instead of the standard double window envelope. See &lt;a
     * href="https://lob.com/pricing/print-mail#compare" target="_blank"&gt;pricing&lt;/a&gt; for extra costs
     * incurred.
     * @return Returns the LtrFile
     */
    @JsonGetter("file")
    public LtrFile getFile() {
        return file;
    }

    /**
     * Setter for File.
     * Notes: - HTML merge variables should not include delimiting whitespace. - All pages of a
     * supplied PDF file must be sized at 8.5"x11", while supplied HTML will be rendered and trimmed
     * to as many 8.5"x11" pages as necessary. - For design specifications, please see our &lt;a
     * href="https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/letter_template.pdf"
     * target="_blank"&gt;PDF&lt;/a&gt; and [HTML](#section/HTML-Examples) templates. - If a
     * `custom_envelope` is used, follow &lt;a
     * href="https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/letter_custom_envelope.pdf"
     * target="_blank"&gt;this template&lt;/a&gt;. - For domestic destinations, the file limit is 60 pages
     * single-sided or 120 pages double-sided. For international destinations, the file limit is 6
     * pages single-sided or 12 pages double-sided. PDFs that surpass the file limit will error,
     * while HTML that renders more pages than the file limit will be trimmed. - Any letters over 6
     * pages single-sided or 12 pages double-sided will be placed in a &lt;a
     * href="https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/letter_flat_template.pdf"
     * target="_blank"&gt;flat envelope&lt;/a&gt; instead of the standard double window envelope. See &lt;a
     * href="https://lob.com/pricing/print-mail#compare" target="_blank"&gt;pricing&lt;/a&gt; for extra costs
     * incurred.
     * @param file Value for LtrFile
     */
    @JsonSetter("file")
    public void setFile(LtrFile file) {
        this.file = file;
    }

    /**
     * Internal Getter for ExtraService.
     * Add an extra service to your letter. Can only be non-`null` if `mail_type` isn't
     * `usps_standard`. See &lt;a href="https://www.lob.com/pricing/print-mail#compare"
     * target="_blank"&gt;pricing&lt;/a&gt; for extra costs incurred. * `certified` - track and confirm
     * delivery for domestic destinations. An extra sheet (1 PDF page single-sided or 2 PDF pages
     * double-sided) is added to the beginning of your letter for address and barcode information.
     * See here for templates: &lt;a
     * href="https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/letter_certified_template.pdf"
     * target="_blank"&gt;#10 envelope&lt;/a&gt; and &lt;a
     * href="https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/letter_certified_flat_template.pdf"
     * target="_blank"&gt;flat envelope&lt;/a&gt; (used for letters over 6 pages single-sided or 12 pages
     * double-sided). You will not be charged for this extra sheet. * `certified_return_receipt` -
     * request an electronic copy of the recipient's signature to prove delivery of your certified
     * letter * `registered` - provides tracking and confirmation for international addresses
     * @return Returns the Internal ExtraServiceEnum
     */
    @JsonGetter("extra_service")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<ExtraServiceEnum> internalGetExtraService() {
        return this.extraService;
    }

    /**
     * Getter for ExtraService.
     * Add an extra service to your letter. Can only be non-`null` if `mail_type` isn't
     * `usps_standard`. See &lt;a href="https://www.lob.com/pricing/print-mail#compare"
     * target="_blank"&gt;pricing&lt;/a&gt; for extra costs incurred. * `certified` - track and confirm
     * delivery for domestic destinations. An extra sheet (1 PDF page single-sided or 2 PDF pages
     * double-sided) is added to the beginning of your letter for address and barcode information.
     * See here for templates: &lt;a
     * href="https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/letter_certified_template.pdf"
     * target="_blank"&gt;#10 envelope&lt;/a&gt; and &lt;a
     * href="https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/letter_certified_flat_template.pdf"
     * target="_blank"&gt;flat envelope&lt;/a&gt; (used for letters over 6 pages single-sided or 12 pages
     * double-sided). You will not be charged for this extra sheet. * `certified_return_receipt` -
     * request an electronic copy of the recipient's signature to prove delivery of your certified
     * letter * `registered` - provides tracking and confirmation for international addresses
     * @return Returns the ExtraServiceEnum
     */
    public ExtraServiceEnum getExtraService() {
        return OptionalNullable.getFrom(extraService);
    }

    /**
     * Setter for ExtraService.
     * Add an extra service to your letter. Can only be non-`null` if `mail_type` isn't
     * `usps_standard`. See &lt;a href="https://www.lob.com/pricing/print-mail#compare"
     * target="_blank"&gt;pricing&lt;/a&gt; for extra costs incurred. * `certified` - track and confirm
     * delivery for domestic destinations. An extra sheet (1 PDF page single-sided or 2 PDF pages
     * double-sided) is added to the beginning of your letter for address and barcode information.
     * See here for templates: &lt;a
     * href="https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/letter_certified_template.pdf"
     * target="_blank"&gt;#10 envelope&lt;/a&gt; and &lt;a
     * href="https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/letter_certified_flat_template.pdf"
     * target="_blank"&gt;flat envelope&lt;/a&gt; (used for letters over 6 pages single-sided or 12 pages
     * double-sided). You will not be charged for this extra sheet. * `certified_return_receipt` -
     * request an electronic copy of the recipient's signature to prove delivery of your certified
     * letter * `registered` - provides tracking and confirmation for international addresses
     * @param extraService Value for ExtraServiceEnum
     */
    @JsonSetter("extra_service")
    public void setExtraService(ExtraServiceEnum extraService) {
        this.extraService = OptionalNullable.of(extraService);
    }

    /**
     * UnSetter for ExtraService.
     * Add an extra service to your letter. Can only be non-`null` if `mail_type` isn't
     * `usps_standard`. See &lt;a href="https://www.lob.com/pricing/print-mail#compare"
     * target="_blank"&gt;pricing&lt;/a&gt; for extra costs incurred. * `certified` - track and confirm
     * delivery for domestic destinations. An extra sheet (1 PDF page single-sided or 2 PDF pages
     * double-sided) is added to the beginning of your letter for address and barcode information.
     * See here for templates: &lt;a
     * href="https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/letter_certified_template.pdf"
     * target="_blank"&gt;#10 envelope&lt;/a&gt; and &lt;a
     * href="https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/letter_certified_flat_template.pdf"
     * target="_blank"&gt;flat envelope&lt;/a&gt; (used for letters over 6 pages single-sided or 12 pages
     * double-sided). You will not be charged for this extra sheet. * `certified_return_receipt` -
     * request an electronic copy of the recipient's signature to prove delivery of your certified
     * letter * `registered` - provides tracking and confirmation for international addresses
     */
    public void unsetExtraService() {
        extraService = null;
    }

    /**
     * Internal Getter for Cards.
     * A single-element array containing an existing card id in a string format. See
     * [cards](#tag/Cards) for more information.
     * @return Returns the Internal List of String
     */
    @JsonGetter("cards")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<List<String>> internalGetCards() {
        return this.cards;
    }

    /**
     * Getter for Cards.
     * A single-element array containing an existing card id in a string format. See
     * [cards](#tag/Cards) for more information.
     * @return Returns the List of String
     */
    public List<String> getCards() {
        return OptionalNullable.getFrom(cards);
    }

    /**
     * Setter for Cards.
     * A single-element array containing an existing card id in a string format. See
     * [cards](#tag/Cards) for more information.
     * @param cards Value for List of String
     */
    @JsonSetter("cards")
    public void setCards(List<String> cards) {
        this.cards = OptionalNullable.of(cards);
    }

    /**
     * UnSetter for Cards.
     * A single-element array containing an existing card id in a string format. See
     * [cards](#tag/Cards) for more information.
     */
    public void unsetCards() {
        cards = null;
    }

    /**
     * Getter for Color.
     * @return Returns the boolean
     */
    @JsonGetter("color")
    public boolean getColor() {
        return color;
    }

    /**
     * Setter for Color.
     * @param color Value for boolean
     */
    @JsonSetter("color")
    public void setColor(boolean color) {
        this.color = color;
    }

    /**
     * Getter for DoubleSided.
     * Set this attribute to `true` for double sided printing, or `false` for for single sided
     * printing. Defaults to `true`.
     * @return Returns the Boolean
     */
    @JsonGetter("double_sided")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getDoubleSided() {
        return doubleSided;
    }

    /**
     * Setter for DoubleSided.
     * Set this attribute to `true` for double sided printing, or `false` for for single sided
     * printing. Defaults to `true`.
     * @param doubleSided Value for Boolean
     */
    @JsonSetter("double_sided")
    public void setDoubleSided(Boolean doubleSided) {
        this.doubleSided = doubleSided;
    }

    /**
     * Getter for AddressPlacement.
     * Specifies the location of the address information that will show through the double-window
     * envelope. To see how this will impact your letter design, view our letter template. Some
     * values are exclusive to certain customers. Upgrade to the appropriate &lt;a
     * href="https://dashboard.lob.com/#/settings/editions" target="_blank"&gt;Print &amp; Mail Edition&lt;/a&gt;
     * to gain access. * `top_first_page` - (default) print address information at the top of your
     * provided first page * `insert_blank_page` - insert a blank address page at the beginning of
     * your file (you will be charged for the extra page) * `bottom_first_page_center` -
     * **(exclusive, deprecation planned within a few months)** print address information at the
     * bottom center of your provided first page * `bottom_first_page` - **(exclusive)** print
     * address information at the bottom of your provided first page
     * @return Returns the AddressPlacementEnum
     */
    @JsonGetter("address_placement")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public AddressPlacementEnum getAddressPlacement() {
        return addressPlacement;
    }

    /**
     * Setter for AddressPlacement.
     * Specifies the location of the address information that will show through the double-window
     * envelope. To see how this will impact your letter design, view our letter template. Some
     * values are exclusive to certain customers. Upgrade to the appropriate &lt;a
     * href="https://dashboard.lob.com/#/settings/editions" target="_blank"&gt;Print &amp; Mail Edition&lt;/a&gt;
     * to gain access. * `top_first_page` - (default) print address information at the top of your
     * provided first page * `insert_blank_page` - insert a blank address page at the beginning of
     * your file (you will be charged for the extra page) * `bottom_first_page_center` -
     * **(exclusive, deprecation planned within a few months)** print address information at the
     * bottom center of your provided first page * `bottom_first_page` - **(exclusive)** print
     * address information at the bottom of your provided first page
     * @param addressPlacement Value for AddressPlacementEnum
     */
    @JsonSetter("address_placement")
    public void setAddressPlacement(AddressPlacementEnum addressPlacement) {
        this.addressPlacement = addressPlacement;
    }

    /**
     * Getter for ReturnEnvelope.
     * Indicates if a return envelope is requested for the letter. The value corresponding to this
     * field is by default a boolean. But if the account is signed up for custom return envelopes,
     * the value is of type string and is `no_9_single_window` for a standard return envelope and a
     * custom `return_envelope_id` for non-standard return envelopes. To include a return envelope
     * with your letter, set to `true` and specify the `perforated_page`. See &lt;a
     * href="https://www.lob.com/pricing/print-mail#compare" target="_blank"&gt;pricing&lt;/a&gt; for extra
     * costs incurred.
     * @return Returns the ReturnEnvelopeUserProvided
     */
    @JsonGetter("return_envelope")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public ReturnEnvelopeUserProvided getReturnEnvelope() {
        return returnEnvelope;
    }

    /**
     * Setter for ReturnEnvelope.
     * Indicates if a return envelope is requested for the letter. The value corresponding to this
     * field is by default a boolean. But if the account is signed up for custom return envelopes,
     * the value is of type string and is `no_9_single_window` for a standard return envelope and a
     * custom `return_envelope_id` for non-standard return envelopes. To include a return envelope
     * with your letter, set to `true` and specify the `perforated_page`. See &lt;a
     * href="https://www.lob.com/pricing/print-mail#compare" target="_blank"&gt;pricing&lt;/a&gt; for extra
     * costs incurred.
     * @param returnEnvelope Value for ReturnEnvelopeUserProvided
     */
    @JsonSetter("return_envelope")
    public void setReturnEnvelope(ReturnEnvelopeUserProvided returnEnvelope) {
        this.returnEnvelope = returnEnvelope;
    }

    /**
     * Internal Getter for PerforatedPage.
     * Required if `return_envelope` is `true`. The number of the page that should be perforated for
     * use with the return envelope. Must be greater than or equal to `1`. The blank page added by
     * `address_placement=insert_blank_page` will be ignored when considering the perforated page
     * number. To see how perforation will impact your letter design, view our &lt;a
     * href="https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/letter_perf_template.pdf"
     * target="_blank"&gt;perforation guide&lt;/a&gt;.
     * @return Returns the Internal Integer
     */
    @JsonGetter("perforated_page")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Integer> internalGetPerforatedPage() {
        return this.perforatedPage;
    }

    /**
     * Getter for PerforatedPage.
     * Required if `return_envelope` is `true`. The number of the page that should be perforated for
     * use with the return envelope. Must be greater than or equal to `1`. The blank page added by
     * `address_placement=insert_blank_page` will be ignored when considering the perforated page
     * number. To see how perforation will impact your letter design, view our &lt;a
     * href="https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/letter_perf_template.pdf"
     * target="_blank"&gt;perforation guide&lt;/a&gt;.
     * @return Returns the Integer
     */
    public Integer getPerforatedPage() {
        return OptionalNullable.getFrom(perforatedPage);
    }

    /**
     * Setter for PerforatedPage.
     * Required if `return_envelope` is `true`. The number of the page that should be perforated for
     * use with the return envelope. Must be greater than or equal to `1`. The blank page added by
     * `address_placement=insert_blank_page` will be ignored when considering the perforated page
     * number. To see how perforation will impact your letter design, view our &lt;a
     * href="https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/letter_perf_template.pdf"
     * target="_blank"&gt;perforation guide&lt;/a&gt;.
     * @param perforatedPage Value for Integer
     */
    @JsonSetter("perforated_page")
    public void setPerforatedPage(Integer perforatedPage) {
        this.perforatedPage = OptionalNullable.of(perforatedPage);
    }

    /**
     * UnSetter for PerforatedPage.
     * Required if `return_envelope` is `true`. The number of the page that should be perforated for
     * use with the return envelope. Must be greater than or equal to `1`. The blank page added by
     * `address_placement=insert_blank_page` will be ignored when considering the perforated page
     * number. To see how perforation will impact your letter design, view our &lt;a
     * href="https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/letter_perf_template.pdf"
     * target="_blank"&gt;perforation guide&lt;/a&gt;.
     */
    public void unsetPerforatedPage() {
        perforatedPage = null;
    }

    /**
     * Internal Getter for CustomEnvelope.
     * Accepts an envelope ID for any customized envelope with available inventory. If no inventory
     * is available for the specified ID, the letter will not be sent, and an error will be
     * returned. If the letter has more than 6 sheets, it will be sent in a blank flat envelope.
     * Custom envelopes may be created and ordered from the dashboard. This feature is exclusive to
     * certain customers. Upgrade to the appropriate &lt;a
     * href="https://dashboard.lob.com/#/settings/editions" target="_blank"&gt;Print &amp; Mail Edition&lt;/a&gt;
     * to gain access.
     * @return Returns the Internal String
     */
    @JsonGetter("custom_envelope")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCustomEnvelope() {
        return this.customEnvelope;
    }

    /**
     * Getter for CustomEnvelope.
     * Accepts an envelope ID for any customized envelope with available inventory. If no inventory
     * is available for the specified ID, the letter will not be sent, and an error will be
     * returned. If the letter has more than 6 sheets, it will be sent in a blank flat envelope.
     * Custom envelopes may be created and ordered from the dashboard. This feature is exclusive to
     * certain customers. Upgrade to the appropriate &lt;a
     * href="https://dashboard.lob.com/#/settings/editions" target="_blank"&gt;Print &amp; Mail Edition&lt;/a&gt;
     * to gain access.
     * @return Returns the String
     */
    public String getCustomEnvelope() {
        return OptionalNullable.getFrom(customEnvelope);
    }

    /**
     * Setter for CustomEnvelope.
     * Accepts an envelope ID for any customized envelope with available inventory. If no inventory
     * is available for the specified ID, the letter will not be sent, and an error will be
     * returned. If the letter has more than 6 sheets, it will be sent in a blank flat envelope.
     * Custom envelopes may be created and ordered from the dashboard. This feature is exclusive to
     * certain customers. Upgrade to the appropriate &lt;a
     * href="https://dashboard.lob.com/#/settings/editions" target="_blank"&gt;Print &amp; Mail Edition&lt;/a&gt;
     * to gain access.
     * @param customEnvelope Value for String
     */
    @JsonSetter("custom_envelope")
    public void setCustomEnvelope(String customEnvelope) {
        this.customEnvelope = OptionalNullable.of(customEnvelope);
    }

    /**
     * UnSetter for CustomEnvelope.
     * Accepts an envelope ID for any customized envelope with available inventory. If no inventory
     * is available for the specified ID, the letter will not be sent, and an error will be
     * returned. If the letter has more than 6 sheets, it will be sent in a blank flat envelope.
     * Custom envelopes may be created and ordered from the dashboard. This feature is exclusive to
     * certain customers. Upgrade to the appropriate &lt;a
     * href="https://dashboard.lob.com/#/settings/editions" target="_blank"&gt;Print &amp; Mail Edition&lt;/a&gt;
     * to gain access.
     */
    public void unsetCustomEnvelope() {
        customEnvelope = null;
    }

    /**
     * Getter for BillingGroupId.
     * An optional string with the billing group ID to tag your usage with. Is used for billing
     * purposes. Requires special activation to use. See &lt;a href="#tag/Billing-Groups"&gt;Billing Group
     * API&lt;/a&gt; for more information.
     * @return Returns the String
     */
    @JsonGetter("billing_group_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getBillingGroupId() {
        return billingGroupId;
    }

    /**
     * Setter for BillingGroupId.
     * An optional string with the billing group ID to tag your usage with. Is used for billing
     * purposes. Requires special activation to use. See &lt;a href="#tag/Billing-Groups"&gt;Billing Group
     * API&lt;/a&gt; for more information.
     * @param billingGroupId Value for String
     */
    @JsonSetter("billing_group_id")
    public void setBillingGroupId(String billingGroupId) {
        this.billingGroupId = billingGroupId;
    }

    /**
     * Getter for QrCode.
     * Customize and place a QR code on the creative at the required position.
     * @return Returns the QrCode
     */
    @JsonGetter("qr_code")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public QrCode getQrCode() {
        return qrCode;
    }

    /**
     * Setter for QrCode.
     * Customize and place a QR code on the creative at the required position.
     * @param qrCode Value for QrCode
     */
    @JsonSetter("qr_code")
    public void setQrCode(QrCode qrCode) {
        this.qrCode = qrCode;
    }

    /**
     * Getter for UseType.
     * The use type for each mailpiece. Can be one of marketing, operational, or null. Null use_type
     * is only allowed if an account default use_type is selected in Account Settings. For more
     * information on use_type, see our [Help Center
     * article](https://help.lob.com/print-and-mail/building-a-mail-strategy/managing-mail-settings/declaring-mail-use-type).
     * @return Returns the LtrUseTypeEnum
     */
    @JsonGetter("use_type")
    public LtrUseTypeEnum getUseType() {
        return useType;
    }

    /**
     * Setter for UseType.
     * The use type for each mailpiece. Can be one of marketing, operational, or null. Null use_type
     * is only allowed if an account default use_type is selected in Account Settings. For more
     * information on use_type, see our [Help Center
     * article](https://help.lob.com/print-and-mail/building-a-mail-strategy/managing-mail-settings/declaring-mail-use-type).
     * @param useType Value for LtrUseTypeEnum
     */
    @JsonSetter("use_type")
    public void setUseType(LtrUseTypeEnum useType) {
        this.useType = useType;
    }

    /**
     * Getter for Fsc.
     * This is in beta. Contact support{@literal @}lob.com or your account contact to learn more. Not available
     * for `A4` letter size.
     * @return Returns the Boolean
     */
    @JsonGetter("fsc")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getFsc() {
        return fsc;
    }

    /**
     * Setter for Fsc.
     * This is in beta. Contact support{@literal @}lob.com or your account contact to learn more. Not available
     * for `A4` letter size.
     * @param fsc Value for Boolean
     */
    @JsonSetter("fsc")
    public void setFsc(Boolean fsc) {
        this.fsc = fsc;
    }

    /**
     * Converts this LetterEditable into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "LetterEditable [" + "to=" + to + ", from=" + from + ", file=" + file + ", color="
                + color + ", useType=" + useType + ", description=" + description + ", metadata="
                + metadata + ", mailType=" + mailType + ", mergeVariables=" + mergeVariables
                + ", sendDate=" + sendDate + ", extraService=" + extraService + ", cards=" + cards
                + ", doubleSided=" + doubleSided + ", addressPlacement=" + addressPlacement
                + ", returnEnvelope=" + returnEnvelope + ", perforatedPage=" + perforatedPage
                + ", customEnvelope=" + customEnvelope + ", billingGroupId=" + billingGroupId
                + ", qrCode=" + qrCode + ", fsc=" + fsc + "]";
    }

    /**
     * Builds a new {@link LetterEditable.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link LetterEditable.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(to, from, file, color, useType)
                .metadata(getMetadata())
                .mailType(getMailType())
                .sendDate(getSendDate())
                .doubleSided(getDoubleSided())
                .addressPlacement(getAddressPlacement())
                .returnEnvelope(getReturnEnvelope())
                .billingGroupId(getBillingGroupId())
                .qrCode(getQrCode())
                .fsc(getFsc());
        builder.description = internalGetDescription();
        builder.mergeVariables = internalGetMergeVariables();
        builder.extraService = internalGetExtraService();
        builder.cards = internalGetCards();
        builder.perforatedPage = internalGetPerforatedPage();
        builder.customEnvelope = internalGetCustomEnvelope();
        return builder;
    }

    /**
     * Class to build instances of {@link LetterEditable}.
     */
    public static class Builder {
        private LetterEditableTo to;
        private LetterEditableFrom from;
        private LtrFile file;
        private boolean color;
        private LtrUseTypeEnum useType;
        private OptionalNullable<String> description;
        private Map<String, String> metadata;
        private MailTypeEnum mailType = MailTypeEnum.USPS_FIRST_CLASS;
        private OptionalNullable<Object> mergeVariables;
        private SendDate sendDate;
        private OptionalNullable<ExtraServiceEnum> extraService;
        private OptionalNullable<List<String>> cards;
        private Boolean doubleSided = true;
        private AddressPlacementEnum addressPlacement = AddressPlacementEnum.TOP_FIRST_PAGE;
        private ReturnEnvelopeUserProvided returnEnvelope;
        private OptionalNullable<Integer> perforatedPage;
        private OptionalNullable<String> customEnvelope;
        private String billingGroupId;
        private QrCode qrCode;
        private Boolean fsc = false;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  to  LetterEditableTo value for to.
         * @param  from  LetterEditableFrom value for from.
         * @param  file  LtrFile value for file.
         * @param  color  boolean value for color.
         * @param  useType  LtrUseTypeEnum value for useType.
         */
        public Builder(LetterEditableTo to, LetterEditableFrom from, LtrFile file, boolean color,
                LtrUseTypeEnum useType) {
            this.to = to;
            this.from = from;
            this.file = file;
            this.color = color;
            this.useType = useType;
        }

        /**
         * Setter for to.
         * @param  to  LetterEditableTo value for to.
         * @return Builder
         */
        public Builder to(LetterEditableTo to) {
            this.to = to;
            return this;
        }

        /**
         * Setter for from.
         * @param  from  LetterEditableFrom value for from.
         * @return Builder
         */
        public Builder from(LetterEditableFrom from) {
            this.from = from;
            return this;
        }

        /**
         * Setter for file.
         * @param  file  LtrFile value for file.
         * @return Builder
         */
        public Builder file(LtrFile file) {
            this.file = file;
            return this;
        }

        /**
         * Setter for color.
         * @param  color  boolean value for color.
         * @return Builder
         */
        public Builder color(boolean color) {
            this.color = color;
            return this;
        }

        /**
         * Setter for useType.
         * @param  useType  LtrUseTypeEnum value for useType.
         * @return Builder
         */
        public Builder useType(LtrUseTypeEnum useType) {
            this.useType = useType;
            return this;
        }

        /**
         * Setter for description.
         * @param  description  String value for description.
         * @return Builder
         */
        public Builder description(String description) {
            this.description = OptionalNullable.of(description);
            return this;
        }

        /**
         * UnSetter for description.
         * @return Builder
         */
        public Builder unsetDescription() {
            description = null;
            return this;
        }

        /**
         * Setter for metadata.
         * @param  metadata  Map of String, value for metadata.
         * @return Builder
         */
        public Builder metadata(Map<String, String> metadata) {
            this.metadata = metadata;
            return this;
        }

        /**
         * Setter for mailType.
         * @param  mailType  MailTypeEnum value for mailType.
         * @return Builder
         */
        public Builder mailType(MailTypeEnum mailType) {
            this.mailType = mailType;
            return this;
        }

        /**
         * Setter for mergeVariables.
         * @param  mergeVariables  Object value for mergeVariables.
         * @return Builder
         */
        public Builder mergeVariables(Object mergeVariables) {
            this.mergeVariables = OptionalNullable.of(mergeVariables);
            return this;
        }

        /**
         * UnSetter for mergeVariables.
         * @return Builder
         */
        public Builder unsetMergeVariables() {
            mergeVariables = null;
            return this;
        }

        /**
         * Setter for sendDate.
         * @param  sendDate  SendDate value for sendDate.
         * @return Builder
         */
        public Builder sendDate(SendDate sendDate) {
            this.sendDate = sendDate;
            return this;
        }

        /**
         * Setter for extraService.
         * @param  extraService  ExtraServiceEnum value for extraService.
         * @return Builder
         */
        public Builder extraService(ExtraServiceEnum extraService) {
            this.extraService = OptionalNullable.of(extraService);
            return this;
        }

        /**
         * UnSetter for extraService.
         * @return Builder
         */
        public Builder unsetExtraService() {
            extraService = null;
            return this;
        }

        /**
         * Setter for cards.
         * @param  cards  List of String value for cards.
         * @return Builder
         */
        public Builder cards(List<String> cards) {
            this.cards = OptionalNullable.of(cards);
            return this;
        }

        /**
         * UnSetter for cards.
         * @return Builder
         */
        public Builder unsetCards() {
            cards = null;
            return this;
        }

        /**
         * Setter for doubleSided.
         * @param  doubleSided  Boolean value for doubleSided.
         * @return Builder
         */
        public Builder doubleSided(Boolean doubleSided) {
            this.doubleSided = doubleSided;
            return this;
        }

        /**
         * Setter for addressPlacement.
         * @param  addressPlacement  AddressPlacementEnum value for addressPlacement.
         * @return Builder
         */
        public Builder addressPlacement(AddressPlacementEnum addressPlacement) {
            this.addressPlacement = addressPlacement;
            return this;
        }

        /**
         * Setter for returnEnvelope.
         * @param  returnEnvelope  ReturnEnvelopeUserProvided value for returnEnvelope.
         * @return Builder
         */
        public Builder returnEnvelope(ReturnEnvelopeUserProvided returnEnvelope) {
            this.returnEnvelope = returnEnvelope;
            return this;
        }

        /**
         * Setter for perforatedPage.
         * @param  perforatedPage  Integer value for perforatedPage.
         * @return Builder
         */
        public Builder perforatedPage(Integer perforatedPage) {
            this.perforatedPage = OptionalNullable.of(perforatedPage);
            return this;
        }

        /**
         * UnSetter for perforatedPage.
         * @return Builder
         */
        public Builder unsetPerforatedPage() {
            perforatedPage = null;
            return this;
        }

        /**
         * Setter for customEnvelope.
         * @param  customEnvelope  String value for customEnvelope.
         * @return Builder
         */
        public Builder customEnvelope(String customEnvelope) {
            this.customEnvelope = OptionalNullable.of(customEnvelope);
            return this;
        }

        /**
         * UnSetter for customEnvelope.
         * @return Builder
         */
        public Builder unsetCustomEnvelope() {
            customEnvelope = null;
            return this;
        }

        /**
         * Setter for billingGroupId.
         * @param  billingGroupId  String value for billingGroupId.
         * @return Builder
         */
        public Builder billingGroupId(String billingGroupId) {
            this.billingGroupId = billingGroupId;
            return this;
        }

        /**
         * Setter for qrCode.
         * @param  qrCode  QrCode value for qrCode.
         * @return Builder
         */
        public Builder qrCode(QrCode qrCode) {
            this.qrCode = qrCode;
            return this;
        }

        /**
         * Setter for fsc.
         * @param  fsc  Boolean value for fsc.
         * @return Builder
         */
        public Builder fsc(Boolean fsc) {
            this.fsc = fsc;
            return this;
        }

        /**
         * Builds a new {@link LetterEditable} object using the set fields.
         * @return {@link LetterEditable}
         */
        public LetterEditable build() {
            return new LetterEditable(to, from, file, color, useType, description, metadata,
                    mailType, mergeVariables, sendDate, extraService, cards, doubleSided,
                    addressPlacement, returnEnvelope, perforatedPage, customEnvelope,
                    billingGroupId, qrCode, fsc);
        }
    }
}
