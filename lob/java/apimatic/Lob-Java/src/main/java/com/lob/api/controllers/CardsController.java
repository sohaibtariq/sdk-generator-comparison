/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.lob.api.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.lob.api.ApiHelper;
import com.lob.api.Server;
import com.lob.api.exceptions.ApiException;
import com.lob.api.exceptions.ErrorErrorException;
import com.lob.api.http.request.HttpMethod;
import com.lob.api.models.BeforeAfter;
import com.lob.api.models.Card;
import com.lob.api.models.CardDeletion;
import com.lob.api.models.CardEditable;
import com.lob.api.models.CardsResponse;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class CardsController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public CardsController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * Returns a list of your cards. The cards are returned sorted by creation date, with the most
     * recently created addresses appearing first.
     * @param  limit  Optional parameter: How many results to return.
     * @param  beforeAfter  Optional parameter: `before` and `after` are both optional but only one
     *         of them can be in the query at a time.
     * @param  include  Optional parameter: Request that the response include the total count by
     *         specifying `include=["total_count"]`.
     * @return    Returns the CardsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public CardsResponse cardsList(
            final Integer limit,
            final BeforeAfter beforeAfter,
            final List<String> include) throws ApiException, IOException {
        return prepareCardsListRequest(limit, beforeAfter, include).execute();
    }

    /**
     * Returns a list of your cards. The cards are returned sorted by creation date, with the most
     * recently created addresses appearing first.
     * @param  limit  Optional parameter: How many results to return.
     * @param  beforeAfter  Optional parameter: `before` and `after` are both optional but only one
     *         of them can be in the query at a time.
     * @param  include  Optional parameter: Request that the response include the total count by
     *         specifying `include=["total_count"]`.
     * @return    Returns the CardsResponse response from the API call
     */
    public CompletableFuture<CardsResponse> cardsListAsync(
            final Integer limit,
            final BeforeAfter beforeAfter,
            final List<String> include) {
        try { 
            return prepareCardsListRequest(limit, beforeAfter, include).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for cardsList.
     */
    private ApiCall<CardsResponse, ApiException> prepareCardsListRequest(
            final Integer limit,
            final BeforeAfter beforeAfter,
            final List<String> include) throws IOException {
        return new ApiCall.Builder<CardsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/cards")
                        .queryParam(param -> param.key("limit")
                                .value((limit != null) ? limit : 10).isRequired(false))
                        .queryParam(param -> param.key("before/after")
                                .value(beforeAfter).isRequired(false))
                        .queryParam(param -> param.key("include")
                                .value(include).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, CardsResponse.class))
                        .nullify404(false)
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Error",
                                (reason, context) -> new ErrorErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Creates a new card given information.
     * @param  body  Required parameter: Example:
     * @return    Returns the Card response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Card cardCreate(
            final CardEditable body) throws ApiException, IOException {
        return prepareCardCreateRequest(body).execute();
    }

    /**
     * Creates a new card given information.
     * @param  body  Required parameter: Example:
     * @return    Returns the Card response from the API call
     */
    public CompletableFuture<Card> cardCreateAsync(
            final CardEditable body) {
        try { 
            return prepareCardCreateRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for cardCreate.
     */
    private ApiCall<Card, ApiException> prepareCardCreateRequest(
            final CardEditable body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Card, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/cards")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Card.class))
                        .nullify404(false)
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Error",
                                (reason, context) -> new ErrorErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Retrieves the details of an existing card. You need only supply the unique customer
     * identifier that was returned upon card creation.
     * @param  cardId  Required parameter: id of the card
     * @return    Returns the Card response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Card cardRetrieve(
            final String cardId) throws ApiException, IOException {
        return prepareCardRetrieveRequest(cardId).execute();
    }

    /**
     * Retrieves the details of an existing card. You need only supply the unique customer
     * identifier that was returned upon card creation.
     * @param  cardId  Required parameter: id of the card
     * @return    Returns the Card response from the API call
     */
    public CompletableFuture<Card> cardRetrieveAsync(
            final String cardId) {
        try { 
            return prepareCardRetrieveRequest(cardId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for cardRetrieve.
     */
    private ApiCall<Card, ApiException> prepareCardRetrieveRequest(
            final String cardId) throws IOException {
        return new ApiCall.Builder<Card, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/cards/{card_id}")
                        .templateParam(param -> param.key("card_id").value(cardId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Card.class))
                        .nullify404(false)
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Error",
                                (reason, context) -> new ErrorErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Update the details of an existing card. You need only supply the unique identifier that was
     * returned upon card creation.
     * @param  cardId  Required parameter: id of the card
     * @param  description  Optional parameter: Description of the card.
     * @param  autoReorder  Optional parameter: Allows for auto reordering
     * @param  reorderQuantity  Optional parameter: The quantity of items to be reordered (only
     *         required when auto_reorder is true).
     * @return    Returns the Card response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Card cardUpdate(
            final String cardId,
            final String description,
            final Boolean autoReorder,
            final Double reorderQuantity) throws ApiException, IOException {
        return prepareCardUpdateRequest(cardId, description, autoReorder,
                reorderQuantity).execute();
    }

    /**
     * Update the details of an existing card. You need only supply the unique identifier that was
     * returned upon card creation.
     * @param  cardId  Required parameter: id of the card
     * @param  description  Optional parameter: Description of the card.
     * @param  autoReorder  Optional parameter: Allows for auto reordering
     * @param  reorderQuantity  Optional parameter: The quantity of items to be reordered (only
     *         required when auto_reorder is true).
     * @return    Returns the Card response from the API call
     */
    public CompletableFuture<Card> cardUpdateAsync(
            final String cardId,
            final String description,
            final Boolean autoReorder,
            final Double reorderQuantity) {
        try { 
            return prepareCardUpdateRequest(cardId, description, autoReorder,
            reorderQuantity).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for cardUpdate.
     */
    private ApiCall<Card, ApiException> prepareCardUpdateRequest(
            final String cardId,
            final String description,
            final Boolean autoReorder,
            final Double reorderQuantity) throws IOException {
        return new ApiCall.Builder<Card, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/cards/{card_id}")
                        .formParam(param -> param.key("description")
                                .value(description).isRequired(false))
                        .formParam(param -> param.key("auto_reorder")
                                .value(autoReorder).isRequired(false))
                        .formParam(param -> param.key("reorder_quantity")
                                .value(reorderQuantity).isRequired(false))
                        .templateParam(param -> param.key("card_id").value(cardId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/x-www-form-urlencoded").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Card.class))
                        .nullify404(false)
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Error",
                                (reason, context) -> new ErrorErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Delete an existing card. You need only supply the unique identifier that was returned upon
     * card creation.
     * @param  cardId  Required parameter: id of the card
     * @return    Returns the CardDeletion response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public CardDeletion cardDelete(
            final String cardId) throws ApiException, IOException {
        return prepareCardDeleteRequest(cardId).execute();
    }

    /**
     * Delete an existing card. You need only supply the unique identifier that was returned upon
     * card creation.
     * @param  cardId  Required parameter: id of the card
     * @return    Returns the CardDeletion response from the API call
     */
    public CompletableFuture<CardDeletion> cardDeleteAsync(
            final String cardId) {
        try { 
            return prepareCardDeleteRequest(cardId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for cardDelete.
     */
    private ApiCall<CardDeletion, ApiException> prepareCardDeleteRequest(
            final String cardId) throws IOException {
        return new ApiCall.Builder<CardDeletion, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/cards/{card_id}")
                        .templateParam(param -> param.key("card_id").value(cardId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, CardDeletion.class))
                        .nullify404(false)
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Error",
                                (reason, context) -> new ErrorErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}