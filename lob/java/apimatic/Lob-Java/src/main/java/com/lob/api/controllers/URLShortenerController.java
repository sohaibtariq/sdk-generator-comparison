/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.lob.api.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.lob.api.ApiHelper;
import com.lob.api.Server;
import com.lob.api.exceptions.ApiException;
import com.lob.api.exceptions.ErrorErrorException;
import com.lob.api.http.request.HttpMethod;
import com.lob.api.models.DomainResponse;
import com.lob.api.models.DomainsResponse;
import com.lob.api.models.LinkResponse;
import com.lob.api.models.LinkSingle;
import com.lob.api.models.LinksResponse;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class URLShortenerController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public URLShortenerController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * Retrieve details for a single domain.
     * @param  domainId  Required parameter: Unique identifier for a domain.
     * @return    Returns the DomainResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DomainResponse domainGet(
            final String domainId) throws ApiException, IOException {
        return prepareDomainGetRequest(domainId).execute();
    }

    /**
     * Retrieve details for a single domain.
     * @param  domainId  Required parameter: Unique identifier for a domain.
     * @return    Returns the DomainResponse response from the API call
     */
    public CompletableFuture<DomainResponse> domainGetAsync(
            final String domainId) {
        try { 
            return prepareDomainGetRequest(domainId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for domainGet.
     */
    private ApiCall<DomainResponse, ApiException> prepareDomainGetRequest(
            final String domainId) throws IOException {
        return new ApiCall.Builder<DomainResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/domains/{domain_id}")
                        .templateParam(param -> param.key("domain_id").value(domainId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, DomainResponse.class))
                        .nullify404(false)
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Error",
                                (reason, context) -> new ErrorErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Delete a registered domain. This operation can only be performed if all associated links with
     * the domain are deleted.
     * @param  domainId  Required parameter: Unique identifier for a domain.
     * @return    Returns the DomainResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DomainResponse domainDelete(
            final String domainId) throws ApiException, IOException {
        return prepareDomainDeleteRequest(domainId).execute();
    }

    /**
     * Delete a registered domain. This operation can only be performed if all associated links with
     * the domain are deleted.
     * @param  domainId  Required parameter: Unique identifier for a domain.
     * @return    Returns the DomainResponse response from the API call
     */
    public CompletableFuture<DomainResponse> domainDeleteAsync(
            final String domainId) {
        try { 
            return prepareDomainDeleteRequest(domainId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for domainDelete.
     */
    private ApiCall<DomainResponse, ApiException> prepareDomainDeleteRequest(
            final String domainId) throws IOException {
        return new ApiCall.Builder<DomainResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/domains/{domain_id}")
                        .templateParam(param -> param.key("domain_id").value(domainId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, DomainResponse.class))
                        .nullify404(false)
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Error",
                                (reason, context) -> new ErrorErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Add a new custom domain that can be used to create custom links.
     * @param  domain  Required parameter: The registered domain/hostname.
     * @return    Returns the DomainResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DomainResponse domainCreate(
            final String domain) throws ApiException, IOException {
        return prepareDomainCreateRequest(domain).execute();
    }

    /**
     * Add a new custom domain that can be used to create custom links.
     * @param  domain  Required parameter: The registered domain/hostname.
     * @return    Returns the DomainResponse response from the API call
     */
    public CompletableFuture<DomainResponse> domainCreateAsync(
            final String domain) {
        try { 
            return prepareDomainCreateRequest(domain).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for domainCreate.
     */
    private ApiCall<DomainResponse, ApiException> prepareDomainCreateRequest(
            final String domain) throws IOException {
        return new ApiCall.Builder<DomainResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/domains")
                        .formParam(param -> param.key("domain")
                                .value(domain))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/x-www-form-urlencoded").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, DomainResponse.class))
                        .nullify404(false)
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Error",
                                (reason, context) -> new ErrorErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Retrieve a list of all created domains.
     * @return    Returns the DomainsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DomainsResponse domainList() throws ApiException, IOException {
        return prepareDomainListRequest().execute();
    }

    /**
     * Retrieve a list of all created domains.
     * @return    Returns the DomainsResponse response from the API call
     */
    public CompletableFuture<DomainsResponse> domainListAsync() {
        try { 
            return prepareDomainListRequest().executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for domainList.
     */
    private ApiCall<DomainsResponse, ApiException> prepareDomainListRequest() throws IOException {
        return new ApiCall.Builder<DomainsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/domains")
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, DomainsResponse.class))
                        .nullify404(false)
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Error",
                                (reason, context) -> new ErrorErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Delete all associated links for a domain.
     * @param  domainId  Required parameter: Unique identifier for a domain.
     * @return    Returns the DomainsResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public DomainsResponse domainDeleteLinks(
            final String domainId) throws ApiException, IOException {
        return prepareDomainDeleteLinksRequest(domainId).execute();
    }

    /**
     * Delete all associated links for a domain.
     * @param  domainId  Required parameter: Unique identifier for a domain.
     * @return    Returns the DomainsResponse response from the API call
     */
    public CompletableFuture<DomainsResponse> domainDeleteLinksAsync(
            final String domainId) {
        try { 
            return prepareDomainDeleteLinksRequest(domainId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for domainDeleteLinks.
     */
    private ApiCall<DomainsResponse, ApiException> prepareDomainDeleteLinksRequest(
            final String domainId) throws IOException {
        return new ApiCall.Builder<DomainsResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/domains/{domain_id}/links")
                        .templateParam(param -> param.key("domain_id").value(domainId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, DomainsResponse.class))
                        .nullify404(false)
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Error",
                                (reason, context) -> new ErrorErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Retrieves a list of shortened links. The list is sorted by creation date, with the most
     * recently created appearing first.
     * @param  limit  Optional parameter: How many results to return.
     * @param  offset  Optional parameter: An integer that designates the offset at which to begin
     *         returning results. Defaults to 0.
     * @param  include  Optional parameter: Request that the response include the total count by
     *         specifying `include=["total_count"]`.
     * @param  dateCreated  Optional parameter: Filter by date created. Accepted formats are
     *         ISO-8601 date or datetime, e.g. `{ "gt": "2012-01-01", "lt": "2012-01-31T12:34:56Z"
     *         }` where `gt` is &gt;, `lt` is &lt;, `gte` is ≥, and `lte` is ≤.
     * @param  metadata  Optional parameter: Filter by metadata key-value pair`.
     * @param  campaignId  Optional parameter: Filter the links generated for a particular campaign
     *         using its campaign id.
     * @param  clicked  Optional parameter: Retrieve the list of links that have been opened.
     * @param  billingGroupId  Optional parameter: Filter the links generated for a particular
     *         billing group id.
     * @return    Returns the LinksResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public LinksResponse linksList(
            final Integer limit,
            final Integer offset,
            final List<String> include,
            final Map<String, String> dateCreated,
            final Map<String, String> metadata,
            final String campaignId,
            final Boolean clicked,
            final String billingGroupId) throws ApiException, IOException {
        return prepareLinksListRequest(limit, offset, include, dateCreated, metadata, campaignId,
                clicked, billingGroupId).execute();
    }

    /**
     * Retrieves a list of shortened links. The list is sorted by creation date, with the most
     * recently created appearing first.
     * @param  limit  Optional parameter: How many results to return.
     * @param  offset  Optional parameter: An integer that designates the offset at which to begin
     *         returning results. Defaults to 0.
     * @param  include  Optional parameter: Request that the response include the total count by
     *         specifying `include=["total_count"]`.
     * @param  dateCreated  Optional parameter: Filter by date created. Accepted formats are
     *         ISO-8601 date or datetime, e.g. `{ "gt": "2012-01-01", "lt": "2012-01-31T12:34:56Z"
     *         }` where `gt` is &gt;, `lt` is &lt;, `gte` is ≥, and `lte` is ≤.
     * @param  metadata  Optional parameter: Filter by metadata key-value pair`.
     * @param  campaignId  Optional parameter: Filter the links generated for a particular campaign
     *         using its campaign id.
     * @param  clicked  Optional parameter: Retrieve the list of links that have been opened.
     * @param  billingGroupId  Optional parameter: Filter the links generated for a particular
     *         billing group id.
     * @return    Returns the LinksResponse response from the API call
     */
    public CompletableFuture<LinksResponse> linksListAsync(
            final Integer limit,
            final Integer offset,
            final List<String> include,
            final Map<String, String> dateCreated,
            final Map<String, String> metadata,
            final String campaignId,
            final Boolean clicked,
            final String billingGroupId) {
        try { 
            return prepareLinksListRequest(limit, offset, include, dateCreated, metadata, campaignId,
            clicked, billingGroupId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for linksList.
     */
    private ApiCall<LinksResponse, ApiException> prepareLinksListRequest(
            final Integer limit,
            final Integer offset,
            final List<String> include,
            final Map<String, String> dateCreated,
            final Map<String, String> metadata,
            final String campaignId,
            final Boolean clicked,
            final String billingGroupId) throws IOException {
        return new ApiCall.Builder<LinksResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/links")
                        .queryParam(param -> param.key("limit")
                                .value((limit != null) ? limit : 10).isRequired(false))
                        .queryParam(param -> param.key("offset")
                                .value((offset != null) ? offset : 0).isRequired(false))
                        .queryParam(param -> param.key("include")
                                .value(include).isRequired(false))
                        .queryParam(param -> param.key("date_created")
                                .value(dateCreated).isRequired(false))
                        .queryParam(param -> param.key("metadata")
                                .value(metadata).isRequired(false))
                        .queryParam(param -> param.key("campaign_id")
                                .value(campaignId).isRequired(false))
                        .queryParam(param -> param.key("clicked")
                                .value(clicked).isRequired(false))
                        .queryParam(param -> param.key("billing_group_id")
                                .value(billingGroupId).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, LinksResponse.class))
                        .nullify404(false)
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Error",
                                (reason, context) -> new ErrorErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Retrievs a single shortened link.
     * @param  linkId  Required parameter: Unique identifier for a link.
     * @return    Returns the LinkResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public LinkResponse linksGet(
            final String linkId) throws ApiException, IOException {
        return prepareLinksGetRequest(linkId).execute();
    }

    /**
     * Retrievs a single shortened link.
     * @param  linkId  Required parameter: Unique identifier for a link.
     * @return    Returns the LinkResponse response from the API call
     */
    public CompletableFuture<LinkResponse> linksGetAsync(
            final String linkId) {
        try { 
            return prepareLinksGetRequest(linkId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for linksGet.
     */
    private ApiCall<LinkResponse, ApiException> prepareLinksGetRequest(
            final String linkId) throws IOException {
        return new ApiCall.Builder<LinkResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/links/{link_id}")
                        .templateParam(param -> param.key("link_id").value(linkId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, LinkResponse.class))
                        .nullify404(false)
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Error",
                                (reason, context) -> new ErrorErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Update any of the properties of a shortened link.
     * @param  linkId  Required parameter: Unique identifier for a link.
     * @param  redirectLink  Required parameter: The original target URL.
     * @param  domain  Optional parameter: The registered domain to be used for the short URL.
     * @param  slug  Optional parameter: The unique path for the shortened URL, if empty a unique
     *         path will be used.
     * @param  metadataTag  Optional parameter: Use metadata to store custom information for tagging
     *         and labeling back to your internal systems. Must be an object with up to 20 key-value
     *         pairs. Keys must be at most 40 characters and values must be at most 500 characters.
     *         Neither can contain the characters `"` and `\`. i.e. '{"customer_id" :
     *         "NEWYORK2015"}' Nested objects are not supported. See [Metadata](#section/Metadata)
     *         for more information.
     * @param  billingGroupId  Optional parameter: An optional string with the billing group ID to
     *         tag your usage with. Is used for billing purposes. Requires special activation to
     *         use. See &lt;a href="#tag/Billing-Groups"&gt;Billing Group API&lt;/a&gt; for more
     *         information.
     * @return    Returns the LinkResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public LinkResponse linkUpdate(
            final String linkId,
            final String redirectLink,
            final String domain,
            final String slug,
            final Map<String, String> metadataTag,
            final String billingGroupId) throws ApiException, IOException {
        return prepareLinkUpdateRequest(linkId, redirectLink, domain, slug, metadataTag,
                billingGroupId).execute();
    }

    /**
     * Update any of the properties of a shortened link.
     * @param  linkId  Required parameter: Unique identifier for a link.
     * @param  redirectLink  Required parameter: The original target URL.
     * @param  domain  Optional parameter: The registered domain to be used for the short URL.
     * @param  slug  Optional parameter: The unique path for the shortened URL, if empty a unique
     *         path will be used.
     * @param  metadataTag  Optional parameter: Use metadata to store custom information for tagging
     *         and labeling back to your internal systems. Must be an object with up to 20 key-value
     *         pairs. Keys must be at most 40 characters and values must be at most 500 characters.
     *         Neither can contain the characters `"` and `\`. i.e. '{"customer_id" :
     *         "NEWYORK2015"}' Nested objects are not supported. See [Metadata](#section/Metadata)
     *         for more information.
     * @param  billingGroupId  Optional parameter: An optional string with the billing group ID to
     *         tag your usage with. Is used for billing purposes. Requires special activation to
     *         use. See &lt;a href="#tag/Billing-Groups"&gt;Billing Group API&lt;/a&gt; for more
     *         information.
     * @return    Returns the LinkResponse response from the API call
     */
    public CompletableFuture<LinkResponse> linkUpdateAsync(
            final String linkId,
            final String redirectLink,
            final String domain,
            final String slug,
            final Map<String, String> metadataTag,
            final String billingGroupId) {
        try { 
            return prepareLinkUpdateRequest(linkId, redirectLink, domain, slug, metadataTag,
            billingGroupId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for linkUpdate.
     */
    private ApiCall<LinkResponse, ApiException> prepareLinkUpdateRequest(
            final String linkId,
            final String redirectLink,
            final String domain,
            final String slug,
            final Map<String, String> metadataTag,
            final String billingGroupId) throws IOException {
        return new ApiCall.Builder<LinkResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/links/{link_id}")
                        .formParam(param -> param.key("redirect_link")
                                .value(redirectLink))
                        .formParam(param -> param.key("domain")
                                .value(domain).isRequired(false))
                        .formParam(param -> param.key("slug")
                                .value(slug).isRequired(false))
                        .formParam(param -> param.key("metadata_tag")
                                .value(metadataTag).isRequired(false))
                        .formParam(param -> param.key("billing_group_id")
                                .value(billingGroupId).isRequired(false))
                        .templateParam(param -> param.key("link_id").value(linkId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/x-www-form-urlencoded").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PATCH))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, LinkResponse.class))
                        .nullify404(false)
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Error",
                                (reason, context) -> new ErrorErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Delete the shortened link.
     * @param  linkId  Required parameter: Unique identifier for a link.
     * @return    Returns the LinkResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public LinkResponse linksDelete(
            final String linkId) throws ApiException, IOException {
        return prepareLinksDeleteRequest(linkId).execute();
    }

    /**
     * Delete the shortened link.
     * @param  linkId  Required parameter: Unique identifier for a link.
     * @return    Returns the LinkResponse response from the API call
     */
    public CompletableFuture<LinkResponse> linksDeleteAsync(
            final String linkId) {
        try { 
            return prepareLinksDeleteRequest(linkId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for linksDelete.
     */
    private ApiCall<LinkResponse, ApiException> prepareLinksDeleteRequest(
            final String linkId) throws IOException {
        return new ApiCall.Builder<LinkResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/links/{link_id}")
                        .templateParam(param -> param.key("link_id").value(linkId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, LinkResponse.class))
                        .nullify404(false)
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Error",
                                (reason, context) -> new ErrorErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Given a long URL, shorten your URL either by using a custom domain or Lob's own short domain.
     * @param  redirectLink  Required parameter: The original target URL.
     * @param  domain  Optional parameter: The registered domain to be used for the short URL.
     * @param  slug  Optional parameter: The unique path for the shortened URL, if empty a unique
     *         path will be used.
     * @param  metadataTag  Optional parameter: Use metadata to store custom information for tagging
     *         and labeling back to your internal systems. Must be an object with up to 20 key-value
     *         pairs. Keys must be at most 40 characters and values must be at most 500 characters.
     *         Neither can contain the characters `"` and `\`. i.e. '{"customer_id" :
     *         "NEWYORK2015"}' Nested objects are not supported. See [Metadata](#section/Metadata)
     *         for more information.
     * @param  billingGroupId  Optional parameter: An optional string with the billing group ID to
     *         tag your usage with. Is used for billing purposes. Requires special activation to
     *         use. See &lt;a href="#tag/Billing-Groups"&gt;Billing Group API&lt;/a&gt; for more
     *         information.
     * @return    Returns the LinkResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public LinkResponse linkCreate(
            final String redirectLink,
            final String domain,
            final String slug,
            final Map<String, String> metadataTag,
            final String billingGroupId) throws ApiException, IOException {
        return prepareLinkCreateRequest(redirectLink, domain, slug, metadataTag,
                billingGroupId).execute();
    }

    /**
     * Given a long URL, shorten your URL either by using a custom domain or Lob's own short domain.
     * @param  redirectLink  Required parameter: The original target URL.
     * @param  domain  Optional parameter: The registered domain to be used for the short URL.
     * @param  slug  Optional parameter: The unique path for the shortened URL, if empty a unique
     *         path will be used.
     * @param  metadataTag  Optional parameter: Use metadata to store custom information for tagging
     *         and labeling back to your internal systems. Must be an object with up to 20 key-value
     *         pairs. Keys must be at most 40 characters and values must be at most 500 characters.
     *         Neither can contain the characters `"` and `\`. i.e. '{"customer_id" :
     *         "NEWYORK2015"}' Nested objects are not supported. See [Metadata](#section/Metadata)
     *         for more information.
     * @param  billingGroupId  Optional parameter: An optional string with the billing group ID to
     *         tag your usage with. Is used for billing purposes. Requires special activation to
     *         use. See &lt;a href="#tag/Billing-Groups"&gt;Billing Group API&lt;/a&gt; for more
     *         information.
     * @return    Returns the LinkResponse response from the API call
     */
    public CompletableFuture<LinkResponse> linkCreateAsync(
            final String redirectLink,
            final String domain,
            final String slug,
            final Map<String, String> metadataTag,
            final String billingGroupId) {
        try { 
            return prepareLinkCreateRequest(redirectLink, domain, slug, metadataTag,
            billingGroupId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for linkCreate.
     */
    private ApiCall<LinkResponse, ApiException> prepareLinkCreateRequest(
            final String redirectLink,
            final String domain,
            final String slug,
            final Map<String, String> metadataTag,
            final String billingGroupId) throws IOException {
        return new ApiCall.Builder<LinkResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/links/shorten")
                        .formParam(param -> param.key("redirect_link")
                                .value(redirectLink))
                        .formParam(param -> param.key("domain")
                                .value(domain).isRequired(false))
                        .formParam(param -> param.key("slug")
                                .value(slug).isRequired(false))
                        .formParam(param -> param.key("metadata_tag")
                                .value(metadataTag).isRequired(false))
                        .formParam(param -> param.key("billing_group_id")
                                .value(billingGroupId).isRequired(false))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/x-www-form-urlencoded").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, LinkResponse.class))
                        .nullify404(false)
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Error",
                                (reason, context) -> new ErrorErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Shortens a list of links in a single request.
     * @param  body  Required parameter: Example:
     * @return    Returns the LinksResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public LinksResponse linkBulkCreate(
            final List<LinkSingle> body) throws ApiException, IOException {
        return prepareLinkBulkCreateRequest(body).execute();
    }

    /**
     * Shortens a list of links in a single request.
     * @param  body  Required parameter: Example:
     * @return    Returns the LinksResponse response from the API call
     */
    public CompletableFuture<LinksResponse> linkBulkCreateAsync(
            final List<LinkSingle> body) {
        try { 
            return prepareLinkBulkCreateRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for linkBulkCreate.
     */
    private ApiCall<LinksResponse, ApiException> prepareLinkBulkCreateRequest(
            final List<LinkSingle> body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<LinksResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/links/shorten/bulk")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, LinksResponse.class))
                        .nullify404(false)
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Error",
                                (reason, context) -> new ErrorErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}