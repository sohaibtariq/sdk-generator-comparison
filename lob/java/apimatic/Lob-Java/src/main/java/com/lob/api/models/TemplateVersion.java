/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.lob.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.lob.api.DateTimeHelper;
import io.apimatic.core.types.OptionalNullable;
import java.time.LocalDateTime;
import java.util.List;

/**
 * This is a model class for TemplateVersion type.
 */
public class TemplateVersion {
    private OptionalNullable<String> description;
    private String html;
    private OptionalNullable<EngineEnum> engine;
    private List<String> requiredVars;
    private LocalDateTime dateCreated;
    private LocalDateTime dateModified;
    private Boolean deleted;
    private String object;
    private String id;
    private Boolean suggestJsonEditor;
    private Object mergeVariables;

    /**
     * Default constructor.
     */
    public TemplateVersion() {
        object = "version";
        engine = OptionalNullable.of(EngineEnum.LEGACY);
    }

    /**
     * Initialization constructor.
     * @param  html  String value for html.
     * @param  dateCreated  LocalDateTime value for dateCreated.
     * @param  dateModified  LocalDateTime value for dateModified.
     * @param  object  String value for object.
     * @param  id  String value for id.
     * @param  description  String value for description.
     * @param  engine  EngineEnum value for engine.
     * @param  requiredVars  List of String value for requiredVars.
     * @param  deleted  Boolean value for deleted.
     * @param  suggestJsonEditor  Boolean value for suggestJsonEditor.
     * @param  mergeVariables  Object value for mergeVariables.
     */
    public TemplateVersion(
            String html,
            LocalDateTime dateCreated,
            LocalDateTime dateModified,
            String object,
            String id,
            String description,
            EngineEnum engine,
            List<String> requiredVars,
            Boolean deleted,
            Boolean suggestJsonEditor,
            Object mergeVariables) {
        this.description = OptionalNullable.of(description);
        this.html = html;
        this.engine = OptionalNullable.of(engine);
        this.requiredVars = requiredVars;
        this.dateCreated = dateCreated;
        this.dateModified = dateModified;
        this.deleted = deleted;
        this.object = object;
        this.id = id;
        this.suggestJsonEditor = suggestJsonEditor;
        this.mergeVariables = mergeVariables;
    }

    /**
     * Initialization constructor.
     * @param  html  String value for html.
     * @param  dateCreated  LocalDateTime value for dateCreated.
     * @param  dateModified  LocalDateTime value for dateModified.
     * @param  object  String value for object.
     * @param  id  String value for id.
     * @param  description  String value for description.
     * @param  engine  EngineEnum value for engine.
     * @param  requiredVars  List of String value for requiredVars.
     * @param  deleted  Boolean value for deleted.
     * @param  suggestJsonEditor  Boolean value for suggestJsonEditor.
     * @param  mergeVariables  Object value for mergeVariables.
     */

    protected TemplateVersion(String html, LocalDateTime dateCreated, LocalDateTime dateModified,
            String object, String id, OptionalNullable<String> description,
            OptionalNullable<EngineEnum> engine, List<String> requiredVars, Boolean deleted,
            Boolean suggestJsonEditor, Object mergeVariables) {
        this.description = description;
        this.html = html;
        this.engine = engine;
        this.requiredVars = requiredVars;
        this.dateCreated = dateCreated;
        this.dateModified = dateModified;
        this.deleted = deleted;
        this.object = object;
        this.id = id;
        this.suggestJsonEditor = suggestJsonEditor;
        this.mergeVariables = mergeVariables;
    }

    /**
     * Internal Getter for Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     * @return Returns the Internal String
     */
    @JsonGetter("description")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetDescription() {
        return this.description;
    }

    /**
     * Getter for Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     * @return Returns the String
     */
    public String getDescription() {
        return OptionalNullable.getFrom(description);
    }

    /**
     * Setter for Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     * @param description Value for String
     */
    @JsonSetter("description")
    public void setDescription(String description) {
        this.description = OptionalNullable.of(description);
    }

    /**
     * UnSetter for Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     */
    public void unsetDescription() {
        description = null;
    }

    /**
     * Getter for Html.
     * An HTML string of less than 100,000 characters to be used as the `published_version` of this
     * template. See [here](#section/HTML-Examples) for guidance on designing HTML templates. Please
     * see endpoint specific documentation for any other product-specific HTML details: -
     * [Postcards](#operation/postcard_create) - `front` and `back` - [Self
     * Mailers](#operation/self_mailer_create) - `inside` and `outside` -
     * [Letters](#operation/letter_create) - `file` - [Checks](#operation/check_create) -
     * `check_bottom` and `attachment` - [Cards](#operation/card_create) - `front` and `back` If
     * there is a syntax error with your variable names within your HTML, then an error will be
     * thrown, e.g. using a `{{#users}}` opening tag without the corresponding closing tag
     * `{{/users}}`.
     * @return Returns the String
     */
    @JsonGetter("html")
    public String getHtml() {
        return html;
    }

    /**
     * Setter for Html.
     * An HTML string of less than 100,000 characters to be used as the `published_version` of this
     * template. See [here](#section/HTML-Examples) for guidance on designing HTML templates. Please
     * see endpoint specific documentation for any other product-specific HTML details: -
     * [Postcards](#operation/postcard_create) - `front` and `back` - [Self
     * Mailers](#operation/self_mailer_create) - `inside` and `outside` -
     * [Letters](#operation/letter_create) - `file` - [Checks](#operation/check_create) -
     * `check_bottom` and `attachment` - [Cards](#operation/card_create) - `front` and `back` If
     * there is a syntax error with your variable names within your HTML, then an error will be
     * thrown, e.g. using a `{{#users}}` opening tag without the corresponding closing tag
     * `{{/users}}`.
     * @param html Value for String
     */
    @JsonSetter("html")
    public void setHtml(String html) {
        this.html = html;
    }

    /**
     * Internal Getter for Engine.
     * The engine used to combine HTML template with merge variables. * `legacy` - Lob's original
     * engine * `handlebars`
     * @return Returns the Internal EngineEnum
     */
    @JsonGetter("engine")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<EngineEnum> internalGetEngine() {
        return this.engine;
    }

    /**
     * Getter for Engine.
     * The engine used to combine HTML template with merge variables. * `legacy` - Lob's original
     * engine * `handlebars`
     * @return Returns the EngineEnum
     */
    public EngineEnum getEngine() {
        return OptionalNullable.getFrom(engine);
    }

    /**
     * Setter for Engine.
     * The engine used to combine HTML template with merge variables. * `legacy` - Lob's original
     * engine * `handlebars`
     * @param engine Value for EngineEnum
     */
    @JsonSetter("engine")
    public void setEngine(EngineEnum engine) {
        this.engine = OptionalNullable.of(engine);
    }

    /**
     * UnSetter for Engine.
     * The engine used to combine HTML template with merge variables. * `legacy` - Lob's original
     * engine * `handlebars`
     */
    public void unsetEngine() {
        engine = null;
    }

    /**
     * Getter for RequiredVars.
     * An array of required variables to be used in a template. Only available for `handlebars`
     * templates.
     * @return Returns the List of String
     */
    @JsonGetter("required_vars")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<String> getRequiredVars() {
        return requiredVars;
    }

    /**
     * Setter for RequiredVars.
     * An array of required variables to be used in a template. Only available for `handlebars`
     * templates.
     * @param requiredVars Value for List of String
     */
    @JsonSetter("required_vars")
    public void setRequiredVars(List<String> requiredVars) {
        this.requiredVars = requiredVars;
    }

    /**
     * Getter for DateCreated.
     * A timestamp in ISO 8601 format of the date the resource was created.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("date_created")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getDateCreated() {
        return dateCreated;
    }

    /**
     * Setter for DateCreated.
     * A timestamp in ISO 8601 format of the date the resource was created.
     * @param dateCreated Value for LocalDateTime
     */
    @JsonSetter("date_created")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setDateCreated(LocalDateTime dateCreated) {
        this.dateCreated = dateCreated;
    }

    /**
     * Getter for DateModified.
     * A timestamp in ISO 8601 format of the date the resource was last modified.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("date_modified")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getDateModified() {
        return dateModified;
    }

    /**
     * Setter for DateModified.
     * A timestamp in ISO 8601 format of the date the resource was last modified.
     * @param dateModified Value for LocalDateTime
     */
    @JsonSetter("date_modified")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setDateModified(LocalDateTime dateModified) {
        this.dateModified = dateModified;
    }

    /**
     * Getter for Deleted.
     * Only returned if the resource has been successfully deleted.
     * @return Returns the Boolean
     */
    @JsonGetter("deleted")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getDeleted() {
        return deleted;
    }

    /**
     * Setter for Deleted.
     * Only returned if the resource has been successfully deleted.
     * @param deleted Value for Boolean
     */
    @JsonSetter("deleted")
    public void setDeleted(Boolean deleted) {
        this.deleted = deleted;
    }

    /**
     * Getter for Object.
     * Value is resource type.
     * @return Returns the String
     */
    @JsonGetter("object")
    public String getObject() {
        return object;
    }

    /**
     * Setter for Object.
     * Value is resource type.
     * @param object Value for String
     */
    @JsonSetter("object")
    private void setObject(String object) {
        this.object = object;
    }

    /**
     * Getter for Id.
     * Unique identifier prefixed with `vrsn_`.
     * @return Returns the String
     */
    @JsonGetter("id")
    public String getId() {
        return id;
    }

    /**
     * Setter for Id.
     * Unique identifier prefixed with `vrsn_`.
     * @param id Value for String
     */
    @JsonSetter("id")
    public void setId(String id) {
        this.id = id;
    }

    /**
     * Getter for SuggestJsonEditor.
     * Used by frontend, true if the template uses advanced features.
     * @return Returns the Boolean
     */
    @JsonGetter("suggest_json_editor")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getSuggestJsonEditor() {
        return suggestJsonEditor;
    }

    /**
     * Setter for SuggestJsonEditor.
     * Used by frontend, true if the template uses advanced features.
     * @param suggestJsonEditor Value for Boolean
     */
    @JsonSetter("suggest_json_editor")
    public void setSuggestJsonEditor(Boolean suggestJsonEditor) {
        this.suggestJsonEditor = suggestJsonEditor;
    }

    /**
     * Getter for MergeVariables.
     * Object representing the keys of every merge variable present in the template. It has one key
     * named 'keys', and its value is an array of strings.
     * @return Returns the Object
     */
    @JsonGetter("merge_variables")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Object getMergeVariables() {
        return mergeVariables;
    }

    /**
     * Setter for MergeVariables.
     * Object representing the keys of every merge variable present in the template. It has one key
     * named 'keys', and its value is an array of strings.
     * @param mergeVariables Value for Object
     */
    @JsonSetter("merge_variables")
    public void setMergeVariables(Object mergeVariables) {
        this.mergeVariables = mergeVariables;
    }

    /**
     * Converts this TemplateVersion into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "TemplateVersion [" + "html=" + html + ", dateCreated=" + dateCreated
                + ", dateModified=" + dateModified + ", object=" + object + ", id=" + id
                + ", description=" + description + ", engine=" + engine + ", requiredVars="
                + requiredVars + ", deleted=" + deleted + ", suggestJsonEditor=" + suggestJsonEditor
                + ", mergeVariables=" + mergeVariables + "]";
    }

    /**
     * Builds a new {@link TemplateVersion.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link TemplateVersion.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(html, dateCreated, dateModified, object, id)
                .requiredVars(getRequiredVars())
                .deleted(getDeleted())
                .suggestJsonEditor(getSuggestJsonEditor())
                .mergeVariables(getMergeVariables());
        builder.description = internalGetDescription();
        builder.engine = internalGetEngine();
        return builder;
    }

    /**
     * Class to build instances of {@link TemplateVersion}.
     */
    public static class Builder {
        private String html;
        private LocalDateTime dateCreated;
        private LocalDateTime dateModified;
        private String object = "version";
        private String id;
        private OptionalNullable<String> description;
        private OptionalNullable<EngineEnum> engine = OptionalNullable.of(EngineEnum.LEGACY);
        private List<String> requiredVars;
        private Boolean deleted;
        private Boolean suggestJsonEditor;
        private Object mergeVariables;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  html  String value for html.
         * @param  dateCreated  LocalDateTime value for dateCreated.
         * @param  dateModified  LocalDateTime value for dateModified.
         * @param  object  String value for object.
         * @param  id  String value for id.
         */
        public Builder(String html, LocalDateTime dateCreated, LocalDateTime dateModified,
                String object, String id) {
            this.html = html;
            this.dateCreated = dateCreated;
            this.dateModified = dateModified;
            this.object = object;
            this.id = id;
        }

        /**
         * Setter for html.
         * @param  html  String value for html.
         * @return Builder
         */
        public Builder html(String html) {
            this.html = html;
            return this;
        }

        /**
         * Setter for dateCreated.
         * @param  dateCreated  LocalDateTime value for dateCreated.
         * @return Builder
         */
        public Builder dateCreated(LocalDateTime dateCreated) {
            this.dateCreated = dateCreated;
            return this;
        }

        /**
         * Setter for dateModified.
         * @param  dateModified  LocalDateTime value for dateModified.
         * @return Builder
         */
        public Builder dateModified(LocalDateTime dateModified) {
            this.dateModified = dateModified;
            return this;
        }

        /**
         * Setter for object.
         * @param  object  String value for object.
         * @return Builder
         */
        public Builder object(String object) {
            this.object = object;
            return this;
        }

        /**
         * Setter for id.
         * @param  id  String value for id.
         * @return Builder
         */
        public Builder id(String id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for description.
         * @param  description  String value for description.
         * @return Builder
         */
        public Builder description(String description) {
            this.description = OptionalNullable.of(description);
            return this;
        }

        /**
         * UnSetter for description.
         * @return Builder
         */
        public Builder unsetDescription() {
            description = null;
            return this;
        }

        /**
         * Setter for engine.
         * @param  engine  EngineEnum value for engine.
         * @return Builder
         */
        public Builder engine(EngineEnum engine) {
            this.engine = OptionalNullable.of(engine);
            return this;
        }

        /**
         * UnSetter for engine.
         * @return Builder
         */
        public Builder unsetEngine() {
            engine = null;
            return this;
        }

        /**
         * Setter for requiredVars.
         * @param  requiredVars  List of String value for requiredVars.
         * @return Builder
         */
        public Builder requiredVars(List<String> requiredVars) {
            this.requiredVars = requiredVars;
            return this;
        }

        /**
         * Setter for deleted.
         * @param  deleted  Boolean value for deleted.
         * @return Builder
         */
        public Builder deleted(Boolean deleted) {
            this.deleted = deleted;
            return this;
        }

        /**
         * Setter for suggestJsonEditor.
         * @param  suggestJsonEditor  Boolean value for suggestJsonEditor.
         * @return Builder
         */
        public Builder suggestJsonEditor(Boolean suggestJsonEditor) {
            this.suggestJsonEditor = suggestJsonEditor;
            return this;
        }

        /**
         * Setter for mergeVariables.
         * @param  mergeVariables  Object value for mergeVariables.
         * @return Builder
         */
        public Builder mergeVariables(Object mergeVariables) {
            this.mergeVariables = mergeVariables;
            return this;
        }

        /**
         * Builds a new {@link TemplateVersion} object using the set fields.
         * @return {@link TemplateVersion}
         */
        public TemplateVersion build() {
            return new TemplateVersion(html, dateCreated, dateModified, object, id, description,
                    engine, requiredVars, deleted, suggestJsonEditor, mergeVariables);
        }
    }
}
