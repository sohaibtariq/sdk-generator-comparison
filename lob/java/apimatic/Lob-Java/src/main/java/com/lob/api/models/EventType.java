/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.lob.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.lob.api.models.containers.EventTypeId;

/**
 * This is a model class for EventType type.
 */
public class EventType {
    private EventTypeId id;
    private boolean enabledForTest;
    private ResourceEnum resource;
    private String object;

    /**
     * Default constructor.
     */
    public EventType() {
        object = "event_type";
    }

    /**
     * Initialization constructor.
     * @param  id  EventTypeId value for id.
     * @param  enabledForTest  boolean value for enabledForTest.
     * @param  resource  ResourceEnum value for resource.
     * @param  object  String value for object.
     */
    public EventType(
            EventTypeId id,
            boolean enabledForTest,
            ResourceEnum resource,
            String object) {
        this.id = id;
        this.enabledForTest = enabledForTest;
        this.resource = resource;
        this.object = object;
    }

    /**
     * Getter for Id.
     * @return Returns the EventTypeId
     */
    @JsonGetter("id")
    public EventTypeId getId() {
        return id;
    }

    /**
     * Setter for Id.
     * @param id Value for EventTypeId
     */
    @JsonSetter("id")
    public void setId(EventTypeId id) {
        this.id = id;
    }

    /**
     * Getter for EnabledForTest.
     * Value is `true` if the event type is enabled in both the test and live environments and
     * `false` if it is only enabled in the live environment.
     * @return Returns the boolean
     */
    @JsonGetter("enabled_for_test")
    public boolean getEnabledForTest() {
        return enabledForTest;
    }

    /**
     * Setter for EnabledForTest.
     * Value is `true` if the event type is enabled in both the test and live environments and
     * `false` if it is only enabled in the live environment.
     * @param enabledForTest Value for boolean
     */
    @JsonSetter("enabled_for_test")
    public void setEnabledForTest(boolean enabledForTest) {
        this.enabledForTest = enabledForTest;
    }

    /**
     * Getter for Resource.
     * @return Returns the ResourceEnum
     */
    @JsonGetter("resource")
    public ResourceEnum getResource() {
        return resource;
    }

    /**
     * Setter for Resource.
     * @param resource Value for ResourceEnum
     */
    @JsonSetter("resource")
    public void setResource(ResourceEnum resource) {
        this.resource = resource;
    }

    /**
     * Getter for Object.
     * Value is resource type.
     * @return Returns the String
     */
    @JsonGetter("object")
    public String getObject() {
        return object;
    }

    /**
     * Setter for Object.
     * Value is resource type.
     * @param object Value for String
     */
    @JsonSetter("object")
    private void setObject(String object) {
        this.object = object;
    }

    /**
     * Converts this EventType into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "EventType [" + "id=" + id + ", enabledForTest=" + enabledForTest + ", resource="
                + resource + ", object=" + object + "]";
    }

    /**
     * Builds a new {@link EventType.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link EventType.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(id, enabledForTest, resource, object);
        return builder;
    }

    /**
     * Class to build instances of {@link EventType}.
     */
    public static class Builder {
        private EventTypeId id;
        private boolean enabledForTest;
        private ResourceEnum resource;
        private String object = "event_type";

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  id  EventTypeId value for id.
         * @param  enabledForTest  boolean value for enabledForTest.
         * @param  resource  ResourceEnum value for resource.
         * @param  object  String value for object.
         */
        public Builder(EventTypeId id, boolean enabledForTest, ResourceEnum resource,
                String object) {
            this.id = id;
            this.enabledForTest = enabledForTest;
            this.resource = resource;
            this.object = object;
        }

        /**
         * Setter for id.
         * @param  id  EventTypeId value for id.
         * @return Builder
         */
        public Builder id(EventTypeId id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for enabledForTest.
         * @param  enabledForTest  boolean value for enabledForTest.
         * @return Builder
         */
        public Builder enabledForTest(boolean enabledForTest) {
            this.enabledForTest = enabledForTest;
            return this;
        }

        /**
         * Setter for resource.
         * @param  resource  ResourceEnum value for resource.
         * @return Builder
         */
        public Builder resource(ResourceEnum resource) {
            this.resource = resource;
            return this;
        }

        /**
         * Setter for object.
         * @param  object  String value for object.
         * @return Builder
         */
        public Builder object(String object) {
            this.object = object;
            return this;
        }

        /**
         * Builds a new {@link EventType} object using the set fields.
         * @return {@link EventType}
         */
        public EventType build() {
            return new EventType(id, enabledForTest, resource, object);
        }
    }
}
