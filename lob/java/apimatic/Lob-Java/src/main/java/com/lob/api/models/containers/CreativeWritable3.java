/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.lob.api.models.containers;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.lob.api.ApiHelper;
import com.lob.api.models.CreativeWritable;
import com.lob.api.models.CreativeWritable1;
import com.lob.api.models.CreativeWritable2;
import io.apimatic.core.annotations.TypeCombinator.TypeCombinatorCase;
import java.io.IOException;
import java.util.Arrays;

/**
 * This is a container class for one-of types.
 */
@JsonDeserialize(using = CreativeWritable3.CreativeWritable3Deserializer.class)
public abstract class CreativeWritable3 {
    
    /**
     * This is creative_writable case.
     * @param creativeWritable CreativeWritable value for creativeWritable.
     * @return The CreativeWritableCase object.
     */
    public static CreativeWritable3 fromCreativeWritable(CreativeWritable creativeWritable) {
        return creativeWritable == null ? null : new CreativeWritableCase(creativeWritable);
    }

    /**
     * This is creative_writable1 case.
     * @param creativeWritable1 CreativeWritable1 value for creativeWritable1.
     * @return The CreativeWritable1Case object.
     */
    public static CreativeWritable3 fromCreativeWritable1(CreativeWritable1 creativeWritable1) {
        return creativeWritable1 == null ? null : new CreativeWritable1Case(creativeWritable1);
    }

    /**
     * This is creative_writable2 case.
     * @param creativeWritable2 CreativeWritable2 value for creativeWritable2.
     * @return The CreativeWritable2Case object.
     */
    public static CreativeWritable3 fromCreativeWritable2(CreativeWritable2 creativeWritable2) {
        return creativeWritable2 == null ? null : new CreativeWritable2Case(creativeWritable2);
    }

    /**
     * Method to match from the provided one-of cases.
     * @param <R> The type to return after applying callback.
     * @param cases The one-of type cases callback.
     * @return The one-of matched case.
     */
    public abstract <R> R match(Cases<R> cases);

    /**
     * This is interface for one-of cases.
     * @param <R> The type to return after applying callback.
     */
    public interface Cases<R> {
        R creativeWritable(CreativeWritable creativeWritable);

        R creativeWritable1(CreativeWritable1 creativeWritable1);

        R creativeWritable2(CreativeWritable2 creativeWritable2);
    }

    /**
     * This is a implementation class for CreativeWritableCase.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "CreativeWritable")
    private static class CreativeWritableCase extends CreativeWritable3 {

        @JsonValue
        private CreativeWritable creativeWritable;

        CreativeWritableCase(CreativeWritable creativeWritable) {
            this.creativeWritable = creativeWritable;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.creativeWritable(this.creativeWritable);
        }

        @JsonCreator
        private CreativeWritableCase(JsonNode jsonNode) throws IOException {
            this.creativeWritable = ApiHelper.deserialize(jsonNode,
                CreativeWritable.class);
        }

        @Override
        public String toString() {
            return creativeWritable.toString();
        }
    }

    /**
     * This is a implementation class for CreativeWritable1Case.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "CreativeWritable1")
    private static class CreativeWritable1Case extends CreativeWritable3 {

        @JsonValue
        private CreativeWritable1 creativeWritable1;

        CreativeWritable1Case(CreativeWritable1 creativeWritable1) {
            this.creativeWritable1 = creativeWritable1;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.creativeWritable1(this.creativeWritable1);
        }

        @JsonCreator
        private CreativeWritable1Case(JsonNode jsonNode) throws IOException {
            this.creativeWritable1 = ApiHelper.deserialize(jsonNode,
                CreativeWritable1.class);
        }

        @Override
        public String toString() {
            return creativeWritable1.toString();
        }
    }

    /**
     * This is a implementation class for CreativeWritable2Case.
     */
    @JsonDeserialize(using = JsonDeserializer.None.class)
    @TypeCombinatorCase(type = "CreativeWritable2")
    private static class CreativeWritable2Case extends CreativeWritable3 {

        @JsonValue
        private CreativeWritable2 creativeWritable2;

        CreativeWritable2Case(CreativeWritable2 creativeWritable2) {
            this.creativeWritable2 = creativeWritable2;
        }

        @Override
        public <R> R match(Cases<R> cases) {
            return cases.creativeWritable2(this.creativeWritable2);
        }

        @JsonCreator
        private CreativeWritable2Case(JsonNode jsonNode) throws IOException {
            this.creativeWritable2 = ApiHelper.deserialize(jsonNode,
                CreativeWritable2.class);
        }

        @Override
        public String toString() {
            return creativeWritable2.toString();
        }
    }

    /**
     * This is a custom deserializer class for CreativeWritable3.
     */
    protected static class CreativeWritable3Deserializer
            extends JsonDeserializer<CreativeWritable3> {

        @Override
        public CreativeWritable3 deserialize(JsonParser jp, DeserializationContext ctxt)
                throws IOException, JsonProcessingException {
            ObjectCodec oc = jp.getCodec();
            JsonNode node = oc.readTree(jp);
            return ApiHelper.deserialize(node, Arrays.asList(CreativeWritableCase.class,
                    CreativeWritable1Case.class, CreativeWritable2Case.class), true);
        }
    }

}
