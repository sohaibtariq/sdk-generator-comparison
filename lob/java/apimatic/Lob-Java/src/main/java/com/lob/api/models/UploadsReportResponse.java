/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.lob.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.OptionalNullable;
import java.util.List;

/**
 * This is a model class for UploadsReportResponse type.
 */
public class UploadsReportResponse {
    private List<Datum> data;
    private OptionalNullable<String> nextUrl;
    private OptionalNullable<String> prevUrl;
    private int count;
    private int totalCount;

    /**
     * Default constructor.
     */
    public UploadsReportResponse() {
    }

    /**
     * Initialization constructor.
     * @param  data  List of Datum value for data.
     * @param  count  int value for count.
     * @param  totalCount  int value for totalCount.
     * @param  nextUrl  String value for nextUrl.
     * @param  prevUrl  String value for prevUrl.
     */
    public UploadsReportResponse(
            List<Datum> data,
            int count,
            int totalCount,
            String nextUrl,
            String prevUrl) {
        this.data = data;
        this.nextUrl = OptionalNullable.of(nextUrl);
        this.prevUrl = OptionalNullable.of(prevUrl);
        this.count = count;
        this.totalCount = totalCount;
    }

    /**
     * Initialization constructor.
     * @param  data  List of Datum value for data.
     * @param  count  int value for count.
     * @param  totalCount  int value for totalCount.
     * @param  nextUrl  String value for nextUrl.
     * @param  prevUrl  String value for prevUrl.
     */

    protected UploadsReportResponse(List<Datum> data, int count, int totalCount,
            OptionalNullable<String> nextUrl, OptionalNullable<String> prevUrl) {
        this.data = data;
        this.nextUrl = nextUrl;
        this.prevUrl = prevUrl;
        this.count = count;
        this.totalCount = totalCount;
    }

    /**
     * Getter for Data.
     * @return Returns the List of Datum
     */
    @JsonGetter("data")
    public List<Datum> getData() {
        return data;
    }

    /**
     * Setter for Data.
     * @param data Value for List of Datum
     */
    @JsonSetter("data")
    public void setData(List<Datum> data) {
        this.data = data;
    }

    /**
     * Internal Getter for NextUrl.
     * Url of next page of items in list.
     * @return Returns the Internal String
     */
    @JsonGetter("next_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetNextUrl() {
        return this.nextUrl;
    }

    /**
     * Getter for NextUrl.
     * Url of next page of items in list.
     * @return Returns the String
     */
    public String getNextUrl() {
        return OptionalNullable.getFrom(nextUrl);
    }

    /**
     * Setter for NextUrl.
     * Url of next page of items in list.
     * @param nextUrl Value for String
     */
    @JsonSetter("next_url")
    public void setNextUrl(String nextUrl) {
        this.nextUrl = OptionalNullable.of(nextUrl);
    }

    /**
     * UnSetter for NextUrl.
     * Url of next page of items in list.
     */
    public void unsetNextUrl() {
        nextUrl = null;
    }

    /**
     * Internal Getter for PrevUrl.
     * Url of previous page of items in list.
     * @return Returns the Internal String
     */
    @JsonGetter("prev_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetPrevUrl() {
        return this.prevUrl;
    }

    /**
     * Getter for PrevUrl.
     * Url of previous page of items in list.
     * @return Returns the String
     */
    public String getPrevUrl() {
        return OptionalNullable.getFrom(prevUrl);
    }

    /**
     * Setter for PrevUrl.
     * Url of previous page of items in list.
     * @param prevUrl Value for String
     */
    @JsonSetter("prev_url")
    public void setPrevUrl(String prevUrl) {
        this.prevUrl = OptionalNullable.of(prevUrl);
    }

    /**
     * UnSetter for PrevUrl.
     * Url of previous page of items in list.
     */
    public void unsetPrevUrl() {
        prevUrl = null;
    }

    /**
     * Getter for Count.
     * number of resources in a set
     * @return Returns the int
     */
    @JsonGetter("count")
    public int getCount() {
        return count;
    }

    /**
     * Setter for Count.
     * number of resources in a set
     * @param count Value for int
     */
    @JsonSetter("count")
    public void setCount(int count) {
        this.count = count;
    }

    /**
     * Getter for TotalCount.
     * Indicates the total number of records. Provided when the request specifies an "include" query
     * parameter
     * @return Returns the int
     */
    @JsonGetter("total_count")
    public int getTotalCount() {
        return totalCount;
    }

    /**
     * Setter for TotalCount.
     * Indicates the total number of records. Provided when the request specifies an "include" query
     * parameter
     * @param totalCount Value for int
     */
    @JsonSetter("total_count")
    public void setTotalCount(int totalCount) {
        this.totalCount = totalCount;
    }

    /**
     * Converts this UploadsReportResponse into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "UploadsReportResponse [" + "data=" + data + ", count=" + count + ", totalCount="
                + totalCount + ", nextUrl=" + nextUrl + ", prevUrl=" + prevUrl + "]";
    }

    /**
     * Builds a new {@link UploadsReportResponse.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link UploadsReportResponse.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(data, count, totalCount);
        builder.nextUrl = internalGetNextUrl();
        builder.prevUrl = internalGetPrevUrl();
        return builder;
    }

    /**
     * Class to build instances of {@link UploadsReportResponse}.
     */
    public static class Builder {
        private List<Datum> data;
        private int count;
        private int totalCount;
        private OptionalNullable<String> nextUrl;
        private OptionalNullable<String> prevUrl;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  data  List of Datum value for data.
         * @param  count  int value for count.
         * @param  totalCount  int value for totalCount.
         */
        public Builder(List<Datum> data, int count, int totalCount) {
            this.data = data;
            this.count = count;
            this.totalCount = totalCount;
        }

        /**
         * Setter for data.
         * @param  data  List of Datum value for data.
         * @return Builder
         */
        public Builder data(List<Datum> data) {
            this.data = data;
            return this;
        }

        /**
         * Setter for count.
         * @param  count  int value for count.
         * @return Builder
         */
        public Builder count(int count) {
            this.count = count;
            return this;
        }

        /**
         * Setter for totalCount.
         * @param  totalCount  int value for totalCount.
         * @return Builder
         */
        public Builder totalCount(int totalCount) {
            this.totalCount = totalCount;
            return this;
        }

        /**
         * Setter for nextUrl.
         * @param  nextUrl  String value for nextUrl.
         * @return Builder
         */
        public Builder nextUrl(String nextUrl) {
            this.nextUrl = OptionalNullable.of(nextUrl);
            return this;
        }

        /**
         * UnSetter for nextUrl.
         * @return Builder
         */
        public Builder unsetNextUrl() {
            nextUrl = null;
            return this;
        }

        /**
         * Setter for prevUrl.
         * @param  prevUrl  String value for prevUrl.
         * @return Builder
         */
        public Builder prevUrl(String prevUrl) {
            this.prevUrl = OptionalNullable.of(prevUrl);
            return this;
        }

        /**
         * UnSetter for prevUrl.
         * @return Builder
         */
        public Builder unsetPrevUrl() {
            prevUrl = null;
            return this;
        }

        /**
         * Builds a new {@link UploadsReportResponse} object using the set fields.
         * @return {@link UploadsReportResponse}
         */
        public UploadsReportResponse build() {
            return new UploadsReportResponse(data, count, totalCount, nextUrl, prevUrl);
        }
    }
}
