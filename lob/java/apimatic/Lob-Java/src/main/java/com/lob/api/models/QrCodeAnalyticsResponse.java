/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.lob.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import java.util.List;

/**
 * This is a model class for QrCodeAnalyticsResponse type.
 */
public class QrCodeAnalyticsResponse {
    private String object;
    private Integer count;
    private Integer totalCount;
    private Integer scannedCount;
    private List<QrCodeScans> data;

    /**
     * Default constructor.
     */
    public QrCodeAnalyticsResponse() {
    }

    /**
     * Initialization constructor.
     * @param  object  String value for object.
     * @param  count  Integer value for count.
     * @param  totalCount  Integer value for totalCount.
     * @param  scannedCount  Integer value for scannedCount.
     * @param  data  List of QrCodeScans value for data.
     */
    public QrCodeAnalyticsResponse(
            String object,
            Integer count,
            Integer totalCount,
            Integer scannedCount,
            List<QrCodeScans> data) {
        this.object = object;
        this.count = count;
        this.totalCount = totalCount;
        this.scannedCount = scannedCount;
        this.data = data;
    }

    /**
     * Getter for Object.
     * Value is resource type.
     * @return Returns the String
     */
    @JsonGetter("object")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getObject() {
        return object;
    }

    /**
     * Setter for Object.
     * Value is resource type.
     * @param object Value for String
     */
    @JsonSetter("object")
    public void setObject(String object) {
        this.object = object;
    }

    /**
     * Getter for Count.
     * number of resources in a set
     * @return Returns the Integer
     */
    @JsonGetter("count")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getCount() {
        return count;
    }

    /**
     * Setter for Count.
     * number of resources in a set
     * @param count Value for Integer
     */
    @JsonSetter("count")
    public void setCount(Integer count) {
        this.count = count;
    }

    /**
     * Getter for TotalCount.
     * Indicates the total number of records. Provided when the request specifies an "include" query
     * parameter
     * @return Returns the Integer
     */
    @JsonGetter("total_count")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getTotalCount() {
        return totalCount;
    }

    /**
     * Setter for TotalCount.
     * Indicates the total number of records. Provided when the request specifies an "include" query
     * parameter
     * @param totalCount Value for Integer
     */
    @JsonSetter("total_count")
    public void setTotalCount(Integer totalCount) {
        this.totalCount = totalCount;
    }

    /**
     * Getter for ScannedCount.
     * Indicates the number of QR Codes out of `count` that were scanned atleast once.
     * @return Returns the Integer
     */
    @JsonGetter("scanned_count")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getScannedCount() {
        return scannedCount;
    }

    /**
     * Setter for ScannedCount.
     * Indicates the number of QR Codes out of `count` that were scanned atleast once.
     * @param scannedCount Value for Integer
     */
    @JsonSetter("scanned_count")
    public void setScannedCount(Integer scannedCount) {
        this.scannedCount = scannedCount;
    }

    /**
     * Getter for Data.
     * List of QR code analytics
     * @return Returns the List of QrCodeScans
     */
    @JsonGetter("data")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<QrCodeScans> getData() {
        return data;
    }

    /**
     * Setter for Data.
     * List of QR code analytics
     * @param data Value for List of QrCodeScans
     */
    @JsonSetter("data")
    public void setData(List<QrCodeScans> data) {
        this.data = data;
    }

    /**
     * Converts this QrCodeAnalyticsResponse into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "QrCodeAnalyticsResponse [" + "object=" + object + ", count=" + count
                + ", totalCount=" + totalCount + ", scannedCount=" + scannedCount + ", data=" + data
                + "]";
    }

    /**
     * Builds a new {@link QrCodeAnalyticsResponse.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link QrCodeAnalyticsResponse.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .object(getObject())
                .count(getCount())
                .totalCount(getTotalCount())
                .scannedCount(getScannedCount())
                .data(getData());
        return builder;
    }

    /**
     * Class to build instances of {@link QrCodeAnalyticsResponse}.
     */
    public static class Builder {
        private String object;
        private Integer count;
        private Integer totalCount;
        private Integer scannedCount;
        private List<QrCodeScans> data;



        /**
         * Setter for object.
         * @param  object  String value for object.
         * @return Builder
         */
        public Builder object(String object) {
            this.object = object;
            return this;
        }

        /**
         * Setter for count.
         * @param  count  Integer value for count.
         * @return Builder
         */
        public Builder count(Integer count) {
            this.count = count;
            return this;
        }

        /**
         * Setter for totalCount.
         * @param  totalCount  Integer value for totalCount.
         * @return Builder
         */
        public Builder totalCount(Integer totalCount) {
            this.totalCount = totalCount;
            return this;
        }

        /**
         * Setter for scannedCount.
         * @param  scannedCount  Integer value for scannedCount.
         * @return Builder
         */
        public Builder scannedCount(Integer scannedCount) {
            this.scannedCount = scannedCount;
            return this;
        }

        /**
         * Setter for data.
         * @param  data  List of QrCodeScans value for data.
         * @return Builder
         */
        public Builder data(List<QrCodeScans> data) {
            this.data = data;
            return this;
        }

        /**
         * Builds a new {@link QrCodeAnalyticsResponse} object using the set fields.
         * @return {@link QrCodeAnalyticsResponse}
         */
        public QrCodeAnalyticsResponse build() {
            return new QrCodeAnalyticsResponse(object, count, totalCount, scannedCount, data);
        }
    }
}
