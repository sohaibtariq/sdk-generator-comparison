/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.lob.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import io.apimatic.core.types.OptionalNullable;
import java.util.List;

/**
 * This is a model class for LetterDetailsWritable type.
 */
public class LetterDetailsWritable {
    private AddressPlacementEnum addressPlacement;
    private OptionalNullable<List<LetterAddOnTypesEnum>> addOnTypes;
    private OptionalNullable<List<String>> buckslips;
    private OptionalNullable<List<String>> cards;
    private boolean color;
    private OptionalNullable<String> customEnvelope;
    private Boolean doubleSided;
    private OptionalNullable<ExtraServiceEnum> extraService;
    private MailTypeEnum mailType;
    private QrCodeCampaigns qrCode;

    /**
     * Default constructor.
     */
    public LetterDetailsWritable() {
        addressPlacement = AddressPlacementEnum.TOP_FIRST_PAGE;
        doubleSided = true;
        mailType = MailTypeEnum.USPS_FIRST_CLASS;
    }

    /**
     * Initialization constructor.
     * @param  color  boolean value for color.
     * @param  addressPlacement  AddressPlacementEnum value for addressPlacement.
     * @param  addOnTypes  List of LetterAddOnTypesEnum value for addOnTypes.
     * @param  buckslips  List of String value for buckslips.
     * @param  cards  List of String value for cards.
     * @param  customEnvelope  String value for customEnvelope.
     * @param  doubleSided  Boolean value for doubleSided.
     * @param  extraService  ExtraServiceEnum value for extraService.
     * @param  mailType  MailTypeEnum value for mailType.
     * @param  qrCode  QrCodeCampaigns value for qrCode.
     */
    public LetterDetailsWritable(
            boolean color,
            AddressPlacementEnum addressPlacement,
            List<LetterAddOnTypesEnum> addOnTypes,
            List<String> buckslips,
            List<String> cards,
            String customEnvelope,
            Boolean doubleSided,
            ExtraServiceEnum extraService,
            MailTypeEnum mailType,
            QrCodeCampaigns qrCode) {
        this.addressPlacement = addressPlacement;
        this.addOnTypes = OptionalNullable.of(addOnTypes);
        this.buckslips = OptionalNullable.of(buckslips);
        this.cards = OptionalNullable.of(cards);
        this.color = color;
        this.customEnvelope = OptionalNullable.of(customEnvelope);
        this.doubleSided = doubleSided;
        this.extraService = OptionalNullable.of(extraService);
        this.mailType = mailType;
        this.qrCode = qrCode;
    }

    /**
     * Initialization constructor.
     * @param  color  boolean value for color.
     * @param  addressPlacement  AddressPlacementEnum value for addressPlacement.
     * @param  addOnTypes  List of LetterAddOnTypesEnum value for addOnTypes.
     * @param  buckslips  List of String value for buckslips.
     * @param  cards  List of String value for cards.
     * @param  customEnvelope  String value for customEnvelope.
     * @param  doubleSided  Boolean value for doubleSided.
     * @param  extraService  ExtraServiceEnum value for extraService.
     * @param  mailType  MailTypeEnum value for mailType.
     * @param  qrCode  QrCodeCampaigns value for qrCode.
     */

    protected LetterDetailsWritable(boolean color, AddressPlacementEnum addressPlacement,
            OptionalNullable<List<LetterAddOnTypesEnum>> addOnTypes,
            OptionalNullable<List<String>> buckslips, OptionalNullable<List<String>> cards,
            OptionalNullable<String> customEnvelope, Boolean doubleSided,
            OptionalNullable<ExtraServiceEnum> extraService, MailTypeEnum mailType,
            QrCodeCampaigns qrCode) {
        this.addressPlacement = addressPlacement;
        this.addOnTypes = addOnTypes;
        this.buckslips = buckslips;
        this.cards = cards;
        this.color = color;
        this.customEnvelope = customEnvelope;
        this.doubleSided = doubleSided;
        this.extraService = extraService;
        this.mailType = mailType;
        this.qrCode = qrCode;
    }

    /**
     * Getter for AddressPlacement.
     * Specifies the location of the address information that will show through the double-window
     * envelope. To see how this will impact your letter design, view our letter template. Some
     * values are exclusive to certain customers. Upgrade to the appropriate &lt;a
     * href="https://dashboard.lob.com/#/settings/editions" target="_blank"&gt;Print &amp; Mail Edition&lt;/a&gt;
     * to gain access. * `top_first_page` - (default) print address information at the top of your
     * provided first page * `insert_blank_page` - insert a blank address page at the beginning of
     * your file (you will be charged for the extra page) * `bottom_first_page_center` -
     * **(exclusive, deprecation planned within a few months)** print address information at the
     * bottom center of your provided first page * `bottom_first_page` - **(exclusive)** print
     * address information at the bottom of your provided first page
     * @return Returns the AddressPlacementEnum
     */
    @JsonGetter("address_placement")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public AddressPlacementEnum getAddressPlacement() {
        return addressPlacement;
    }

    /**
     * Setter for AddressPlacement.
     * Specifies the location of the address information that will show through the double-window
     * envelope. To see how this will impact your letter design, view our letter template. Some
     * values are exclusive to certain customers. Upgrade to the appropriate &lt;a
     * href="https://dashboard.lob.com/#/settings/editions" target="_blank"&gt;Print &amp; Mail Edition&lt;/a&gt;
     * to gain access. * `top_first_page` - (default) print address information at the top of your
     * provided first page * `insert_blank_page` - insert a blank address page at the beginning of
     * your file (you will be charged for the extra page) * `bottom_first_page_center` -
     * **(exclusive, deprecation planned within a few months)** print address information at the
     * bottom center of your provided first page * `bottom_first_page` - **(exclusive)** print
     * address information at the bottom of your provided first page
     * @param addressPlacement Value for AddressPlacementEnum
     */
    @JsonSetter("address_placement")
    public void setAddressPlacement(AddressPlacementEnum addressPlacement) {
        this.addressPlacement = addressPlacement;
    }

    /**
     * Internal Getter for AddOnTypes.
     * An array containing the types of add-ons for the Letter Creative.
     * @return Returns the Internal List of LetterAddOnTypesEnum
     */
    @JsonGetter("add_on_types")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<List<LetterAddOnTypesEnum>> internalGetAddOnTypes() {
        return this.addOnTypes;
    }

    /**
     * Getter for AddOnTypes.
     * An array containing the types of add-ons for the Letter Creative.
     * @return Returns the List of LetterAddOnTypesEnum
     */
    public List<LetterAddOnTypesEnum> getAddOnTypes() {
        return OptionalNullable.getFrom(addOnTypes);
    }

    /**
     * Setter for AddOnTypes.
     * An array containing the types of add-ons for the Letter Creative.
     * @param addOnTypes Value for List of LetterAddOnTypesEnum
     */
    @JsonSetter("add_on_types")
    public void setAddOnTypes(List<LetterAddOnTypesEnum> addOnTypes) {
        this.addOnTypes = OptionalNullable.of(addOnTypes);
    }

    /**
     * UnSetter for AddOnTypes.
     * An array containing the types of add-ons for the Letter Creative.
     */
    public void unsetAddOnTypes() {
        addOnTypes = null;
    }

    /**
     * Internal Getter for Buckslips.
     * A single-element array containing an existing buckslip id in a string format. See
     * [buckslips](#tag/Buckslips) for more information. Note that buckslip letter campaigns require
     * a minimum send quantity of 5,000 letters per campaign.
     * @return Returns the Internal List of String
     */
    @JsonGetter("buckslips")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<List<String>> internalGetBuckslips() {
        return this.buckslips;
    }

    /**
     * Getter for Buckslips.
     * A single-element array containing an existing buckslip id in a string format. See
     * [buckslips](#tag/Buckslips) for more information. Note that buckslip letter campaigns require
     * a minimum send quantity of 5,000 letters per campaign.
     * @return Returns the List of String
     */
    public List<String> getBuckslips() {
        return OptionalNullable.getFrom(buckslips);
    }

    /**
     * Setter for Buckslips.
     * A single-element array containing an existing buckslip id in a string format. See
     * [buckslips](#tag/Buckslips) for more information. Note that buckslip letter campaigns require
     * a minimum send quantity of 5,000 letters per campaign.
     * @param buckslips Value for List of String
     */
    @JsonSetter("buckslips")
    public void setBuckslips(List<String> buckslips) {
        this.buckslips = OptionalNullable.of(buckslips);
    }

    /**
     * UnSetter for Buckslips.
     * A single-element array containing an existing buckslip id in a string format. See
     * [buckslips](#tag/Buckslips) for more information. Note that buckslip letter campaigns require
     * a minimum send quantity of 5,000 letters per campaign.
     */
    public void unsetBuckslips() {
        buckslips = null;
    }

    /**
     * Internal Getter for Cards.
     * A single-element array containing an existing card id in a string format. See
     * [cards](#tag/Cards) for more information.
     * @return Returns the Internal List of String
     */
    @JsonGetter("cards")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<List<String>> internalGetCards() {
        return this.cards;
    }

    /**
     * Getter for Cards.
     * A single-element array containing an existing card id in a string format. See
     * [cards](#tag/Cards) for more information.
     * @return Returns the List of String
     */
    public List<String> getCards() {
        return OptionalNullable.getFrom(cards);
    }

    /**
     * Setter for Cards.
     * A single-element array containing an existing card id in a string format. See
     * [cards](#tag/Cards) for more information.
     * @param cards Value for List of String
     */
    @JsonSetter("cards")
    public void setCards(List<String> cards) {
        this.cards = OptionalNullable.of(cards);
    }

    /**
     * UnSetter for Cards.
     * A single-element array containing an existing card id in a string format. See
     * [cards](#tag/Cards) for more information.
     */
    public void unsetCards() {
        cards = null;
    }

    /**
     * Getter for Color.
     * Set this key to `true` if you would like to print in color. Set to `false` if you would like
     * to print in black and white.
     * @return Returns the boolean
     */
    @JsonGetter("color")
    public boolean getColor() {
        return color;
    }

    /**
     * Setter for Color.
     * Set this key to `true` if you would like to print in color. Set to `false` if you would like
     * to print in black and white.
     * @param color Value for boolean
     */
    @JsonSetter("color")
    public void setColor(boolean color) {
        this.color = color;
    }

    /**
     * Internal Getter for CustomEnvelope.
     * Accepts an envelope ID for any customized envelope with available inventory. If no inventory
     * is available for the specified ID, the letter will not be sent, and an error will be
     * returned. If the letter has more than 6 sheets, it will be sent in a blank flat envelope.
     * Custom envelopes may be created and ordered from the dashboard. This feature is exclusive to
     * certain customers. Upgrade to the appropriate &lt;a
     * href="https://dashboard.lob.com/#/settings/editions" target="_blank"&gt;Print &amp; Mail Edition&lt;/a&gt;
     * to gain access.
     * @return Returns the Internal String
     */
    @JsonGetter("custom_envelope")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetCustomEnvelope() {
        return this.customEnvelope;
    }

    /**
     * Getter for CustomEnvelope.
     * Accepts an envelope ID for any customized envelope with available inventory. If no inventory
     * is available for the specified ID, the letter will not be sent, and an error will be
     * returned. If the letter has more than 6 sheets, it will be sent in a blank flat envelope.
     * Custom envelopes may be created and ordered from the dashboard. This feature is exclusive to
     * certain customers. Upgrade to the appropriate &lt;a
     * href="https://dashboard.lob.com/#/settings/editions" target="_blank"&gt;Print &amp; Mail Edition&lt;/a&gt;
     * to gain access.
     * @return Returns the String
     */
    public String getCustomEnvelope() {
        return OptionalNullable.getFrom(customEnvelope);
    }

    /**
     * Setter for CustomEnvelope.
     * Accepts an envelope ID for any customized envelope with available inventory. If no inventory
     * is available for the specified ID, the letter will not be sent, and an error will be
     * returned. If the letter has more than 6 sheets, it will be sent in a blank flat envelope.
     * Custom envelopes may be created and ordered from the dashboard. This feature is exclusive to
     * certain customers. Upgrade to the appropriate &lt;a
     * href="https://dashboard.lob.com/#/settings/editions" target="_blank"&gt;Print &amp; Mail Edition&lt;/a&gt;
     * to gain access.
     * @param customEnvelope Value for String
     */
    @JsonSetter("custom_envelope")
    public void setCustomEnvelope(String customEnvelope) {
        this.customEnvelope = OptionalNullable.of(customEnvelope);
    }

    /**
     * UnSetter for CustomEnvelope.
     * Accepts an envelope ID for any customized envelope with available inventory. If no inventory
     * is available for the specified ID, the letter will not be sent, and an error will be
     * returned. If the letter has more than 6 sheets, it will be sent in a blank flat envelope.
     * Custom envelopes may be created and ordered from the dashboard. This feature is exclusive to
     * certain customers. Upgrade to the appropriate &lt;a
     * href="https://dashboard.lob.com/#/settings/editions" target="_blank"&gt;Print &amp; Mail Edition&lt;/a&gt;
     * to gain access.
     */
    public void unsetCustomEnvelope() {
        customEnvelope = null;
    }

    /**
     * Getter for DoubleSided.
     * Set this attribute to `true` for double sided printing, or `false` for for single sided
     * printing. Defaults to `true`.
     * @return Returns the Boolean
     */
    @JsonGetter("double_sided")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getDoubleSided() {
        return doubleSided;
    }

    /**
     * Setter for DoubleSided.
     * Set this attribute to `true` for double sided printing, or `false` for for single sided
     * printing. Defaults to `true`.
     * @param doubleSided Value for Boolean
     */
    @JsonSetter("double_sided")
    public void setDoubleSided(Boolean doubleSided) {
        this.doubleSided = doubleSided;
    }

    /**
     * Internal Getter for ExtraService.
     * Add an extra service to your letter. Can only be non-`null` if `mail_type` isn't
     * `usps_standard`. See &lt;a href="https://www.lob.com/pricing/print-mail#compare"
     * target="_blank"&gt;pricing&lt;/a&gt; for extra costs incurred. * `certified` - track and confirm
     * delivery for domestic destinations. An extra sheet (1 PDF page single-sided or 2 PDF pages
     * double-sided) is added to the beginning of your letter for address and barcode information.
     * See here for templates: &lt;a
     * href="https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/letter_certified_template.pdf"
     * target="_blank"&gt;#10 envelope&lt;/a&gt; and &lt;a
     * href="https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/letter_certified_flat_template.pdf"
     * target="_blank"&gt;flat envelope&lt;/a&gt; (used for letters over 6 pages single-sided or 12 pages
     * double-sided). You will not be charged for this extra sheet. * `certified_return_receipt` -
     * request an electronic copy of the recipient's signature to prove delivery of your certified
     * letter * `registered` - provides tracking and confirmation for international addresses
     * @return Returns the Internal ExtraServiceEnum
     */
    @JsonGetter("extra_service")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<ExtraServiceEnum> internalGetExtraService() {
        return this.extraService;
    }

    /**
     * Getter for ExtraService.
     * Add an extra service to your letter. Can only be non-`null` if `mail_type` isn't
     * `usps_standard`. See &lt;a href="https://www.lob.com/pricing/print-mail#compare"
     * target="_blank"&gt;pricing&lt;/a&gt; for extra costs incurred. * `certified` - track and confirm
     * delivery for domestic destinations. An extra sheet (1 PDF page single-sided or 2 PDF pages
     * double-sided) is added to the beginning of your letter for address and barcode information.
     * See here for templates: &lt;a
     * href="https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/letter_certified_template.pdf"
     * target="_blank"&gt;#10 envelope&lt;/a&gt; and &lt;a
     * href="https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/letter_certified_flat_template.pdf"
     * target="_blank"&gt;flat envelope&lt;/a&gt; (used for letters over 6 pages single-sided or 12 pages
     * double-sided). You will not be charged for this extra sheet. * `certified_return_receipt` -
     * request an electronic copy of the recipient's signature to prove delivery of your certified
     * letter * `registered` - provides tracking and confirmation for international addresses
     * @return Returns the ExtraServiceEnum
     */
    public ExtraServiceEnum getExtraService() {
        return OptionalNullable.getFrom(extraService);
    }

    /**
     * Setter for ExtraService.
     * Add an extra service to your letter. Can only be non-`null` if `mail_type` isn't
     * `usps_standard`. See &lt;a href="https://www.lob.com/pricing/print-mail#compare"
     * target="_blank"&gt;pricing&lt;/a&gt; for extra costs incurred. * `certified` - track and confirm
     * delivery for domestic destinations. An extra sheet (1 PDF page single-sided or 2 PDF pages
     * double-sided) is added to the beginning of your letter for address and barcode information.
     * See here for templates: &lt;a
     * href="https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/letter_certified_template.pdf"
     * target="_blank"&gt;#10 envelope&lt;/a&gt; and &lt;a
     * href="https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/letter_certified_flat_template.pdf"
     * target="_blank"&gt;flat envelope&lt;/a&gt; (used for letters over 6 pages single-sided or 12 pages
     * double-sided). You will not be charged for this extra sheet. * `certified_return_receipt` -
     * request an electronic copy of the recipient's signature to prove delivery of your certified
     * letter * `registered` - provides tracking and confirmation for international addresses
     * @param extraService Value for ExtraServiceEnum
     */
    @JsonSetter("extra_service")
    public void setExtraService(ExtraServiceEnum extraService) {
        this.extraService = OptionalNullable.of(extraService);
    }

    /**
     * UnSetter for ExtraService.
     * Add an extra service to your letter. Can only be non-`null` if `mail_type` isn't
     * `usps_standard`. See &lt;a href="https://www.lob.com/pricing/print-mail#compare"
     * target="_blank"&gt;pricing&lt;/a&gt; for extra costs incurred. * `certified` - track and confirm
     * delivery for domestic destinations. An extra sheet (1 PDF page single-sided or 2 PDF pages
     * double-sided) is added to the beginning of your letter for address and barcode information.
     * See here for templates: &lt;a
     * href="https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/letter_certified_template.pdf"
     * target="_blank"&gt;#10 envelope&lt;/a&gt; and &lt;a
     * href="https://s3-us-west-2.amazonaws.com/public.lob.com/assets/templates/letter_certified_flat_template.pdf"
     * target="_blank"&gt;flat envelope&lt;/a&gt; (used for letters over 6 pages single-sided or 12 pages
     * double-sided). You will not be charged for this extra sheet. * `certified_return_receipt` -
     * request an electronic copy of the recipient's signature to prove delivery of your certified
     * letter * `registered` - provides tracking and confirmation for international addresses
     */
    public void unsetExtraService() {
        extraService = null;
    }

    /**
     * Getter for MailType.
     * A string designating the mail postage type: * `usps_first_class` - (default) *
     * `usps_standard` - a &lt;a href="https://lob.com/pricing/print-mail#compare"
     * target="_blank"&gt;cheaper option&lt;/a&gt; which is less predictable and takes longer to deliver.
     * `usps_standard` cannot be used with `4x6` postcards or for any postcards sent outside of the
     * United States.
     * @return Returns the MailTypeEnum
     */
    @JsonGetter("mail_type")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public MailTypeEnum getMailType() {
        return mailType;
    }

    /**
     * Setter for MailType.
     * A string designating the mail postage type: * `usps_first_class` - (default) *
     * `usps_standard` - a &lt;a href="https://lob.com/pricing/print-mail#compare"
     * target="_blank"&gt;cheaper option&lt;/a&gt; which is less predictable and takes longer to deliver.
     * `usps_standard` cannot be used with `4x6` postcards or for any postcards sent outside of the
     * United States.
     * @param mailType Value for MailTypeEnum
     */
    @JsonSetter("mail_type")
    public void setMailType(MailTypeEnum mailType) {
        this.mailType = mailType;
    }

    /**
     * Getter for QrCode.
     * Customize and place a QR code on all the postcards, letters or self mailers in a campaign.
     * Redirect URLs can either be unique for each recipient, or a single link can be used for the
     * whole campaign. See `redirect_url` attribute below for more details.
     * @return Returns the QrCodeCampaigns
     */
    @JsonGetter("qr_code")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public QrCodeCampaigns getQrCode() {
        return qrCode;
    }

    /**
     * Setter for QrCode.
     * Customize and place a QR code on all the postcards, letters or self mailers in a campaign.
     * Redirect URLs can either be unique for each recipient, or a single link can be used for the
     * whole campaign. See `redirect_url` attribute below for more details.
     * @param qrCode Value for QrCodeCampaigns
     */
    @JsonSetter("qr_code")
    public void setQrCode(QrCodeCampaigns qrCode) {
        this.qrCode = qrCode;
    }

    /**
     * Converts this LetterDetailsWritable into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "LetterDetailsWritable [" + "color=" + color + ", addressPlacement="
                + addressPlacement + ", addOnTypes=" + addOnTypes + ", buckslips=" + buckslips
                + ", cards=" + cards + ", customEnvelope=" + customEnvelope + ", doubleSided="
                + doubleSided + ", extraService=" + extraService + ", mailType=" + mailType
                + ", qrCode=" + qrCode + "]";
    }

    /**
     * Builds a new {@link LetterDetailsWritable.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link LetterDetailsWritable.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(color)
                .addressPlacement(getAddressPlacement())
                .doubleSided(getDoubleSided())
                .mailType(getMailType())
                .qrCode(getQrCode());
        builder.addOnTypes = internalGetAddOnTypes();
        builder.buckslips = internalGetBuckslips();
        builder.cards = internalGetCards();
        builder.customEnvelope = internalGetCustomEnvelope();
        builder.extraService = internalGetExtraService();
        return builder;
    }

    /**
     * Class to build instances of {@link LetterDetailsWritable}.
     */
    public static class Builder {
        private boolean color;
        private AddressPlacementEnum addressPlacement = AddressPlacementEnum.TOP_FIRST_PAGE;
        private OptionalNullable<List<LetterAddOnTypesEnum>> addOnTypes;
        private OptionalNullable<List<String>> buckslips;
        private OptionalNullable<List<String>> cards;
        private OptionalNullable<String> customEnvelope;
        private Boolean doubleSided = true;
        private OptionalNullable<ExtraServiceEnum> extraService;
        private MailTypeEnum mailType = MailTypeEnum.USPS_FIRST_CLASS;
        private QrCodeCampaigns qrCode;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  color  boolean value for color.
         */
        public Builder(boolean color) {
            this.color = color;
        }

        /**
         * Setter for color.
         * @param  color  boolean value for color.
         * @return Builder
         */
        public Builder color(boolean color) {
            this.color = color;
            return this;
        }

        /**
         * Setter for addressPlacement.
         * @param  addressPlacement  AddressPlacementEnum value for addressPlacement.
         * @return Builder
         */
        public Builder addressPlacement(AddressPlacementEnum addressPlacement) {
            this.addressPlacement = addressPlacement;
            return this;
        }

        /**
         * Setter for addOnTypes.
         * @param  addOnTypes  List of LetterAddOnTypesEnum value for addOnTypes.
         * @return Builder
         */
        public Builder addOnTypes(List<LetterAddOnTypesEnum> addOnTypes) {
            this.addOnTypes = OptionalNullable.of(addOnTypes);
            return this;
        }

        /**
         * UnSetter for addOnTypes.
         * @return Builder
         */
        public Builder unsetAddOnTypes() {
            addOnTypes = null;
            return this;
        }

        /**
         * Setter for buckslips.
         * @param  buckslips  List of String value for buckslips.
         * @return Builder
         */
        public Builder buckslips(List<String> buckslips) {
            this.buckslips = OptionalNullable.of(buckslips);
            return this;
        }

        /**
         * UnSetter for buckslips.
         * @return Builder
         */
        public Builder unsetBuckslips() {
            buckslips = null;
            return this;
        }

        /**
         * Setter for cards.
         * @param  cards  List of String value for cards.
         * @return Builder
         */
        public Builder cards(List<String> cards) {
            this.cards = OptionalNullable.of(cards);
            return this;
        }

        /**
         * UnSetter for cards.
         * @return Builder
         */
        public Builder unsetCards() {
            cards = null;
            return this;
        }

        /**
         * Setter for customEnvelope.
         * @param  customEnvelope  String value for customEnvelope.
         * @return Builder
         */
        public Builder customEnvelope(String customEnvelope) {
            this.customEnvelope = OptionalNullable.of(customEnvelope);
            return this;
        }

        /**
         * UnSetter for customEnvelope.
         * @return Builder
         */
        public Builder unsetCustomEnvelope() {
            customEnvelope = null;
            return this;
        }

        /**
         * Setter for doubleSided.
         * @param  doubleSided  Boolean value for doubleSided.
         * @return Builder
         */
        public Builder doubleSided(Boolean doubleSided) {
            this.doubleSided = doubleSided;
            return this;
        }

        /**
         * Setter for extraService.
         * @param  extraService  ExtraServiceEnum value for extraService.
         * @return Builder
         */
        public Builder extraService(ExtraServiceEnum extraService) {
            this.extraService = OptionalNullable.of(extraService);
            return this;
        }

        /**
         * UnSetter for extraService.
         * @return Builder
         */
        public Builder unsetExtraService() {
            extraService = null;
            return this;
        }

        /**
         * Setter for mailType.
         * @param  mailType  MailTypeEnum value for mailType.
         * @return Builder
         */
        public Builder mailType(MailTypeEnum mailType) {
            this.mailType = mailType;
            return this;
        }

        /**
         * Setter for qrCode.
         * @param  qrCode  QrCodeCampaigns value for qrCode.
         * @return Builder
         */
        public Builder qrCode(QrCodeCampaigns qrCode) {
            this.qrCode = qrCode;
            return this;
        }

        /**
         * Builds a new {@link LetterDetailsWritable} object using the set fields.
         * @return {@link LetterDetailsWritable}
         */
        public LetterDetailsWritable build() {
            return new LetterDetailsWritable(color, addressPlacement, addOnTypes, buckslips, cards,
                    customEnvelope, doubleSided, extraService, mailType, qrCode);
        }
    }
}
