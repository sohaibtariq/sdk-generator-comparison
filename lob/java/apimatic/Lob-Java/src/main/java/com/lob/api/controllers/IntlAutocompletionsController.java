/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.lob.api.controllers;

import com.lob.api.ApiHelper;
import com.lob.api.Server;
import com.lob.api.exceptions.ApiException;
import com.lob.api.exceptions.ErrorErrorException;
import com.lob.api.http.request.HttpMethod;
import com.lob.api.models.CountryExtendedEnum;
import com.lob.api.models.IntlAutocompletions;
import com.lob.api.models.XLangOutputEnum;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class IntlAutocompletionsController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public IntlAutocompletionsController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * Given an address prefix consisting of a partial primary line and country, as well as optional
     * input of city, state, and zip code, this functionality returns up to 10 full International
     * address suggestions. Not all of them will turn out to be valid addresses; they'll need to be
     * [verified](#operation/intl_verification).
     * @param  addressPrefix  Required parameter: Only accepts numbers and street names in an
     *         alphanumeric format.
     * @param  country  Required parameter: Must be a 2 letter country short-name code (ISO 3166).
     *         Does not accept `US`, `AS`, `PR`, `FM`, `GU`, `MH`, `MP`, `PW`, or `VI`. For these
     *         addresses, please use the US verification API. Also does not accept `PS`, which is
     *         not currently supported.
     * @param  xLangOutput  Optional parameter: * `native` - Translate response to the native
     *         language of the country in the request * `match` - match the response to the language
     *         in the request Default response is in English.
     * @param  city  Optional parameter: An optional city input used to filter suggestions. Case
     *         insensitive and does not match partial abbreviations.
     * @param  state  Optional parameter: An optional state input used to filter suggestions. Case
     *         insensitive and does not match partial abbreviations.
     * @param  zipCode  Optional parameter: An optional Zip Code input used to filter suggestions.
     *         Matches partial entries.
     * @param  geoIpSort  Optional parameter: If `true`, sort suggestions by proximity to the IP set
     *         in the `X-Forwarded-For` header.
     * @return    Returns the IntlAutocompletions response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public IntlAutocompletions intlAutocompletions(
            final String addressPrefix,
            final CountryExtendedEnum country,
            final XLangOutputEnum xLangOutput,
            final String city,
            final String state,
            final String zipCode,
            final Boolean geoIpSort) throws ApiException, IOException {
        return prepareIntlAutocompletionsRequest(addressPrefix, country, xLangOutput, city, state,
                zipCode, geoIpSort).execute();
    }

    /**
     * Given an address prefix consisting of a partial primary line and country, as well as optional
     * input of city, state, and zip code, this functionality returns up to 10 full International
     * address suggestions. Not all of them will turn out to be valid addresses; they'll need to be
     * [verified](#operation/intl_verification).
     * @param  addressPrefix  Required parameter: Only accepts numbers and street names in an
     *         alphanumeric format.
     * @param  country  Required parameter: Must be a 2 letter country short-name code (ISO 3166).
     *         Does not accept `US`, `AS`, `PR`, `FM`, `GU`, `MH`, `MP`, `PW`, or `VI`. For these
     *         addresses, please use the US verification API. Also does not accept `PS`, which is
     *         not currently supported.
     * @param  xLangOutput  Optional parameter: * `native` - Translate response to the native
     *         language of the country in the request * `match` - match the response to the language
     *         in the request Default response is in English.
     * @param  city  Optional parameter: An optional city input used to filter suggestions. Case
     *         insensitive and does not match partial abbreviations.
     * @param  state  Optional parameter: An optional state input used to filter suggestions. Case
     *         insensitive and does not match partial abbreviations.
     * @param  zipCode  Optional parameter: An optional Zip Code input used to filter suggestions.
     *         Matches partial entries.
     * @param  geoIpSort  Optional parameter: If `true`, sort suggestions by proximity to the IP set
     *         in the `X-Forwarded-For` header.
     * @return    Returns the IntlAutocompletions response from the API call
     */
    public CompletableFuture<IntlAutocompletions> intlAutocompletionsAsync(
            final String addressPrefix,
            final CountryExtendedEnum country,
            final XLangOutputEnum xLangOutput,
            final String city,
            final String state,
            final String zipCode,
            final Boolean geoIpSort) {
        try { 
            return prepareIntlAutocompletionsRequest(addressPrefix, country, xLangOutput, city, state,
            zipCode, geoIpSort).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for intlAutocompletions.
     */
    private ApiCall<IntlAutocompletions, ApiException> prepareIntlAutocompletionsRequest(
            final String addressPrefix,
            final CountryExtendedEnum country,
            final XLangOutputEnum xLangOutput,
            final String city,
            final String state,
            final String zipCode,
            final Boolean geoIpSort) throws IOException {
        return new ApiCall.Builder<IntlAutocompletions, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/intl_autocompletions")
                        .formParam(param -> param.key("address_prefix")
                                .value(addressPrefix))
                        .formParam(param -> param.key("country")
                                .value((country != null) ? country.value() : null))
                        .formParam(param -> param.key("city")
                                .value(city).isRequired(false))
                        .formParam(param -> param.key("state")
                                .value(state).isRequired(false))
                        .formParam(param -> param.key("zip_code")
                                .value(zipCode).isRequired(false))
                        .formParam(param -> param.key("geo_ip_sort")
                                .value(geoIpSort).isRequired(false))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/x-www-form-urlencoded").isRequired(false))
                        .headerParam(param -> param.key("x-lang-output")
                                .value((xLangOutput != null) ? xLangOutput.value() : null).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, IntlAutocompletions.class))
                        .nullify404(false)
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Error",
                                (reason, context) -> new ErrorErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}