/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.lob.api.controllers;

import com.lob.api.ApiHelper;
import com.lob.api.Server;
import com.lob.api.exceptions.ApiException;
import com.lob.api.exceptions.ErrorErrorException;
import com.lob.api.http.request.HttpMethod;
import com.lob.api.models.AllTemplateVersions;
import com.lob.api.models.BeforeAfter;
import com.lob.api.models.EngineEnum;
import com.lob.api.models.TemplateVersion;
import com.lob.api.models.TemplateVersionDeletion;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class TemplateVersionsController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public TemplateVersionsController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * Retrieves the template version with the given template and version ids.
     * @param  tmplId  Required parameter: The ID of the template to which the version belongs.
     * @param  vrsnId  Required parameter: id of the template_version
     * @return    Returns the TemplateVersion response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public TemplateVersion templateVersionRetrieve(
            final String tmplId,
            final String vrsnId) throws ApiException, IOException {
        return prepareTemplateVersionRetrieveRequest(tmplId, vrsnId).execute();
    }

    /**
     * Retrieves the template version with the given template and version ids.
     * @param  tmplId  Required parameter: The ID of the template to which the version belongs.
     * @param  vrsnId  Required parameter: id of the template_version
     * @return    Returns the TemplateVersion response from the API call
     */
    public CompletableFuture<TemplateVersion> templateVersionRetrieveAsync(
            final String tmplId,
            final String vrsnId) {
        try { 
            return prepareTemplateVersionRetrieveRequest(tmplId, vrsnId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for templateVersionRetrieve.
     */
    private ApiCall<TemplateVersion, ApiException> prepareTemplateVersionRetrieveRequest(
            final String tmplId,
            final String vrsnId) throws IOException {
        return new ApiCall.Builder<TemplateVersion, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/templates/{tmpl_id}/versions/{vrsn_id}")
                        .templateParam(param -> param.key("tmpl_id").value(tmplId)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("vrsn_id").value(vrsnId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, TemplateVersion.class))
                        .nullify404(false)
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Error",
                                (reason, context) -> new ErrorErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Updates the template version with the given template and version ids.
     * @param  tmplId  Required parameter: The ID of the template to which the version belongs.
     * @param  vrsnId  Required parameter: id of the template_version
     * @param  description  Optional parameter: An internal description that identifies this
     *         resource. Must be no longer than 255 characters.
     * @param  engine  Optional parameter: The engine used to combine HTML template with merge
     *         variables. * `legacy` - Lob's original engine * `handlebars`
     * @param  requiredVars  Optional parameter: An array of required variables to be used in a
     *         template. Only available for `handlebars` templates.
     * @return    Returns the TemplateVersion response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public TemplateVersion templateVersionUpdate(
            final String tmplId,
            final String vrsnId,
            final String description,
            final EngineEnum engine,
            final List<String> requiredVars) throws ApiException, IOException {
        return prepareTemplateVersionUpdateRequest(tmplId, vrsnId, description, engine,
                requiredVars).execute();
    }

    /**
     * Updates the template version with the given template and version ids.
     * @param  tmplId  Required parameter: The ID of the template to which the version belongs.
     * @param  vrsnId  Required parameter: id of the template_version
     * @param  description  Optional parameter: An internal description that identifies this
     *         resource. Must be no longer than 255 characters.
     * @param  engine  Optional parameter: The engine used to combine HTML template with merge
     *         variables. * `legacy` - Lob's original engine * `handlebars`
     * @param  requiredVars  Optional parameter: An array of required variables to be used in a
     *         template. Only available for `handlebars` templates.
     * @return    Returns the TemplateVersion response from the API call
     */
    public CompletableFuture<TemplateVersion> templateVersionUpdateAsync(
            final String tmplId,
            final String vrsnId,
            final String description,
            final EngineEnum engine,
            final List<String> requiredVars) {
        try { 
            return prepareTemplateVersionUpdateRequest(tmplId, vrsnId, description, engine,
            requiredVars).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for templateVersionUpdate.
     */
    private ApiCall<TemplateVersion, ApiException> prepareTemplateVersionUpdateRequest(
            final String tmplId,
            final String vrsnId,
            final String description,
            final EngineEnum engine,
            final List<String> requiredVars) throws IOException {
        return new ApiCall.Builder<TemplateVersion, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/templates/{tmpl_id}/versions/{vrsn_id}")
                        .formParam(param -> param.key("description")
                                .value(description).isRequired(false))
                        .formParam(param -> param.key("engine")
                                .value((engine != null) ? engine.value() : "legacy").isRequired(false))
                        .formParam(param -> param.key("required_vars")
                                .value(requiredVars).isRequired(false))
                        .templateParam(param -> param.key("tmpl_id").value(tmplId)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("vrsn_id").value(vrsnId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/x-www-form-urlencoded").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, TemplateVersion.class))
                        .nullify404(false)
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Error",
                                (reason, context) -> new ErrorErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Permanently deletes a template version. A template's `published_version` can not be deleted.
     * @param  tmplId  Required parameter: The ID of the template to which the version belongs.
     * @param  vrsnId  Required parameter: id of the template_version
     * @return    Returns the TemplateVersionDeletion response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public TemplateVersionDeletion templateVersionDelete(
            final String tmplId,
            final String vrsnId) throws ApiException, IOException {
        return prepareTemplateVersionDeleteRequest(tmplId, vrsnId).execute();
    }

    /**
     * Permanently deletes a template version. A template's `published_version` can not be deleted.
     * @param  tmplId  Required parameter: The ID of the template to which the version belongs.
     * @param  vrsnId  Required parameter: id of the template_version
     * @return    Returns the TemplateVersionDeletion response from the API call
     */
    public CompletableFuture<TemplateVersionDeletion> templateVersionDeleteAsync(
            final String tmplId,
            final String vrsnId) {
        try { 
            return prepareTemplateVersionDeleteRequest(tmplId, vrsnId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for templateVersionDelete.
     */
    private ApiCall<TemplateVersionDeletion, ApiException> prepareTemplateVersionDeleteRequest(
            final String tmplId,
            final String vrsnId) throws IOException {
        return new ApiCall.Builder<TemplateVersionDeletion, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/templates/{tmpl_id}/versions/{vrsn_id}")
                        .templateParam(param -> param.key("tmpl_id").value(tmplId)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("vrsn_id").value(vrsnId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, TemplateVersionDeletion.class))
                        .nullify404(false)
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Error",
                                (reason, context) -> new ErrorErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Returns a list of template versions for the given template ID. The template versions are
     * sorted by creation date, with the most recently created appearing first.
     * @param  tmplId  Required parameter: The ID of the template associated with the retrieved
     *         versions
     * @param  limit  Optional parameter: How many results to return.
     * @param  beforeAfter  Optional parameter: `before` and `after` are both optional but only one
     *         of them can be in the query at a time.
     * @param  include  Optional parameter: Request that the response include the total count by
     *         specifying `include=["total_count"]`.
     * @param  dateCreated  Optional parameter: Filter by date created. Accepted formats are
     *         ISO-8601 date or datetime, e.g. `{ "gt": "2012-01-01", "lt": "2012-01-31T12:34:56Z"
     *         }` where `gt` is &gt;, `lt` is &lt;, `gte` is ≥, and `lte` is ≤.
     * @return    Returns the AllTemplateVersions response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public AllTemplateVersions templateVersionsList(
            final String tmplId,
            final Integer limit,
            final BeforeAfter beforeAfter,
            final List<String> include,
            final Map<String, String> dateCreated) throws ApiException, IOException {
        return prepareTemplateVersionsListRequest(tmplId, limit, beforeAfter, include,
                dateCreated).execute();
    }

    /**
     * Returns a list of template versions for the given template ID. The template versions are
     * sorted by creation date, with the most recently created appearing first.
     * @param  tmplId  Required parameter: The ID of the template associated with the retrieved
     *         versions
     * @param  limit  Optional parameter: How many results to return.
     * @param  beforeAfter  Optional parameter: `before` and `after` are both optional but only one
     *         of them can be in the query at a time.
     * @param  include  Optional parameter: Request that the response include the total count by
     *         specifying `include=["total_count"]`.
     * @param  dateCreated  Optional parameter: Filter by date created. Accepted formats are
     *         ISO-8601 date or datetime, e.g. `{ "gt": "2012-01-01", "lt": "2012-01-31T12:34:56Z"
     *         }` where `gt` is &gt;, `lt` is &lt;, `gte` is ≥, and `lte` is ≤.
     * @return    Returns the AllTemplateVersions response from the API call
     */
    public CompletableFuture<AllTemplateVersions> templateVersionsListAsync(
            final String tmplId,
            final Integer limit,
            final BeforeAfter beforeAfter,
            final List<String> include,
            final Map<String, String> dateCreated) {
        try { 
            return prepareTemplateVersionsListRequest(tmplId, limit, beforeAfter, include,
            dateCreated).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for templateVersionsList.
     */
    private ApiCall<AllTemplateVersions, ApiException> prepareTemplateVersionsListRequest(
            final String tmplId,
            final Integer limit,
            final BeforeAfter beforeAfter,
            final List<String> include,
            final Map<String, String> dateCreated) throws IOException {
        return new ApiCall.Builder<AllTemplateVersions, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/templates/{tmpl_id}/versions")
                        .queryParam(param -> param.key("limit")
                                .value((limit != null) ? limit : 10).isRequired(false))
                        .queryParam(param -> param.key("before/after")
                                .value(beforeAfter).isRequired(false))
                        .queryParam(param -> param.key("include")
                                .value(include).isRequired(false))
                        .queryParam(param -> param.key("date_created")
                                .value(dateCreated).isRequired(false))
                        .templateParam(param -> param.key("tmpl_id").value(tmplId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, AllTemplateVersions.class))
                        .nullify404(false)
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Error",
                                (reason, context) -> new ErrorErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Creates a new template version attached to the specified template.
     * @param  tmplId  Required parameter: The ID of the template the new version will be attached
     *         to
     * @param  html  Required parameter: An HTML string of less than 100,000 characters to be used
     *         as the `published_version` of this template. See [here](#section/HTML-Examples) for
     *         guidance on designing HTML templates. Please see endpoint specific documentation for
     *         any other product-specific HTML details: - [Postcards](#operation/postcard_create) -
     *         `front` and `back` - [Self Mailers](#operation/self_mailer_create) - `inside` and
     *         `outside` - [Letters](#operation/letter_create) - `file` -
     *         [Checks](#operation/check_create) - `check_bottom` and `attachment` -
     *         [Cards](#operation/card_create) - `front` and `back` If there is a syntax error with
     *         your variable names within your HTML, then an error will be thrown, e.g. using a
     *         `{{#users}}` opening tag without the corresponding closing tag `{{/users}}`.
     * @param  description  Optional parameter: An internal description that identifies this
     *         resource. Must be no longer than 255 characters.
     * @param  engine  Optional parameter: The engine used to combine HTML template with merge
     *         variables. * `legacy` - Lob's original engine * `handlebars`
     * @param  requiredVars  Optional parameter: An array of required variables to be used in a
     *         template. Only available for `handlebars` templates.
     * @return    Returns the TemplateVersion response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public TemplateVersion createTemplateVersion(
            final String tmplId,
            final String html,
            final String description,
            final EngineEnum engine,
            final List<String> requiredVars) throws ApiException, IOException {
        return prepareCreateTemplateVersionRequest(tmplId, html, description, engine,
                requiredVars).execute();
    }

    /**
     * Creates a new template version attached to the specified template.
     * @param  tmplId  Required parameter: The ID of the template the new version will be attached
     *         to
     * @param  html  Required parameter: An HTML string of less than 100,000 characters to be used
     *         as the `published_version` of this template. See [here](#section/HTML-Examples) for
     *         guidance on designing HTML templates. Please see endpoint specific documentation for
     *         any other product-specific HTML details: - [Postcards](#operation/postcard_create) -
     *         `front` and `back` - [Self Mailers](#operation/self_mailer_create) - `inside` and
     *         `outside` - [Letters](#operation/letter_create) - `file` -
     *         [Checks](#operation/check_create) - `check_bottom` and `attachment` -
     *         [Cards](#operation/card_create) - `front` and `back` If there is a syntax error with
     *         your variable names within your HTML, then an error will be thrown, e.g. using a
     *         `{{#users}}` opening tag without the corresponding closing tag `{{/users}}`.
     * @param  description  Optional parameter: An internal description that identifies this
     *         resource. Must be no longer than 255 characters.
     * @param  engine  Optional parameter: The engine used to combine HTML template with merge
     *         variables. * `legacy` - Lob's original engine * `handlebars`
     * @param  requiredVars  Optional parameter: An array of required variables to be used in a
     *         template. Only available for `handlebars` templates.
     * @return    Returns the TemplateVersion response from the API call
     */
    public CompletableFuture<TemplateVersion> createTemplateVersionAsync(
            final String tmplId,
            final String html,
            final String description,
            final EngineEnum engine,
            final List<String> requiredVars) {
        try { 
            return prepareCreateTemplateVersionRequest(tmplId, html, description, engine,
            requiredVars).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for createTemplateVersion.
     */
    private ApiCall<TemplateVersion, ApiException> prepareCreateTemplateVersionRequest(
            final String tmplId,
            final String html,
            final String description,
            final EngineEnum engine,
            final List<String> requiredVars) throws IOException {
        return new ApiCall.Builder<TemplateVersion, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/templates/{tmpl_id}/versions")
                        .formParam(param -> param.key("html")
                                .value(html))
                        .formParam(param -> param.key("description")
                                .value(description).isRequired(false))
                        .formParam(param -> param.key("engine")
                                .value((engine != null) ? engine.value() : "legacy").isRequired(false))
                        .formParam(param -> param.key("required_vars")
                                .value(requiredVars).isRequired(false))
                        .templateParam(param -> param.key("tmpl_id").value(tmplId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/x-www-form-urlencoded").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, TemplateVersion.class))
                        .nullify404(false)
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("Error",
                                (reason, context) -> new ErrorErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}