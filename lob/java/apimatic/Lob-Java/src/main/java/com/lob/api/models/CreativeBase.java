/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.lob.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.lob.api.models.containers.FromAttribute;
import io.apimatic.core.types.OptionalNullable;
import java.util.Map;

/**
 * This is a model class for CreativeBase type.
 */
public class CreativeBase {
    private FromAttribute from;
    private OptionalNullable<String> description;
    private Map<String, String> metadata;

    /**
     * Default constructor.
     */
    public CreativeBase() {
    }

    /**
     * Initialization constructor.
     * @param  from  FromAttribute value for from.
     * @param  description  String value for description.
     * @param  metadata  Map of String, value for metadata.
     */
    public CreativeBase(
            FromAttribute from,
            String description,
            Map<String, String> metadata) {
        this.from = from;
        this.description = OptionalNullable.of(description);
        this.metadata = metadata;
    }

    /**
     * Initialization constructor.
     * @param  from  FromAttribute value for from.
     * @param  description  String value for description.
     * @param  metadata  Map of String, value for metadata.
     */

    protected CreativeBase(FromAttribute from, OptionalNullable<String> description,
            Map<String, String> metadata) {
        this.from = from;
        this.description = description;
        this.metadata = metadata;
    }

    /**
     * Getter for From.
     * Must either be an address ID or an inline object with correct address parameters. All
     * addresses will be standardized into uppercase without being modified by verification.
     * @return Returns the FromAttribute
     */
    @JsonGetter("from")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public FromAttribute getFrom() {
        return from;
    }

    /**
     * Setter for From.
     * Must either be an address ID or an inline object with correct address parameters. All
     * addresses will be standardized into uppercase without being modified by verification.
     * @param from Value for FromAttribute
     */
    @JsonSetter("from")
    public void setFrom(FromAttribute from) {
        this.from = from;
    }

    /**
     * Internal Getter for Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     * @return Returns the Internal String
     */
    @JsonGetter("description")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetDescription() {
        return this.description;
    }

    /**
     * Getter for Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     * @return Returns the String
     */
    public String getDescription() {
        return OptionalNullable.getFrom(description);
    }

    /**
     * Setter for Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     * @param description Value for String
     */
    @JsonSetter("description")
    public void setDescription(String description) {
        this.description = OptionalNullable.of(description);
    }

    /**
     * UnSetter for Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     */
    public void unsetDescription() {
        description = null;
    }

    /**
     * Getter for Metadata.
     * Use metadata to store custom information for tagging and labeling back to your internal
     * systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters
     * and values must be at most 500 characters. Neither can contain the characters `"` and `\`.
     * i.e. '{"customer_id" : "NEWYORK2015"}' Nested objects are not supported. See
     * [Metadata](#section/Metadata) for more information.
     * @return Returns the Map of String, String
     */
    @JsonGetter("metadata")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Map<String, String> getMetadata() {
        return metadata;
    }

    /**
     * Setter for Metadata.
     * Use metadata to store custom information for tagging and labeling back to your internal
     * systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters
     * and values must be at most 500 characters. Neither can contain the characters `"` and `\`.
     * i.e. '{"customer_id" : "NEWYORK2015"}' Nested objects are not supported. See
     * [Metadata](#section/Metadata) for more information.
     * @param metadata Value for Map of String, String
     */
    @JsonSetter("metadata")
    public void setMetadata(Map<String, String> metadata) {
        this.metadata = metadata;
    }

    /**
     * Converts this CreativeBase into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "CreativeBase [" + "from=" + from + ", description=" + description + ", metadata="
                + metadata + "]";
    }

    /**
     * Builds a new {@link CreativeBase.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link CreativeBase.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .from(getFrom())
                .metadata(getMetadata());
        builder.description = internalGetDescription();
        return builder;
    }

    /**
     * Class to build instances of {@link CreativeBase}.
     */
    public static class Builder {
        private FromAttribute from;
        private OptionalNullable<String> description;
        private Map<String, String> metadata;



        /**
         * Setter for from.
         * @param  from  FromAttribute value for from.
         * @return Builder
         */
        public Builder from(FromAttribute from) {
            this.from = from;
            return this;
        }

        /**
         * Setter for description.
         * @param  description  String value for description.
         * @return Builder
         */
        public Builder description(String description) {
            this.description = OptionalNullable.of(description);
            return this;
        }

        /**
         * UnSetter for description.
         * @return Builder
         */
        public Builder unsetDescription() {
            description = null;
            return this;
        }

        /**
         * Setter for metadata.
         * @param  metadata  Map of String, value for metadata.
         * @return Builder
         */
        public Builder metadata(Map<String, String> metadata) {
            this.metadata = metadata;
            return this;
        }

        /**
         * Builds a new {@link CreativeBase} object using the set fields.
         * @return {@link CreativeBase}
         */
        public CreativeBase build() {
            return new CreativeBase(from, description, metadata);
        }
    }
}
