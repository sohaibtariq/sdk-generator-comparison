/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.lob.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.lob.api.DateTimeHelper;
import com.lob.api.models.containers.SendDate;
import io.apimatic.core.types.OptionalNullable;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;

/**
 * This is a model class for Check type.
 */
public class Check {
    private OptionalNullable<String> description;
    private Map<String, String> metadata;
    private OptionalNullable<Object> mergeVariables;
    private SendDate sendDate;
    private MailType2Enum mailType;
    private OptionalNullable<String> memo;
    private Integer checkNumber;
    private String message;
    private ChkUseTypeEnum useType;
    private AddressUs from;
    private String id;
    private double amount;
    private BankAccount bankAccount;
    private String checkBottomTemplateId;
    private String attachmentTemplateId;
    private String checkBottomTemplateVersionId;
    private String attachmentTemplateVersionId;
    private String url;
    private ToAddressUsChk to;
    private String carrier;
    private List<Thumbnail> thumbnails;
    private LocalDate expectedDeliveryDate;
    private OptionalNullable<List<TrackingEventNormal>> trackingEvents;
    private TheStatusOfTheCheckEnum status;
    private OptionalNullable<String> failureReason;
    private Object5Enum object;
    private LocalDateTime dateCreated;
    private LocalDateTime dateModified;
    private Boolean deleted;

    /**
     * Default constructor.
     */
    public Check() {
        carrier = "USPS";
        mailType = MailType2Enum.USPS_FIRST_CLASS;
        object = Object5Enum.CHECK;
    }

    /**
     * Initialization constructor.
     * @param  useType  ChkUseTypeEnum value for useType.
     * @param  id  String value for id.
     * @param  amount  double value for amount.
     * @param  bankAccount  BankAccount value for bankAccount.
     * @param  url  String value for url.
     * @param  to  ToAddressUsChk value for to.
     * @param  carrier  String value for carrier.
     * @param  dateCreated  LocalDateTime value for dateCreated.
     * @param  dateModified  LocalDateTime value for dateModified.
     * @param  description  String value for description.
     * @param  metadata  Map of String, value for metadata.
     * @param  mergeVariables  Object value for mergeVariables.
     * @param  sendDate  SendDate value for sendDate.
     * @param  mailType  MailType2Enum value for mailType.
     * @param  memo  String value for memo.
     * @param  checkNumber  Integer value for checkNumber.
     * @param  message  String value for message.
     * @param  from  AddressUs value for from.
     * @param  checkBottomTemplateId  String value for checkBottomTemplateId.
     * @param  attachmentTemplateId  String value for attachmentTemplateId.
     * @param  checkBottomTemplateVersionId  String value for checkBottomTemplateVersionId.
     * @param  attachmentTemplateVersionId  String value for attachmentTemplateVersionId.
     * @param  thumbnails  List of Thumbnail value for thumbnails.
     * @param  expectedDeliveryDate  LocalDate value for expectedDeliveryDate.
     * @param  trackingEvents  List of TrackingEventNormal value for trackingEvents.
     * @param  status  TheStatusOfTheCheckEnum value for status.
     * @param  failureReason  String value for failureReason.
     * @param  object  Object5Enum value for object.
     * @param  deleted  Boolean value for deleted.
     */
    public Check(
            ChkUseTypeEnum useType,
            String id,
            double amount,
            BankAccount bankAccount,
            String url,
            ToAddressUsChk to,
            String carrier,
            LocalDateTime dateCreated,
            LocalDateTime dateModified,
            String description,
            Map<String, String> metadata,
            Object mergeVariables,
            SendDate sendDate,
            MailType2Enum mailType,
            String memo,
            Integer checkNumber,
            String message,
            AddressUs from,
            String checkBottomTemplateId,
            String attachmentTemplateId,
            String checkBottomTemplateVersionId,
            String attachmentTemplateVersionId,
            List<Thumbnail> thumbnails,
            LocalDate expectedDeliveryDate,
            List<TrackingEventNormal> trackingEvents,
            TheStatusOfTheCheckEnum status,
            String failureReason,
            Object5Enum object,
            Boolean deleted) {
        this.description = OptionalNullable.of(description);
        this.metadata = metadata;
        this.mergeVariables = OptionalNullable.of(mergeVariables);
        this.sendDate = sendDate;
        this.mailType = mailType;
        this.memo = OptionalNullable.of(memo);
        this.checkNumber = checkNumber;
        this.message = message;
        this.useType = useType;
        this.from = from;
        this.id = id;
        this.amount = amount;
        this.bankAccount = bankAccount;
        this.checkBottomTemplateId = checkBottomTemplateId;
        this.attachmentTemplateId = attachmentTemplateId;
        this.checkBottomTemplateVersionId = checkBottomTemplateVersionId;
        this.attachmentTemplateVersionId = attachmentTemplateVersionId;
        this.url = url;
        this.to = to;
        this.carrier = carrier;
        this.thumbnails = thumbnails;
        this.expectedDeliveryDate = expectedDeliveryDate;
        this.trackingEvents = OptionalNullable.of(trackingEvents);
        this.status = status;
        this.failureReason = OptionalNullable.of(failureReason);
        this.object = object;
        this.dateCreated = dateCreated;
        this.dateModified = dateModified;
        this.deleted = deleted;
    }

    /**
     * Initialization constructor.
     * @param  useType  ChkUseTypeEnum value for useType.
     * @param  id  String value for id.
     * @param  amount  double value for amount.
     * @param  bankAccount  BankAccount value for bankAccount.
     * @param  url  String value for url.
     * @param  to  ToAddressUsChk value for to.
     * @param  carrier  String value for carrier.
     * @param  dateCreated  LocalDateTime value for dateCreated.
     * @param  dateModified  LocalDateTime value for dateModified.
     * @param  description  String value for description.
     * @param  metadata  Map of String, value for metadata.
     * @param  mergeVariables  Object value for mergeVariables.
     * @param  sendDate  SendDate value for sendDate.
     * @param  mailType  MailType2Enum value for mailType.
     * @param  memo  String value for memo.
     * @param  checkNumber  Integer value for checkNumber.
     * @param  message  String value for message.
     * @param  from  AddressUs value for from.
     * @param  checkBottomTemplateId  String value for checkBottomTemplateId.
     * @param  attachmentTemplateId  String value for attachmentTemplateId.
     * @param  checkBottomTemplateVersionId  String value for checkBottomTemplateVersionId.
     * @param  attachmentTemplateVersionId  String value for attachmentTemplateVersionId.
     * @param  thumbnails  List of Thumbnail value for thumbnails.
     * @param  expectedDeliveryDate  LocalDate value for expectedDeliveryDate.
     * @param  trackingEvents  List of TrackingEventNormal value for trackingEvents.
     * @param  status  TheStatusOfTheCheckEnum value for status.
     * @param  failureReason  String value for failureReason.
     * @param  object  Object5Enum value for object.
     * @param  deleted  Boolean value for deleted.
     */

    protected Check(ChkUseTypeEnum useType, String id, double amount, BankAccount bankAccount,
            String url, ToAddressUsChk to, String carrier, LocalDateTime dateCreated,
            LocalDateTime dateModified, OptionalNullable<String> description,
            Map<String, String> metadata, OptionalNullable<Object> mergeVariables,
            SendDate sendDate, MailType2Enum mailType, OptionalNullable<String> memo,
            Integer checkNumber, String message, AddressUs from, String checkBottomTemplateId,
            String attachmentTemplateId, String checkBottomTemplateVersionId,
            String attachmentTemplateVersionId, List<Thumbnail> thumbnails,
            LocalDate expectedDeliveryDate,
            OptionalNullable<List<TrackingEventNormal>> trackingEvents,
            TheStatusOfTheCheckEnum status, OptionalNullable<String> failureReason,
            Object5Enum object, Boolean deleted) {
        this.description = description;
        this.metadata = metadata;
        this.mergeVariables = mergeVariables;
        this.sendDate = sendDate;
        this.mailType = mailType;
        this.memo = memo;
        this.checkNumber = checkNumber;
        this.message = message;
        this.useType = useType;
        this.from = from;
        this.id = id;
        this.amount = amount;
        this.bankAccount = bankAccount;
        this.checkBottomTemplateId = checkBottomTemplateId;
        this.attachmentTemplateId = attachmentTemplateId;
        this.checkBottomTemplateVersionId = checkBottomTemplateVersionId;
        this.attachmentTemplateVersionId = attachmentTemplateVersionId;
        this.url = url;
        this.to = to;
        this.carrier = carrier;
        this.thumbnails = thumbnails;
        this.expectedDeliveryDate = expectedDeliveryDate;
        this.trackingEvents = trackingEvents;
        this.status = status;
        this.failureReason = failureReason;
        this.object = object;
        this.dateCreated = dateCreated;
        this.dateModified = dateModified;
        this.deleted = deleted;
    }

    /**
     * Internal Getter for Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     * @return Returns the Internal String
     */
    @JsonGetter("description")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetDescription() {
        return this.description;
    }

    /**
     * Getter for Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     * @return Returns the String
     */
    public String getDescription() {
        return OptionalNullable.getFrom(description);
    }

    /**
     * Setter for Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     * @param description Value for String
     */
    @JsonSetter("description")
    public void setDescription(String description) {
        this.description = OptionalNullable.of(description);
    }

    /**
     * UnSetter for Description.
     * An internal description that identifies this resource. Must be no longer than 255 characters.
     */
    public void unsetDescription() {
        description = null;
    }

    /**
     * Getter for Metadata.
     * Use metadata to store custom information for tagging and labeling back to your internal
     * systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters
     * and values must be at most 500 characters. Neither can contain the characters `"` and `\`.
     * i.e. '{"customer_id" : "NEWYORK2015"}' Nested objects are not supported. See
     * [Metadata](#section/Metadata) for more information.
     * @return Returns the Map of String, String
     */
    @JsonGetter("metadata")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Map<String, String> getMetadata() {
        return metadata;
    }

    /**
     * Setter for Metadata.
     * Use metadata to store custom information for tagging and labeling back to your internal
     * systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters
     * and values must be at most 500 characters. Neither can contain the characters `"` and `\`.
     * i.e. '{"customer_id" : "NEWYORK2015"}' Nested objects are not supported. See
     * [Metadata](#section/Metadata) for more information.
     * @param metadata Value for Map of String, String
     */
    @JsonSetter("metadata")
    public void setMetadata(Map<String, String> metadata) {
        this.metadata = metadata;
    }

    /**
     * Internal Getter for MergeVariables.
     * You can input a merge variable payload object to your template to render dynamic content. For
     * example, if you have a template like: `{{variable_name}}`, pass in `{"variable_name":
     * "Harry"}` to render `Harry`. `merge_variables` must be an object. Any type of value is
     * accepted as long as the object is valid JSON; you can use `strings`, `numbers`, `booleans`,
     * `arrays`, `objects`, or `null`. The max length of the object is 25,000 characters. If you
     * call `JSON.stringify` on your object, it can be no longer than 25,000 characters. Your
     * variable names cannot contain any whitespace or any of the following special characters: `!`,
     * `"`, `#`, `%`, `&amp;`, `'`, `(`, `)`, `*`, `+`, `,`, `/`, `;`, `&lt;`, `=`, `&gt;`, `{@literal @}`, `[`, `\`,
     * `]`, `^`, `` ` ``, `{`, `|`, `}`, `~`. More instructions can be found in &lt;a
     * href="https://help.lob.com/print-and-mail/designing-mail-creatives/dynamic-personalization#using-html-and-merge-variables-10"
     * target="_blank"&gt;our guide to using html and merge variables&lt;/a&gt;. Depending on your &lt;a
     * href="https://dashboard.lob.com/#/settings/account" target="_blank"&gt;Merge Variable
     * strictness&lt;/a&gt; setting, if you define variables in your HTML but do not pass them here, you
     * will either receive an error or the variable will render as an empty string.
     * @return Returns the Internal Object
     */
    @JsonGetter("merge_variables")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<Object> internalGetMergeVariables() {
        return this.mergeVariables;
    }

    /**
     * Getter for MergeVariables.
     * You can input a merge variable payload object to your template to render dynamic content. For
     * example, if you have a template like: `{{variable_name}}`, pass in `{"variable_name":
     * "Harry"}` to render `Harry`. `merge_variables` must be an object. Any type of value is
     * accepted as long as the object is valid JSON; you can use `strings`, `numbers`, `booleans`,
     * `arrays`, `objects`, or `null`. The max length of the object is 25,000 characters. If you
     * call `JSON.stringify` on your object, it can be no longer than 25,000 characters. Your
     * variable names cannot contain any whitespace or any of the following special characters: `!`,
     * `"`, `#`, `%`, `&amp;`, `'`, `(`, `)`, `*`, `+`, `,`, `/`, `;`, `&lt;`, `=`, `&gt;`, `{@literal @}`, `[`, `\`,
     * `]`, `^`, `` ` ``, `{`, `|`, `}`, `~`. More instructions can be found in &lt;a
     * href="https://help.lob.com/print-and-mail/designing-mail-creatives/dynamic-personalization#using-html-and-merge-variables-10"
     * target="_blank"&gt;our guide to using html and merge variables&lt;/a&gt;. Depending on your &lt;a
     * href="https://dashboard.lob.com/#/settings/account" target="_blank"&gt;Merge Variable
     * strictness&lt;/a&gt; setting, if you define variables in your HTML but do not pass them here, you
     * will either receive an error or the variable will render as an empty string.
     * @return Returns the Object
     */
    public Object getMergeVariables() {
        return OptionalNullable.getFrom(mergeVariables);
    }

    /**
     * Setter for MergeVariables.
     * You can input a merge variable payload object to your template to render dynamic content. For
     * example, if you have a template like: `{{variable_name}}`, pass in `{"variable_name":
     * "Harry"}` to render `Harry`. `merge_variables` must be an object. Any type of value is
     * accepted as long as the object is valid JSON; you can use `strings`, `numbers`, `booleans`,
     * `arrays`, `objects`, or `null`. The max length of the object is 25,000 characters. If you
     * call `JSON.stringify` on your object, it can be no longer than 25,000 characters. Your
     * variable names cannot contain any whitespace or any of the following special characters: `!`,
     * `"`, `#`, `%`, `&amp;`, `'`, `(`, `)`, `*`, `+`, `,`, `/`, `;`, `&lt;`, `=`, `&gt;`, `{@literal @}`, `[`, `\`,
     * `]`, `^`, `` ` ``, `{`, `|`, `}`, `~`. More instructions can be found in &lt;a
     * href="https://help.lob.com/print-and-mail/designing-mail-creatives/dynamic-personalization#using-html-and-merge-variables-10"
     * target="_blank"&gt;our guide to using html and merge variables&lt;/a&gt;. Depending on your &lt;a
     * href="https://dashboard.lob.com/#/settings/account" target="_blank"&gt;Merge Variable
     * strictness&lt;/a&gt; setting, if you define variables in your HTML but do not pass them here, you
     * will either receive an error or the variable will render as an empty string.
     * @param mergeVariables Value for Object
     */
    @JsonSetter("merge_variables")
    public void setMergeVariables(Object mergeVariables) {
        this.mergeVariables = OptionalNullable.of(mergeVariables);
    }

    /**
     * UnSetter for MergeVariables.
     * You can input a merge variable payload object to your template to render dynamic content. For
     * example, if you have a template like: `{{variable_name}}`, pass in `{"variable_name":
     * "Harry"}` to render `Harry`. `merge_variables` must be an object. Any type of value is
     * accepted as long as the object is valid JSON; you can use `strings`, `numbers`, `booleans`,
     * `arrays`, `objects`, or `null`. The max length of the object is 25,000 characters. If you
     * call `JSON.stringify` on your object, it can be no longer than 25,000 characters. Your
     * variable names cannot contain any whitespace or any of the following special characters: `!`,
     * `"`, `#`, `%`, `&amp;`, `'`, `(`, `)`, `*`, `+`, `,`, `/`, `;`, `&lt;`, `=`, `&gt;`, `{@literal @}`, `[`, `\`,
     * `]`, `^`, `` ` ``, `{`, `|`, `}`, `~`. More instructions can be found in &lt;a
     * href="https://help.lob.com/print-and-mail/designing-mail-creatives/dynamic-personalization#using-html-and-merge-variables-10"
     * target="_blank"&gt;our guide to using html and merge variables&lt;/a&gt;. Depending on your &lt;a
     * href="https://dashboard.lob.com/#/settings/account" target="_blank"&gt;Merge Variable
     * strictness&lt;/a&gt; setting, if you define variables in your HTML but do not pass them here, you
     * will either receive an error or the variable will render as an empty string.
     */
    public void unsetMergeVariables() {
        mergeVariables = null;
    }

    /**
     * Getter for SendDate.
     * A timestamp in ISO 8601 format which specifies a date after the current time and up to 180
     * days in the future to send the letter off for production. Setting a send date overrides the
     * default [cancellation window](#section/Cancellation-Windows) applied to the mailpiece. Until
     * the `send_date` has passed, the mailpiece can be canceled. If a date in the format
     * `2017-11-01` is passed, it will evaluate to midnight UTC of that date
     * (`2017-11-01T00:00:00.000Z`). If a datetime is passed, that exact time will be used. A
     * `send_date` passed with no time zone will default to UTC, while a `send_date` passed with a
     * time zone will be converted to UTC.
     * @return Returns the SendDate
     */
    @JsonGetter("send_date")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public SendDate getSendDate() {
        return sendDate;
    }

    /**
     * Setter for SendDate.
     * A timestamp in ISO 8601 format which specifies a date after the current time and up to 180
     * days in the future to send the letter off for production. Setting a send date overrides the
     * default [cancellation window](#section/Cancellation-Windows) applied to the mailpiece. Until
     * the `send_date` has passed, the mailpiece can be canceled. If a date in the format
     * `2017-11-01` is passed, it will evaluate to midnight UTC of that date
     * (`2017-11-01T00:00:00.000Z`). If a datetime is passed, that exact time will be used. A
     * `send_date` passed with no time zone will default to UTC, while a `send_date` passed with a
     * time zone will be converted to UTC.
     * @param sendDate Value for SendDate
     */
    @JsonSetter("send_date")
    public void setSendDate(SendDate sendDate) {
        this.sendDate = sendDate;
    }

    /**
     * Getter for MailType.
     * Checks must be sent `usps_first_class`
     * @return Returns the MailType2Enum
     */
    @JsonGetter("mail_type")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public MailType2Enum getMailType() {
        return mailType;
    }

    /**
     * Setter for MailType.
     * Checks must be sent `usps_first_class`
     * @param mailType Value for MailType2Enum
     */
    @JsonSetter("mail_type")
    public void setMailType(MailType2Enum mailType) {
        this.mailType = mailType;
    }

    /**
     * Internal Getter for Memo.
     * Text to include on the memo line of the check.
     * @return Returns the Internal String
     */
    @JsonGetter("memo")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetMemo() {
        return this.memo;
    }

    /**
     * Getter for Memo.
     * Text to include on the memo line of the check.
     * @return Returns the String
     */
    public String getMemo() {
        return OptionalNullable.getFrom(memo);
    }

    /**
     * Setter for Memo.
     * Text to include on the memo line of the check.
     * @param memo Value for String
     */
    @JsonSetter("memo")
    public void setMemo(String memo) {
        this.memo = OptionalNullable.of(memo);
    }

    /**
     * UnSetter for Memo.
     * Text to include on the memo line of the check.
     */
    public void unsetMemo() {
        memo = null;
    }

    /**
     * Getter for CheckNumber.
     * An integer that designates the check number. If `check_number` is not provided, checks
     * created from a new `bank_account` will start at `10000` and increment with each check created
     * with the `bank_account`. A provided `check_number` overrides the defaults. Subsequent checks
     * created with the same `bank_account` will increment from the provided check number.
     * @return Returns the Integer
     */
    @JsonGetter("check_number")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Integer getCheckNumber() {
        return checkNumber;
    }

    /**
     * Setter for CheckNumber.
     * An integer that designates the check number. If `check_number` is not provided, checks
     * created from a new `bank_account` will start at `10000` and increment with each check created
     * with the `bank_account`. A provided `check_number` overrides the defaults. Subsequent checks
     * created with the same `bank_account` will increment from the provided check number.
     * @param checkNumber Value for Integer
     */
    @JsonSetter("check_number")
    public void setCheckNumber(Integer checkNumber) {
        this.checkNumber = checkNumber;
    }

    /**
     * Getter for Message.
     * Max of 400 characters to be included at the bottom of the check page.
     * @return Returns the String
     */
    @JsonGetter("message")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getMessage() {
        return message;
    }

    /**
     * Setter for Message.
     * Max of 400 characters to be included at the bottom of the check page.
     * @param message Value for String
     */
    @JsonSetter("message")
    public void setMessage(String message) {
        this.message = message;
    }

    /**
     * Getter for UseType.
     * TThe use type for each mailpiece. Can be one of marketing, operational, or null. Null
     * use_type is only allowed if an account default use_type is selected in Account Settings. For
     * more information on use_type, see our [Help Center
     * article](https://help.lob.com/print-and-mail/building-a-mail-strategy/managing-mail-settings/declaring-mail-use-type).
     * @return Returns the ChkUseTypeEnum
     */
    @JsonGetter("use_type")
    public ChkUseTypeEnum getUseType() {
        return useType;
    }

    /**
     * Setter for UseType.
     * TThe use type for each mailpiece. Can be one of marketing, operational, or null. Null
     * use_type is only allowed if an account default use_type is selected in Account Settings. For
     * more information on use_type, see our [Help Center
     * article](https://help.lob.com/print-and-mail/building-a-mail-strategy/managing-mail-settings/declaring-mail-use-type).
     * @param useType Value for ChkUseTypeEnum
     */
    @JsonSetter("use_type")
    public void setUseType(ChkUseTypeEnum useType) {
        this.useType = useType;
    }

    /**
     * Getter for From.
     * @return Returns the AddressUs
     */
    @JsonGetter("from")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public AddressUs getFrom() {
        return from;
    }

    /**
     * Setter for From.
     * @param from Value for AddressUs
     */
    @JsonSetter("from")
    public void setFrom(AddressUs from) {
        this.from = from;
    }

    /**
     * Getter for Id.
     * Unique identifier prefixed with `chk_`.
     * @return Returns the String
     */
    @JsonGetter("id")
    public String getId() {
        return id;
    }

    /**
     * Setter for Id.
     * Unique identifier prefixed with `chk_`.
     * @param id Value for String
     */
    @JsonSetter("id")
    public void setId(String id) {
        this.id = id;
    }

    /**
     * Getter for Amount.
     * The payment amount to be sent in US dollars.
     * @return Returns the double
     */
    @JsonGetter("amount")
    public double getAmount() {
        return amount;
    }

    /**
     * Setter for Amount.
     * The payment amount to be sent in US dollars.
     * @param amount Value for double
     */
    @JsonSetter("amount")
    public void setAmount(double amount) {
        this.amount = amount;
    }

    /**
     * Getter for BankAccount.
     * @return Returns the BankAccount
     */
    @JsonGetter("bank_account")
    public BankAccount getBankAccount() {
        return bankAccount;
    }

    /**
     * Setter for BankAccount.
     * @param bankAccount Value for BankAccount
     */
    @JsonSetter("bank_account")
    public void setBankAccount(BankAccount bankAccount) {
        this.bankAccount = bankAccount;
    }

    /**
     * Getter for CheckBottomTemplateId.
     * @return Returns the String
     */
    @JsonGetter("check_bottom_template_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getCheckBottomTemplateId() {
        return checkBottomTemplateId;
    }

    /**
     * Setter for CheckBottomTemplateId.
     * @param checkBottomTemplateId Value for String
     */
    @JsonSetter("check_bottom_template_id")
    public void setCheckBottomTemplateId(String checkBottomTemplateId) {
        this.checkBottomTemplateId = checkBottomTemplateId;
    }

    /**
     * Getter for AttachmentTemplateId.
     * @return Returns the String
     */
    @JsonGetter("attachment_template_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getAttachmentTemplateId() {
        return attachmentTemplateId;
    }

    /**
     * Setter for AttachmentTemplateId.
     * @param attachmentTemplateId Value for String
     */
    @JsonSetter("attachment_template_id")
    public void setAttachmentTemplateId(String attachmentTemplateId) {
        this.attachmentTemplateId = attachmentTemplateId;
    }

    /**
     * Getter for CheckBottomTemplateVersionId.
     * @return Returns the String
     */
    @JsonGetter("check_bottom_template_version_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getCheckBottomTemplateVersionId() {
        return checkBottomTemplateVersionId;
    }

    /**
     * Setter for CheckBottomTemplateVersionId.
     * @param checkBottomTemplateVersionId Value for String
     */
    @JsonSetter("check_bottom_template_version_id")
    public void setCheckBottomTemplateVersionId(String checkBottomTemplateVersionId) {
        this.checkBottomTemplateVersionId = checkBottomTemplateVersionId;
    }

    /**
     * Getter for AttachmentTemplateVersionId.
     * @return Returns the String
     */
    @JsonGetter("attachment_template_version_id")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getAttachmentTemplateVersionId() {
        return attachmentTemplateVersionId;
    }

    /**
     * Setter for AttachmentTemplateVersionId.
     * @param attachmentTemplateVersionId Value for String
     */
    @JsonSetter("attachment_template_version_id")
    public void setAttachmentTemplateVersionId(String attachmentTemplateVersionId) {
        this.attachmentTemplateVersionId = attachmentTemplateVersionId;
    }

    /**
     * Getter for Url.
     * A [signed link](#section/Asset-URLs) served over HTTPS. The link returned will expire in 30
     * days to prevent mis-sharing. Each time a GET request is initiated, a new signed URL will be
     * generated.
     * @return Returns the String
     */
    @JsonGetter("url")
    public String getUrl() {
        return url;
    }

    /**
     * Setter for Url.
     * A [signed link](#section/Asset-URLs) served over HTTPS. The link returned will expire in 30
     * days to prevent mis-sharing. Each time a GET request is initiated, a new signed URL will be
     * generated.
     * @param url Value for String
     */
    @JsonSetter("url")
    public void setUrl(String url) {
        this.url = url;
    }

    /**
     * Getter for To.
     * @return Returns the ToAddressUsChk
     */
    @JsonGetter("to")
    public ToAddressUsChk getTo() {
        return to;
    }

    /**
     * Setter for To.
     * @param to Value for ToAddressUsChk
     */
    @JsonSetter("to")
    public void setTo(ToAddressUsChk to) {
        this.to = to;
    }

    /**
     * Getter for Carrier.
     * @return Returns the String
     */
    @JsonGetter("carrier")
    public String getCarrier() {
        return carrier;
    }

    /**
     * Setter for Carrier.
     * @param carrier Value for String
     */
    @JsonSetter("carrier")
    private void setCarrier(String carrier) {
        this.carrier = carrier;
    }

    /**
     * Getter for Thumbnails.
     * @return Returns the List of Thumbnail
     */
    @JsonGetter("thumbnails")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<Thumbnail> getThumbnails() {
        return thumbnails;
    }

    /**
     * Setter for Thumbnails.
     * @param thumbnails Value for List of Thumbnail
     */
    @JsonSetter("thumbnails")
    public void setThumbnails(List<Thumbnail> thumbnails) {
        this.thumbnails = thumbnails;
    }

    /**
     * Getter for ExpectedDeliveryDate.
     * A date in YYYY-MM-DD format of the mailpiece's expected delivery date based on its
     * `send_date`.
     * @return Returns the LocalDate
     */
    @JsonGetter("expected_delivery_date")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = DateTimeHelper.SimpleDateSerializer.class)
    public LocalDate getExpectedDeliveryDate() {
        return expectedDeliveryDate;
    }

    /**
     * Setter for ExpectedDeliveryDate.
     * A date in YYYY-MM-DD format of the mailpiece's expected delivery date based on its
     * `send_date`.
     * @param expectedDeliveryDate Value for LocalDate
     */
    @JsonSetter("expected_delivery_date")
    @JsonDeserialize(using = DateTimeHelper.SimpleDateDeserializer.class)
    public void setExpectedDeliveryDate(LocalDate expectedDeliveryDate) {
        this.expectedDeliveryDate = expectedDeliveryDate;
    }

    /**
     * Internal Getter for TrackingEvents.
     * An array of tracking_event objects ordered by ascending `time`. Will not be populated for
     * checks created in test mode.
     * @return Returns the Internal List of TrackingEventNormal
     */
    @JsonGetter("tracking_events")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<List<TrackingEventNormal>> internalGetTrackingEvents() {
        return this.trackingEvents;
    }

    /**
     * Getter for TrackingEvents.
     * An array of tracking_event objects ordered by ascending `time`. Will not be populated for
     * checks created in test mode.
     * @return Returns the List of TrackingEventNormal
     */
    public List<TrackingEventNormal> getTrackingEvents() {
        return OptionalNullable.getFrom(trackingEvents);
    }

    /**
     * Setter for TrackingEvents.
     * An array of tracking_event objects ordered by ascending `time`. Will not be populated for
     * checks created in test mode.
     * @param trackingEvents Value for List of TrackingEventNormal
     */
    @JsonSetter("tracking_events")
    public void setTrackingEvents(List<TrackingEventNormal> trackingEvents) {
        this.trackingEvents = OptionalNullable.of(trackingEvents);
    }

    /**
     * UnSetter for TrackingEvents.
     * An array of tracking_event objects ordered by ascending `time`. Will not be populated for
     * checks created in test mode.
     */
    public void unsetTrackingEvents() {
        trackingEvents = null;
    }

    /**
     * Getter for Status.
     * @return Returns the TheStatusOfTheCheckEnum
     */
    @JsonGetter("status")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public TheStatusOfTheCheckEnum getStatus() {
        return status;
    }

    /**
     * Setter for Status.
     * @param status Value for TheStatusOfTheCheckEnum
     */
    @JsonSetter("status")
    public void setStatus(TheStatusOfTheCheckEnum status) {
        this.status = status;
    }

    /**
     * Internal Getter for FailureReason.
     * A string describing the reason for failure if the check failed to render.
     * @return Returns the Internal String
     */
    @JsonGetter("failure_reason")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonSerialize(using = OptionalNullable.Serializer.class)
    protected OptionalNullable<String> internalGetFailureReason() {
        return this.failureReason;
    }

    /**
     * Getter for FailureReason.
     * A string describing the reason for failure if the check failed to render.
     * @return Returns the String
     */
    public String getFailureReason() {
        return OptionalNullable.getFrom(failureReason);
    }

    /**
     * Setter for FailureReason.
     * A string describing the reason for failure if the check failed to render.
     * @param failureReason Value for String
     */
    @JsonSetter("failure_reason")
    public void setFailureReason(String failureReason) {
        this.failureReason = OptionalNullable.of(failureReason);
    }

    /**
     * UnSetter for FailureReason.
     * A string describing the reason for failure if the check failed to render.
     */
    public void unsetFailureReason() {
        failureReason = null;
    }

    /**
     * Getter for Object.
     * Value is resource type.
     * @return Returns the Object5Enum
     */
    @JsonGetter("object")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Object5Enum getObject() {
        return object;
    }

    /**
     * Setter for Object.
     * Value is resource type.
     * @param object Value for Object5Enum
     */
    @JsonSetter("object")
    public void setObject(Object5Enum object) {
        this.object = object;
    }

    /**
     * Getter for DateCreated.
     * A timestamp in ISO 8601 format of the date the resource was created.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("date_created")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getDateCreated() {
        return dateCreated;
    }

    /**
     * Setter for DateCreated.
     * A timestamp in ISO 8601 format of the date the resource was created.
     * @param dateCreated Value for LocalDateTime
     */
    @JsonSetter("date_created")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setDateCreated(LocalDateTime dateCreated) {
        this.dateCreated = dateCreated;
    }

    /**
     * Getter for DateModified.
     * A timestamp in ISO 8601 format of the date the resource was last modified.
     * @return Returns the LocalDateTime
     */
    @JsonGetter("date_modified")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getDateModified() {
        return dateModified;
    }

    /**
     * Setter for DateModified.
     * A timestamp in ISO 8601 format of the date the resource was last modified.
     * @param dateModified Value for LocalDateTime
     */
    @JsonSetter("date_modified")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setDateModified(LocalDateTime dateModified) {
        this.dateModified = dateModified;
    }

    /**
     * Getter for Deleted.
     * Only returned if the resource has been successfully deleted.
     * @return Returns the Boolean
     */
    @JsonGetter("deleted")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public Boolean getDeleted() {
        return deleted;
    }

    /**
     * Setter for Deleted.
     * Only returned if the resource has been successfully deleted.
     * @param deleted Value for Boolean
     */
    @JsonSetter("deleted")
    public void setDeleted(Boolean deleted) {
        this.deleted = deleted;
    }

    /**
     * Converts this Check into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Check [" + "useType=" + useType + ", id=" + id + ", amount=" + amount
                + ", bankAccount=" + bankAccount + ", url=" + url + ", to=" + to + ", carrier="
                + carrier + ", dateCreated=" + dateCreated + ", dateModified=" + dateModified
                + ", description=" + description + ", metadata=" + metadata + ", mergeVariables="
                + mergeVariables + ", sendDate=" + sendDate + ", mailType=" + mailType + ", memo="
                + memo + ", checkNumber=" + checkNumber + ", message=" + message + ", from=" + from
                + ", checkBottomTemplateId=" + checkBottomTemplateId + ", attachmentTemplateId="
                + attachmentTemplateId + ", checkBottomTemplateVersionId="
                + checkBottomTemplateVersionId + ", attachmentTemplateVersionId="
                + attachmentTemplateVersionId + ", thumbnails=" + thumbnails
                + ", expectedDeliveryDate=" + expectedDeliveryDate + ", trackingEvents="
                + trackingEvents + ", status=" + status + ", failureReason=" + failureReason
                + ", object=" + object + ", deleted=" + deleted + "]";
    }

    /**
     * Builds a new {@link Check.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Check.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(useType, id, amount, bankAccount, url, to, carrier,
                dateCreated, dateModified)
                .metadata(getMetadata())
                .sendDate(getSendDate())
                .mailType(getMailType())
                .checkNumber(getCheckNumber())
                .message(getMessage())
                .from(getFrom())
                .checkBottomTemplateId(getCheckBottomTemplateId())
                .attachmentTemplateId(getAttachmentTemplateId())
                .checkBottomTemplateVersionId(getCheckBottomTemplateVersionId())
                .attachmentTemplateVersionId(getAttachmentTemplateVersionId())
                .thumbnails(getThumbnails())
                .expectedDeliveryDate(getExpectedDeliveryDate())
                .status(getStatus())
                .object(getObject())
                .deleted(getDeleted());
        builder.description = internalGetDescription();
        builder.mergeVariables = internalGetMergeVariables();
        builder.memo = internalGetMemo();
        builder.trackingEvents = internalGetTrackingEvents();
        builder.failureReason = internalGetFailureReason();
        return builder;
    }

    /**
     * Class to build instances of {@link Check}.
     */
    public static class Builder {
        private ChkUseTypeEnum useType;
        private String id;
        private double amount;
        private BankAccount bankAccount;
        private String url;
        private ToAddressUsChk to;
        private String carrier = "USPS";
        private LocalDateTime dateCreated;
        private LocalDateTime dateModified;
        private OptionalNullable<String> description;
        private Map<String, String> metadata;
        private OptionalNullable<Object> mergeVariables;
        private SendDate sendDate;
        private MailType2Enum mailType = MailType2Enum.USPS_FIRST_CLASS;
        private OptionalNullable<String> memo;
        private Integer checkNumber;
        private String message;
        private AddressUs from;
        private String checkBottomTemplateId;
        private String attachmentTemplateId;
        private String checkBottomTemplateVersionId;
        private String attachmentTemplateVersionId;
        private List<Thumbnail> thumbnails;
        private LocalDate expectedDeliveryDate;
        private OptionalNullable<List<TrackingEventNormal>> trackingEvents;
        private TheStatusOfTheCheckEnum status;
        private OptionalNullable<String> failureReason;
        private Object5Enum object = Object5Enum.CHECK;
        private Boolean deleted;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  useType  ChkUseTypeEnum value for useType.
         * @param  id  String value for id.
         * @param  amount  double value for amount.
         * @param  bankAccount  BankAccount value for bankAccount.
         * @param  url  String value for url.
         * @param  to  ToAddressUsChk value for to.
         * @param  carrier  String value for carrier.
         * @param  dateCreated  LocalDateTime value for dateCreated.
         * @param  dateModified  LocalDateTime value for dateModified.
         */
        public Builder(ChkUseTypeEnum useType, String id, double amount, BankAccount bankAccount,
                String url, ToAddressUsChk to, String carrier, LocalDateTime dateCreated,
                LocalDateTime dateModified) {
            this.useType = useType;
            this.id = id;
            this.amount = amount;
            this.bankAccount = bankAccount;
            this.url = url;
            this.to = to;
            this.carrier = carrier;
            this.dateCreated = dateCreated;
            this.dateModified = dateModified;
        }

        /**
         * Setter for useType.
         * @param  useType  ChkUseTypeEnum value for useType.
         * @return Builder
         */
        public Builder useType(ChkUseTypeEnum useType) {
            this.useType = useType;
            return this;
        }

        /**
         * Setter for id.
         * @param  id  String value for id.
         * @return Builder
         */
        public Builder id(String id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for amount.
         * @param  amount  double value for amount.
         * @return Builder
         */
        public Builder amount(double amount) {
            this.amount = amount;
            return this;
        }

        /**
         * Setter for bankAccount.
         * @param  bankAccount  BankAccount value for bankAccount.
         * @return Builder
         */
        public Builder bankAccount(BankAccount bankAccount) {
            this.bankAccount = bankAccount;
            return this;
        }

        /**
         * Setter for url.
         * @param  url  String value for url.
         * @return Builder
         */
        public Builder url(String url) {
            this.url = url;
            return this;
        }

        /**
         * Setter for to.
         * @param  to  ToAddressUsChk value for to.
         * @return Builder
         */
        public Builder to(ToAddressUsChk to) {
            this.to = to;
            return this;
        }

        /**
         * Setter for carrier.
         * @param  carrier  String value for carrier.
         * @return Builder
         */
        public Builder carrier(String carrier) {
            this.carrier = carrier;
            return this;
        }

        /**
         * Setter for dateCreated.
         * @param  dateCreated  LocalDateTime value for dateCreated.
         * @return Builder
         */
        public Builder dateCreated(LocalDateTime dateCreated) {
            this.dateCreated = dateCreated;
            return this;
        }

        /**
         * Setter for dateModified.
         * @param  dateModified  LocalDateTime value for dateModified.
         * @return Builder
         */
        public Builder dateModified(LocalDateTime dateModified) {
            this.dateModified = dateModified;
            return this;
        }

        /**
         * Setter for description.
         * @param  description  String value for description.
         * @return Builder
         */
        public Builder description(String description) {
            this.description = OptionalNullable.of(description);
            return this;
        }

        /**
         * UnSetter for description.
         * @return Builder
         */
        public Builder unsetDescription() {
            description = null;
            return this;
        }

        /**
         * Setter for metadata.
         * @param  metadata  Map of String, value for metadata.
         * @return Builder
         */
        public Builder metadata(Map<String, String> metadata) {
            this.metadata = metadata;
            return this;
        }

        /**
         * Setter for mergeVariables.
         * @param  mergeVariables  Object value for mergeVariables.
         * @return Builder
         */
        public Builder mergeVariables(Object mergeVariables) {
            this.mergeVariables = OptionalNullable.of(mergeVariables);
            return this;
        }

        /**
         * UnSetter for mergeVariables.
         * @return Builder
         */
        public Builder unsetMergeVariables() {
            mergeVariables = null;
            return this;
        }

        /**
         * Setter for sendDate.
         * @param  sendDate  SendDate value for sendDate.
         * @return Builder
         */
        public Builder sendDate(SendDate sendDate) {
            this.sendDate = sendDate;
            return this;
        }

        /**
         * Setter for mailType.
         * @param  mailType  MailType2Enum value for mailType.
         * @return Builder
         */
        public Builder mailType(MailType2Enum mailType) {
            this.mailType = mailType;
            return this;
        }

        /**
         * Setter for memo.
         * @param  memo  String value for memo.
         * @return Builder
         */
        public Builder memo(String memo) {
            this.memo = OptionalNullable.of(memo);
            return this;
        }

        /**
         * UnSetter for memo.
         * @return Builder
         */
        public Builder unsetMemo() {
            memo = null;
            return this;
        }

        /**
         * Setter for checkNumber.
         * @param  checkNumber  Integer value for checkNumber.
         * @return Builder
         */
        public Builder checkNumber(Integer checkNumber) {
            this.checkNumber = checkNumber;
            return this;
        }

        /**
         * Setter for message.
         * @param  message  String value for message.
         * @return Builder
         */
        public Builder message(String message) {
            this.message = message;
            return this;
        }

        /**
         * Setter for from.
         * @param  from  AddressUs value for from.
         * @return Builder
         */
        public Builder from(AddressUs from) {
            this.from = from;
            return this;
        }

        /**
         * Setter for checkBottomTemplateId.
         * @param  checkBottomTemplateId  String value for checkBottomTemplateId.
         * @return Builder
         */
        public Builder checkBottomTemplateId(String checkBottomTemplateId) {
            this.checkBottomTemplateId = checkBottomTemplateId;
            return this;
        }

        /**
         * Setter for attachmentTemplateId.
         * @param  attachmentTemplateId  String value for attachmentTemplateId.
         * @return Builder
         */
        public Builder attachmentTemplateId(String attachmentTemplateId) {
            this.attachmentTemplateId = attachmentTemplateId;
            return this;
        }

        /**
         * Setter for checkBottomTemplateVersionId.
         * @param  checkBottomTemplateVersionId  String value for checkBottomTemplateVersionId.
         * @return Builder
         */
        public Builder checkBottomTemplateVersionId(String checkBottomTemplateVersionId) {
            this.checkBottomTemplateVersionId = checkBottomTemplateVersionId;
            return this;
        }

        /**
         * Setter for attachmentTemplateVersionId.
         * @param  attachmentTemplateVersionId  String value for attachmentTemplateVersionId.
         * @return Builder
         */
        public Builder attachmentTemplateVersionId(String attachmentTemplateVersionId) {
            this.attachmentTemplateVersionId = attachmentTemplateVersionId;
            return this;
        }

        /**
         * Setter for thumbnails.
         * @param  thumbnails  List of Thumbnail value for thumbnails.
         * @return Builder
         */
        public Builder thumbnails(List<Thumbnail> thumbnails) {
            this.thumbnails = thumbnails;
            return this;
        }

        /**
         * Setter for expectedDeliveryDate.
         * @param  expectedDeliveryDate  LocalDate value for expectedDeliveryDate.
         * @return Builder
         */
        public Builder expectedDeliveryDate(LocalDate expectedDeliveryDate) {
            this.expectedDeliveryDate = expectedDeliveryDate;
            return this;
        }

        /**
         * Setter for trackingEvents.
         * @param  trackingEvents  List of TrackingEventNormal value for trackingEvents.
         * @return Builder
         */
        public Builder trackingEvents(List<TrackingEventNormal> trackingEvents) {
            this.trackingEvents = OptionalNullable.of(trackingEvents);
            return this;
        }

        /**
         * UnSetter for trackingEvents.
         * @return Builder
         */
        public Builder unsetTrackingEvents() {
            trackingEvents = null;
            return this;
        }

        /**
         * Setter for status.
         * @param  status  TheStatusOfTheCheckEnum value for status.
         * @return Builder
         */
        public Builder status(TheStatusOfTheCheckEnum status) {
            this.status = status;
            return this;
        }

        /**
         * Setter for failureReason.
         * @param  failureReason  String value for failureReason.
         * @return Builder
         */
        public Builder failureReason(String failureReason) {
            this.failureReason = OptionalNullable.of(failureReason);
            return this;
        }

        /**
         * UnSetter for failureReason.
         * @return Builder
         */
        public Builder unsetFailureReason() {
            failureReason = null;
            return this;
        }

        /**
         * Setter for object.
         * @param  object  Object5Enum value for object.
         * @return Builder
         */
        public Builder object(Object5Enum object) {
            this.object = object;
            return this;
        }

        /**
         * Setter for deleted.
         * @param  deleted  Boolean value for deleted.
         * @return Builder
         */
        public Builder deleted(Boolean deleted) {
            this.deleted = deleted;
            return this;
        }

        /**
         * Builds a new {@link Check} object using the set fields.
         * @return {@link Check}
         */
        public Check build() {
            return new Check(useType, id, amount, bankAccount, url, to, carrier, dateCreated,
                    dateModified, description, metadata, mergeVariables, sendDate, mailType, memo,
                    checkNumber, message, from, checkBottomTemplateId, attachmentTemplateId,
                    checkBottomTemplateVersionId, attachmentTemplateVersionId, thumbnails,
                    expectedDeliveryDate, trackingEvents, status, failureReason, object, deleted);
        }
    }
}
