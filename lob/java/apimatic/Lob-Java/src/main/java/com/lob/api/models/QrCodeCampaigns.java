/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.lob.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.lob.api.models.containers.QrCodeCampaignsRedirectUrl;

/**
 * This is a model class for QrCodeCampaigns type.
 */
public class QrCodeCampaigns {
    private String position;
    private String top;
    private String right;
    private String left;
    private String bottom;
    private QrCodeCampaignsRedirectUrl redirectUrl;
    private String width;
    private String pages;

    /**
     * Default constructor.
     */
    public QrCodeCampaigns() {
        position = "relative";
    }

    /**
     * Initialization constructor.
     * @param  position  String value for position.
     * @param  width  String value for width.
     * @param  top  String value for top.
     * @param  right  String value for right.
     * @param  left  String value for left.
     * @param  bottom  String value for bottom.
     * @param  redirectUrl  QrCodeCampaignsRedirectUrl value for redirectUrl.
     * @param  pages  String value for pages.
     */
    public QrCodeCampaigns(
            String position,
            String width,
            String top,
            String right,
            String left,
            String bottom,
            QrCodeCampaignsRedirectUrl redirectUrl,
            String pages) {
        this.position = position;
        this.top = top;
        this.right = right;
        this.left = left;
        this.bottom = bottom;
        this.redirectUrl = redirectUrl;
        this.width = width;
        this.pages = pages;
    }

    /**
     * Getter for Position.
     * Sets how a QR code is being positioned in the document. Together with this, you should
     * provide one of 'top' or 'bottom', and one of 'left' or 'right'.
     * @return Returns the String
     */
    @JsonGetter("position")
    public String getPosition() {
        return position;
    }

    /**
     * Setter for Position.
     * Sets how a QR code is being positioned in the document. Together with this, you should
     * provide one of 'top' or 'bottom', and one of 'left' or 'right'.
     * @param position Value for String
     */
    @JsonSetter("position")
    private void setPosition(String position) {
        this.position = position;
    }

    /**
     * Getter for Top.
     * Vertical distance (in inches) to place QR code from the top. Only allowed if "bottom" isn't
     * provided.
     * @return Returns the String
     */
    @JsonGetter("top")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getTop() {
        return top;
    }

    /**
     * Setter for Top.
     * Vertical distance (in inches) to place QR code from the top. Only allowed if "bottom" isn't
     * provided.
     * @param top Value for String
     */
    @JsonSetter("top")
    public void setTop(String top) {
        this.top = top;
    }

    /**
     * Getter for Right.
     * Horizonal distance (in inches) to place QR code from the right. Only allowed if "left" isn't
     * provided.
     * @return Returns the String
     */
    @JsonGetter("right")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getRight() {
        return right;
    }

    /**
     * Setter for Right.
     * Horizonal distance (in inches) to place QR code from the right. Only allowed if "left" isn't
     * provided.
     * @param right Value for String
     */
    @JsonSetter("right")
    public void setRight(String right) {
        this.right = right;
    }

    /**
     * Getter for Left.
     * Horizonal distance (in inches) to place QR code from the left. Only allowed if "right" isn't
     * provided.
     * @return Returns the String
     */
    @JsonGetter("left")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getLeft() {
        return left;
    }

    /**
     * Setter for Left.
     * Horizonal distance (in inches) to place QR code from the left. Only allowed if "right" isn't
     * provided.
     * @param left Value for String
     */
    @JsonSetter("left")
    public void setLeft(String left) {
        this.left = left;
    }

    /**
     * Getter for Bottom.
     * Vertical distance (in inches) to place QR code from the bottom. Only allowed if "top" isn't
     * provided.
     * @return Returns the String
     */
    @JsonGetter("bottom")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getBottom() {
        return bottom;
    }

    /**
     * Setter for Bottom.
     * Vertical distance (in inches) to place QR code from the bottom. Only allowed if "top" isn't
     * provided.
     * @param bottom Value for String
     */
    @JsonSetter("bottom")
    public void setBottom(String bottom) {
        this.bottom = bottom;
    }

    /**
     * Getter for RedirectUrl.
     * Redirect all mail recipients to either a single URL or a custom personalized URL for each
     * recipient. To redirect to a single URL for the whole campaign, add a `redirect_url` in the
     * request body along with the url as string. To redirect to a custom URL for each recipient, do
     * not provide any value for `redirect_url`. Instead, create an extra column in the [audience
     * file](https://help.lob.com/print-and-mail/building-a-mail-strategy/campaign-or-triggered-sends/campaign-audience-guide)
     * with a unique link against each address row and while creating an upload, map
     * `qr_code_redirect_url` to this column. If the QR code section is used but a redirection url
     * is not provided or mapped while creating an upload, then there might be failures in creating
     * individual mail pieces.
     * @return Returns the QrCodeCampaignsRedirectUrl
     */
    @JsonGetter("redirect_url")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public QrCodeCampaignsRedirectUrl getRedirectUrl() {
        return redirectUrl;
    }

    /**
     * Setter for RedirectUrl.
     * Redirect all mail recipients to either a single URL or a custom personalized URL for each
     * recipient. To redirect to a single URL for the whole campaign, add a `redirect_url` in the
     * request body along with the url as string. To redirect to a custom URL for each recipient, do
     * not provide any value for `redirect_url`. Instead, create an extra column in the [audience
     * file](https://help.lob.com/print-and-mail/building-a-mail-strategy/campaign-or-triggered-sends/campaign-audience-guide)
     * with a unique link against each address row and while creating an upload, map
     * `qr_code_redirect_url` to this column. If the QR code section is used but a redirection url
     * is not provided or mapped while creating an upload, then there might be failures in creating
     * individual mail pieces.
     * @param redirectUrl Value for QrCodeCampaignsRedirectUrl
     */
    @JsonSetter("redirect_url")
    public void setRedirectUrl(QrCodeCampaignsRedirectUrl redirectUrl) {
        this.redirectUrl = redirectUrl;
    }

    /**
     * Getter for Width.
     * The size (in inches) of the QR code with a minimum of 1 inch. All QR codes are generated as a
     * square.
     * @return Returns the String
     */
    @JsonGetter("width")
    public String getWidth() {
        return width;
    }

    /**
     * Setter for Width.
     * The size (in inches) of the QR code with a minimum of 1 inch. All QR codes are generated as a
     * square.
     * @param width Value for String
     */
    @JsonSetter("width")
    public void setWidth(String width) {
        this.width = width;
    }

    /**
     * Getter for Pages.
     * Specify the pages where the QR code should be stamped in a comma separated format. Your QR
     * code can be printed in the same position on multiple pages. For postcards, the values should
     * either be "front", "back" (for either front or back) or "front,back" (for the QR code to be
     * printed on both sides). For self-mailers, the values should either be "inside", "outside"
     * (for either inside or outside) or "inside,outside" (for the QR code to be printed on both
     * sides). For letters, the values can be specific page numbers ("1", "3"), page number ranges
     * such as "1-3", or a comma separated combination of both ("1,3,5-7").
     * @return Returns the String
     */
    @JsonGetter("pages")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getPages() {
        return pages;
    }

    /**
     * Setter for Pages.
     * Specify the pages where the QR code should be stamped in a comma separated format. Your QR
     * code can be printed in the same position on multiple pages. For postcards, the values should
     * either be "front", "back" (for either front or back) or "front,back" (for the QR code to be
     * printed on both sides). For self-mailers, the values should either be "inside", "outside"
     * (for either inside or outside) or "inside,outside" (for the QR code to be printed on both
     * sides). For letters, the values can be specific page numbers ("1", "3"), page number ranges
     * such as "1-3", or a comma separated combination of both ("1,3,5-7").
     * @param pages Value for String
     */
    @JsonSetter("pages")
    public void setPages(String pages) {
        this.pages = pages;
    }

    /**
     * Converts this QrCodeCampaigns into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "QrCodeCampaigns [" + "position=" + position + ", width=" + width + ", top=" + top
                + ", right=" + right + ", left=" + left + ", bottom=" + bottom + ", redirectUrl="
                + redirectUrl + ", pages=" + pages + "]";
    }

    /**
     * Builds a new {@link QrCodeCampaigns.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link QrCodeCampaigns.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(position, width)
                .top(getTop())
                .right(getRight())
                .left(getLeft())
                .bottom(getBottom())
                .redirectUrl(getRedirectUrl())
                .pages(getPages());
        return builder;
    }

    /**
     * Class to build instances of {@link QrCodeCampaigns}.
     */
    public static class Builder {
        private String position = "relative";
        private String width;
        private String top;
        private String right;
        private String left;
        private String bottom;
        private QrCodeCampaignsRedirectUrl redirectUrl;
        private String pages;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  position  String value for position.
         * @param  width  String value for width.
         */
        public Builder(String position, String width) {
            this.position = position;
            this.width = width;
        }

        /**
         * Setter for position.
         * @param  position  String value for position.
         * @return Builder
         */
        public Builder position(String position) {
            this.position = position;
            return this;
        }

        /**
         * Setter for width.
         * @param  width  String value for width.
         * @return Builder
         */
        public Builder width(String width) {
            this.width = width;
            return this;
        }

        /**
         * Setter for top.
         * @param  top  String value for top.
         * @return Builder
         */
        public Builder top(String top) {
            this.top = top;
            return this;
        }

        /**
         * Setter for right.
         * @param  right  String value for right.
         * @return Builder
         */
        public Builder right(String right) {
            this.right = right;
            return this;
        }

        /**
         * Setter for left.
         * @param  left  String value for left.
         * @return Builder
         */
        public Builder left(String left) {
            this.left = left;
            return this;
        }

        /**
         * Setter for bottom.
         * @param  bottom  String value for bottom.
         * @return Builder
         */
        public Builder bottom(String bottom) {
            this.bottom = bottom;
            return this;
        }

        /**
         * Setter for redirectUrl.
         * @param  redirectUrl  QrCodeCampaignsRedirectUrl value for redirectUrl.
         * @return Builder
         */
        public Builder redirectUrl(QrCodeCampaignsRedirectUrl redirectUrl) {
            this.redirectUrl = redirectUrl;
            return this;
        }

        /**
         * Setter for pages.
         * @param  pages  String value for pages.
         * @return Builder
         */
        public Builder pages(String pages) {
            this.pages = pages;
            return this;
        }

        /**
         * Builds a new {@link QrCodeCampaigns} object using the set fields.
         * @return {@link QrCodeCampaigns}
         */
        public QrCodeCampaigns build() {
            return new QrCodeCampaigns(position, width, top, right, left, bottom, redirectUrl,
                    pages);
        }
    }
}
