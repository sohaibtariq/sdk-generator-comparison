/*
 * LobLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.lob.api.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.lob.api.DateTimeHelper;
import java.time.LocalDateTime;

/**
 * This is a model class for Upload type.
 */
public class Upload {
    private String campaignId;
    private RequiredAddressColumns requiredAddressColumnMapping;
    private OptionalAddressColumns optionalAddressColumnMapping;
    private Metadata metadata;
    private Object mergeVariableColumnMapping;
    private String id;
    private String accountId;
    private ModeEnum mode;
    private String failuresUrl;
    private String originalFilename;
    private UploadStateEnum state;
    private int totalMailpieces;
    private int failedMailpieces;
    private int validatedMailpieces;
    private int bytesProcessed;
    private LocalDateTime dateCreated;
    private LocalDateTime dateModified;

    /**
     * Default constructor.
     */
    public Upload() {
        state = UploadStateEnum.DRAFT;
    }

    /**
     * Initialization constructor.
     * @param  campaignId  String value for campaignId.
     * @param  requiredAddressColumnMapping  RequiredAddressColumns value for
     *         requiredAddressColumnMapping.
     * @param  optionalAddressColumnMapping  OptionalAddressColumns value for
     *         optionalAddressColumnMapping.
     * @param  metadata  Metadata value for metadata.
     * @param  mergeVariableColumnMapping  Object value for mergeVariableColumnMapping.
     * @param  id  String value for id.
     * @param  accountId  String value for accountId.
     * @param  mode  ModeEnum value for mode.
     * @param  state  UploadStateEnum value for state.
     * @param  totalMailpieces  int value for totalMailpieces.
     * @param  failedMailpieces  int value for failedMailpieces.
     * @param  validatedMailpieces  int value for validatedMailpieces.
     * @param  bytesProcessed  int value for bytesProcessed.
     * @param  dateCreated  LocalDateTime value for dateCreated.
     * @param  dateModified  LocalDateTime value for dateModified.
     * @param  failuresUrl  String value for failuresUrl.
     * @param  originalFilename  String value for originalFilename.
     */
    public Upload(
            String campaignId,
            RequiredAddressColumns requiredAddressColumnMapping,
            OptionalAddressColumns optionalAddressColumnMapping,
            Metadata metadata,
            Object mergeVariableColumnMapping,
            String id,
            String accountId,
            ModeEnum mode,
            UploadStateEnum state,
            int totalMailpieces,
            int failedMailpieces,
            int validatedMailpieces,
            int bytesProcessed,
            LocalDateTime dateCreated,
            LocalDateTime dateModified,
            String failuresUrl,
            String originalFilename) {
        this.campaignId = campaignId;
        this.requiredAddressColumnMapping = requiredAddressColumnMapping;
        this.optionalAddressColumnMapping = optionalAddressColumnMapping;
        this.metadata = metadata;
        this.mergeVariableColumnMapping = mergeVariableColumnMapping;
        this.id = id;
        this.accountId = accountId;
        this.mode = mode;
        this.failuresUrl = failuresUrl;
        this.originalFilename = originalFilename;
        this.state = state;
        this.totalMailpieces = totalMailpieces;
        this.failedMailpieces = failedMailpieces;
        this.validatedMailpieces = validatedMailpieces;
        this.bytesProcessed = bytesProcessed;
        this.dateCreated = dateCreated;
        this.dateModified = dateModified;
    }

    /**
     * Getter for CampaignId.
     * @return Returns the String
     */
    @JsonGetter("campaignId")
    public String getCampaignId() {
        return campaignId;
    }

    /**
     * Setter for CampaignId.
     * @param campaignId Value for String
     */
    @JsonSetter("campaignId")
    public void setCampaignId(String campaignId) {
        this.campaignId = campaignId;
    }

    /**
     * Getter for RequiredAddressColumnMapping.
     * The mapping of column headers in your file to Lob-required fields for the resource created.
     * See our &lt;a
     * href="https://help.lob.com/print-and-mail/building-a-mail-strategy/campaign-or-triggered-sends/campaign-audience-guide#required-columns-2"
     * target="_blank"&gt;Campaign Audience Guide&lt;/a&gt; for additional details.
     * @return Returns the RequiredAddressColumns
     */
    @JsonGetter("requiredAddressColumnMapping")
    public RequiredAddressColumns getRequiredAddressColumnMapping() {
        return requiredAddressColumnMapping;
    }

    /**
     * Setter for RequiredAddressColumnMapping.
     * The mapping of column headers in your file to Lob-required fields for the resource created.
     * See our &lt;a
     * href="https://help.lob.com/print-and-mail/building-a-mail-strategy/campaign-or-triggered-sends/campaign-audience-guide#required-columns-2"
     * target="_blank"&gt;Campaign Audience Guide&lt;/a&gt; for additional details.
     * @param requiredAddressColumnMapping Value for RequiredAddressColumns
     */
    @JsonSetter("requiredAddressColumnMapping")
    public void setRequiredAddressColumnMapping(RequiredAddressColumns requiredAddressColumnMapping) {
        this.requiredAddressColumnMapping = requiredAddressColumnMapping;
    }

    /**
     * Getter for OptionalAddressColumnMapping.
     * The mapping of column headers in your file to Lob-optional fields for the resource created.
     * See our &lt;a
     * href="https://help.lob.com/print-and-mail/building-a-mail-strategy/campaign-or-triggered-sends/campaign-audience-guide#optional-columns-3"
     * target="_blank"&gt;Campaign Audience Guide&lt;/a&gt; for additional details.
     * @return Returns the OptionalAddressColumns
     */
    @JsonGetter("optionalAddressColumnMapping")
    public OptionalAddressColumns getOptionalAddressColumnMapping() {
        return optionalAddressColumnMapping;
    }

    /**
     * Setter for OptionalAddressColumnMapping.
     * The mapping of column headers in your file to Lob-optional fields for the resource created.
     * See our &lt;a
     * href="https://help.lob.com/print-and-mail/building-a-mail-strategy/campaign-or-triggered-sends/campaign-audience-guide#optional-columns-3"
     * target="_blank"&gt;Campaign Audience Guide&lt;/a&gt; for additional details.
     * @param optionalAddressColumnMapping Value for OptionalAddressColumns
     */
    @JsonSetter("optionalAddressColumnMapping")
    public void setOptionalAddressColumnMapping(OptionalAddressColumns optionalAddressColumnMapping) {
        this.optionalAddressColumnMapping = optionalAddressColumnMapping;
    }

    /**
     * Getter for Metadata.
     * The list of column headers in your file as an array that you want as metadata associated with
     * each mailpiece. See our &lt;a
     * href="https://help.lob.com/print-and-mail/building-a-mail-strategy/campaign-or-triggered-sends/campaign-audience-guide#required-columns-2"
     * target="_blank"&gt;Campaign Audience Guide&lt;/a&gt; for additional details.
     * @return Returns the Metadata
     */
    @JsonGetter("metadata")
    public Metadata getMetadata() {
        return metadata;
    }

    /**
     * Setter for Metadata.
     * The list of column headers in your file as an array that you want as metadata associated with
     * each mailpiece. See our &lt;a
     * href="https://help.lob.com/print-and-mail/building-a-mail-strategy/campaign-or-triggered-sends/campaign-audience-guide#required-columns-2"
     * target="_blank"&gt;Campaign Audience Guide&lt;/a&gt; for additional details.
     * @param metadata Value for Metadata
     */
    @JsonSetter("metadata")
    public void setMetadata(Metadata metadata) {
        this.metadata = metadata;
    }

    /**
     * Getter for MergeVariableColumnMapping.
     * The mapping of column headers in your file to the merge variables present in your creative.
     * See our &lt;a
     * href="https://help.lob.com/print-and-mail/building-a-mail-strategy/campaign-or-triggered-sends/campaign-audience-guide#step-3-map-merge-variable-data-if-applicable-7"
     * target="_blank"&gt;Campaign Audience Guide&lt;/a&gt; for additional details. &lt;br /&gt;If a merge variable
     * has the same "name" as a "key" in the `requiredAddressColumnMapping` or
     * `optionalAddressColumnMapping` objects, then they **CANNOT** have a different value in this
     * object. If a different value is provided, then when the campaign is processing it will get
     * overwritten with the mapped value present in the `requiredAddressColumnMapping` or
     * `optionalAddressColumnMapping` objects. If using customized QR code redirect from the
     * Audience file, then a `qr_code_redirect_url` must be mapped to the column header as used in
     * the CSV.
     * @return Returns the Object
     */
    @JsonGetter("mergeVariableColumnMapping")
    public Object getMergeVariableColumnMapping() {
        return mergeVariableColumnMapping;
    }

    /**
     * Setter for MergeVariableColumnMapping.
     * The mapping of column headers in your file to the merge variables present in your creative.
     * See our &lt;a
     * href="https://help.lob.com/print-and-mail/building-a-mail-strategy/campaign-or-triggered-sends/campaign-audience-guide#step-3-map-merge-variable-data-if-applicable-7"
     * target="_blank"&gt;Campaign Audience Guide&lt;/a&gt; for additional details. &lt;br /&gt;If a merge variable
     * has the same "name" as a "key" in the `requiredAddressColumnMapping` or
     * `optionalAddressColumnMapping` objects, then they **CANNOT** have a different value in this
     * object. If a different value is provided, then when the campaign is processing it will get
     * overwritten with the mapped value present in the `requiredAddressColumnMapping` or
     * `optionalAddressColumnMapping` objects. If using customized QR code redirect from the
     * Audience file, then a `qr_code_redirect_url` must be mapped to the column header as used in
     * the CSV.
     * @param mergeVariableColumnMapping Value for Object
     */
    @JsonSetter("mergeVariableColumnMapping")
    public void setMergeVariableColumnMapping(Object mergeVariableColumnMapping) {
        this.mergeVariableColumnMapping = mergeVariableColumnMapping;
    }

    /**
     * Getter for Id.
     * Unique identifier prefixed with `upl_`.
     * @return Returns the String
     */
    @JsonGetter("id")
    public String getId() {
        return id;
    }

    /**
     * Setter for Id.
     * Unique identifier prefixed with `upl_`.
     * @param id Value for String
     */
    @JsonSetter("id")
    public void setId(String id) {
        this.id = id;
    }

    /**
     * Getter for AccountId.
     * Account ID that made the request
     * @return Returns the String
     */
    @JsonGetter("accountId")
    public String getAccountId() {
        return accountId;
    }

    /**
     * Setter for AccountId.
     * Account ID that made the request
     * @param accountId Value for String
     */
    @JsonSetter("accountId")
    public void setAccountId(String accountId) {
        this.accountId = accountId;
    }

    /**
     * Getter for Mode.
     * The environment in which the mailpieces were created. Today, will only be `live`.
     * @return Returns the ModeEnum
     */
    @JsonGetter("mode")
    public ModeEnum getMode() {
        return mode;
    }

    /**
     * Setter for Mode.
     * The environment in which the mailpieces were created. Today, will only be `live`.
     * @param mode Value for ModeEnum
     */
    @JsonSetter("mode")
    public void setMode(ModeEnum mode) {
        this.mode = mode;
    }

    /**
     * Getter for FailuresUrl.
     * Url where your campaign mailpiece failures can be retrieved
     * @return Returns the String
     */
    @JsonGetter("failuresUrl")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getFailuresUrl() {
        return failuresUrl;
    }

    /**
     * Setter for FailuresUrl.
     * Url where your campaign mailpiece failures can be retrieved
     * @param failuresUrl Value for String
     */
    @JsonSetter("failuresUrl")
    public void setFailuresUrl(String failuresUrl) {
        this.failuresUrl = failuresUrl;
    }

    /**
     * Getter for OriginalFilename.
     * Filename of the upload
     * @return Returns the String
     */
    @JsonGetter("originalFilename")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getOriginalFilename() {
        return originalFilename;
    }

    /**
     * Setter for OriginalFilename.
     * Filename of the upload
     * @param originalFilename Value for String
     */
    @JsonSetter("originalFilename")
    public void setOriginalFilename(String originalFilename) {
        this.originalFilename = originalFilename;
    }

    /**
     * Getter for State.
     * The `state` property on the `upload` object. As the file is processed, the `state` will
     * change from `Ready for Validation` to `Validating` and then will be either `Scheduled`
     * (successfully processed) or `Errored` (Unsuccessfully processed).
     * @return Returns the UploadStateEnum
     */
    @JsonGetter("state")
    public UploadStateEnum getState() {
        return state;
    }

    /**
     * Setter for State.
     * The `state` property on the `upload` object. As the file is processed, the `state` will
     * change from `Ready for Validation` to `Validating` and then will be either `Scheduled`
     * (successfully processed) or `Errored` (Unsuccessfully processed).
     * @param state Value for UploadStateEnum
     */
    @JsonSetter("state")
    public void setState(UploadStateEnum state) {
        this.state = state;
    }

    /**
     * Getter for TotalMailpieces.
     * Total number of recipients for the campaign
     * @return Returns the int
     */
    @JsonGetter("totalMailpieces")
    public int getTotalMailpieces() {
        return totalMailpieces;
    }

    /**
     * Setter for TotalMailpieces.
     * Total number of recipients for the campaign
     * @param totalMailpieces Value for int
     */
    @JsonSetter("totalMailpieces")
    public void setTotalMailpieces(int totalMailpieces) {
        this.totalMailpieces = totalMailpieces;
    }

    /**
     * Getter for FailedMailpieces.
     * Number of mailpieces that failed to create
     * @return Returns the int
     */
    @JsonGetter("failedMailpieces")
    public int getFailedMailpieces() {
        return failedMailpieces;
    }

    /**
     * Setter for FailedMailpieces.
     * Number of mailpieces that failed to create
     * @param failedMailpieces Value for int
     */
    @JsonSetter("failedMailpieces")
    public void setFailedMailpieces(int failedMailpieces) {
        this.failedMailpieces = failedMailpieces;
    }

    /**
     * Getter for ValidatedMailpieces.
     * Number of mailpieces that were successfully created
     * @return Returns the int
     */
    @JsonGetter("validatedMailpieces")
    public int getValidatedMailpieces() {
        return validatedMailpieces;
    }

    /**
     * Setter for ValidatedMailpieces.
     * Number of mailpieces that were successfully created
     * @param validatedMailpieces Value for int
     */
    @JsonSetter("validatedMailpieces")
    public void setValidatedMailpieces(int validatedMailpieces) {
        this.validatedMailpieces = validatedMailpieces;
    }

    /**
     * Getter for BytesProcessed.
     * Number of bytes processed in your CSV
     * @return Returns the int
     */
    @JsonGetter("bytesProcessed")
    public int getBytesProcessed() {
        return bytesProcessed;
    }

    /**
     * Setter for BytesProcessed.
     * Number of bytes processed in your CSV
     * @param bytesProcessed Value for int
     */
    @JsonSetter("bytesProcessed")
    public void setBytesProcessed(int bytesProcessed) {
        this.bytesProcessed = bytesProcessed;
    }

    /**
     * Getter for DateCreated.
     * A timestamp in ISO 8601 format of the date the upload was created
     * @return Returns the LocalDateTime
     */
    @JsonGetter("dateCreated")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getDateCreated() {
        return dateCreated;
    }

    /**
     * Setter for DateCreated.
     * A timestamp in ISO 8601 format of the date the upload was created
     * @param dateCreated Value for LocalDateTime
     */
    @JsonSetter("dateCreated")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setDateCreated(LocalDateTime dateCreated) {
        this.dateCreated = dateCreated;
    }

    /**
     * Getter for DateModified.
     * A timestamp in ISO 8601 format of the date the upload was last modified
     * @return Returns the LocalDateTime
     */
    @JsonGetter("dateModified")
    @JsonSerialize(using = DateTimeHelper.Rfc8601DateTimeSerializer.class)
    public LocalDateTime getDateModified() {
        return dateModified;
    }

    /**
     * Setter for DateModified.
     * A timestamp in ISO 8601 format of the date the upload was last modified
     * @param dateModified Value for LocalDateTime
     */
    @JsonSetter("dateModified")
    @JsonDeserialize(using = DateTimeHelper.Rfc8601DateTimeDeserializer.class)
    public void setDateModified(LocalDateTime dateModified) {
        this.dateModified = dateModified;
    }

    /**
     * Converts this Upload into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "Upload [" + "campaignId=" + campaignId + ", requiredAddressColumnMapping="
                + requiredAddressColumnMapping + ", optionalAddressColumnMapping="
                + optionalAddressColumnMapping + ", metadata=" + metadata
                + ", mergeVariableColumnMapping=" + mergeVariableColumnMapping + ", id=" + id
                + ", accountId=" + accountId + ", mode=" + mode + ", state=" + state
                + ", totalMailpieces=" + totalMailpieces + ", failedMailpieces=" + failedMailpieces
                + ", validatedMailpieces=" + validatedMailpieces + ", bytesProcessed="
                + bytesProcessed + ", dateCreated=" + dateCreated + ", dateModified=" + dateModified
                + ", failuresUrl=" + failuresUrl + ", originalFilename=" + originalFilename + "]";
    }

    /**
     * Builds a new {@link Upload.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link Upload.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder(campaignId, requiredAddressColumnMapping,
                optionalAddressColumnMapping, metadata, mergeVariableColumnMapping, id, accountId,
                mode, state, totalMailpieces, failedMailpieces, validatedMailpieces, bytesProcessed,
                dateCreated, dateModified)
                .failuresUrl(getFailuresUrl())
                .originalFilename(getOriginalFilename());
        return builder;
    }

    /**
     * Class to build instances of {@link Upload}.
     */
    public static class Builder {
        private String campaignId;
        private RequiredAddressColumns requiredAddressColumnMapping;
        private OptionalAddressColumns optionalAddressColumnMapping;
        private Metadata metadata;
        private Object mergeVariableColumnMapping;
        private String id;
        private String accountId;
        private ModeEnum mode;
        private UploadStateEnum state = UploadStateEnum.DRAFT;
        private int totalMailpieces;
        private int failedMailpieces;
        private int validatedMailpieces;
        private int bytesProcessed;
        private LocalDateTime dateCreated;
        private LocalDateTime dateModified;
        private String failuresUrl;
        private String originalFilename;

        /**
         * Initialization constructor.
         */
        public Builder() {
        }

        /**
         * Initialization constructor.
         * @param  campaignId  String value for campaignId.
         * @param  requiredAddressColumnMapping  RequiredAddressColumns value for
         *         requiredAddressColumnMapping.
         * @param  optionalAddressColumnMapping  OptionalAddressColumns value for
         *         optionalAddressColumnMapping.
         * @param  metadata  Metadata value for metadata.
         * @param  mergeVariableColumnMapping  Object value for mergeVariableColumnMapping.
         * @param  id  String value for id.
         * @param  accountId  String value for accountId.
         * @param  mode  ModeEnum value for mode.
         * @param  state  UploadStateEnum value for state.
         * @param  totalMailpieces  int value for totalMailpieces.
         * @param  failedMailpieces  int value for failedMailpieces.
         * @param  validatedMailpieces  int value for validatedMailpieces.
         * @param  bytesProcessed  int value for bytesProcessed.
         * @param  dateCreated  LocalDateTime value for dateCreated.
         * @param  dateModified  LocalDateTime value for dateModified.
         */
        public Builder(String campaignId, RequiredAddressColumns requiredAddressColumnMapping,
                OptionalAddressColumns optionalAddressColumnMapping, Metadata metadata,
                Object mergeVariableColumnMapping, String id, String accountId, ModeEnum mode,
                UploadStateEnum state, int totalMailpieces, int failedMailpieces,
                int validatedMailpieces, int bytesProcessed, LocalDateTime dateCreated,
                LocalDateTime dateModified) {
            this.campaignId = campaignId;
            this.requiredAddressColumnMapping = requiredAddressColumnMapping;
            this.optionalAddressColumnMapping = optionalAddressColumnMapping;
            this.metadata = metadata;
            this.mergeVariableColumnMapping = mergeVariableColumnMapping;
            this.id = id;
            this.accountId = accountId;
            this.mode = mode;
            this.state = state;
            this.totalMailpieces = totalMailpieces;
            this.failedMailpieces = failedMailpieces;
            this.validatedMailpieces = validatedMailpieces;
            this.bytesProcessed = bytesProcessed;
            this.dateCreated = dateCreated;
            this.dateModified = dateModified;
        }

        /**
         * Setter for campaignId.
         * @param  campaignId  String value for campaignId.
         * @return Builder
         */
        public Builder campaignId(String campaignId) {
            this.campaignId = campaignId;
            return this;
        }

        /**
         * Setter for requiredAddressColumnMapping.
         * @param  requiredAddressColumnMapping  RequiredAddressColumns value for
         *         requiredAddressColumnMapping.
         * @return Builder
         */
        public Builder requiredAddressColumnMapping(
                RequiredAddressColumns requiredAddressColumnMapping) {
            this.requiredAddressColumnMapping = requiredAddressColumnMapping;
            return this;
        }

        /**
         * Setter for optionalAddressColumnMapping.
         * @param  optionalAddressColumnMapping  OptionalAddressColumns value for
         *         optionalAddressColumnMapping.
         * @return Builder
         */
        public Builder optionalAddressColumnMapping(
                OptionalAddressColumns optionalAddressColumnMapping) {
            this.optionalAddressColumnMapping = optionalAddressColumnMapping;
            return this;
        }

        /**
         * Setter for metadata.
         * @param  metadata  Metadata value for metadata.
         * @return Builder
         */
        public Builder metadata(Metadata metadata) {
            this.metadata = metadata;
            return this;
        }

        /**
         * Setter for mergeVariableColumnMapping.
         * @param  mergeVariableColumnMapping  Object value for mergeVariableColumnMapping.
         * @return Builder
         */
        public Builder mergeVariableColumnMapping(Object mergeVariableColumnMapping) {
            this.mergeVariableColumnMapping = mergeVariableColumnMapping;
            return this;
        }

        /**
         * Setter for id.
         * @param  id  String value for id.
         * @return Builder
         */
        public Builder id(String id) {
            this.id = id;
            return this;
        }

        /**
         * Setter for accountId.
         * @param  accountId  String value for accountId.
         * @return Builder
         */
        public Builder accountId(String accountId) {
            this.accountId = accountId;
            return this;
        }

        /**
         * Setter for mode.
         * @param  mode  ModeEnum value for mode.
         * @return Builder
         */
        public Builder mode(ModeEnum mode) {
            this.mode = mode;
            return this;
        }

        /**
         * Setter for state.
         * @param  state  UploadStateEnum value for state.
         * @return Builder
         */
        public Builder state(UploadStateEnum state) {
            this.state = state;
            return this;
        }

        /**
         * Setter for totalMailpieces.
         * @param  totalMailpieces  int value for totalMailpieces.
         * @return Builder
         */
        public Builder totalMailpieces(int totalMailpieces) {
            this.totalMailpieces = totalMailpieces;
            return this;
        }

        /**
         * Setter for failedMailpieces.
         * @param  failedMailpieces  int value for failedMailpieces.
         * @return Builder
         */
        public Builder failedMailpieces(int failedMailpieces) {
            this.failedMailpieces = failedMailpieces;
            return this;
        }

        /**
         * Setter for validatedMailpieces.
         * @param  validatedMailpieces  int value for validatedMailpieces.
         * @return Builder
         */
        public Builder validatedMailpieces(int validatedMailpieces) {
            this.validatedMailpieces = validatedMailpieces;
            return this;
        }

        /**
         * Setter for bytesProcessed.
         * @param  bytesProcessed  int value for bytesProcessed.
         * @return Builder
         */
        public Builder bytesProcessed(int bytesProcessed) {
            this.bytesProcessed = bytesProcessed;
            return this;
        }

        /**
         * Setter for dateCreated.
         * @param  dateCreated  LocalDateTime value for dateCreated.
         * @return Builder
         */
        public Builder dateCreated(LocalDateTime dateCreated) {
            this.dateCreated = dateCreated;
            return this;
        }

        /**
         * Setter for dateModified.
         * @param  dateModified  LocalDateTime value for dateModified.
         * @return Builder
         */
        public Builder dateModified(LocalDateTime dateModified) {
            this.dateModified = dateModified;
            return this;
        }

        /**
         * Setter for failuresUrl.
         * @param  failuresUrl  String value for failuresUrl.
         * @return Builder
         */
        public Builder failuresUrl(String failuresUrl) {
            this.failuresUrl = failuresUrl;
            return this;
        }

        /**
         * Setter for originalFilename.
         * @param  originalFilename  String value for originalFilename.
         * @return Builder
         */
        public Builder originalFilename(String originalFilename) {
            this.originalFilename = originalFilename;
            return this;
        }

        /**
         * Builds a new {@link Upload} object using the set fields.
         * @return {@link Upload}
         */
        public Upload build() {
            return new Upload(campaignId, requiredAddressColumnMapping,
                    optionalAddressColumnMapping, metadata, mergeVariableColumnMapping, id,
                    accountId, mode, state, totalMailpieces, failedMailpieces, validatedMailpieces,
                    bytesProcessed, dateCreated, dateModified, failuresUrl, originalFilename);
        }
    }
}
