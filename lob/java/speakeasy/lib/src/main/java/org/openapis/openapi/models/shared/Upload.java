/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;


public class Upload {
    @JsonProperty("campaignId")
    public String campaignId;

    public Upload withCampaignId(String campaignId) {
        this.campaignId = campaignId;
        return this;
    }
    
    /**
     * The mapping of column headers in your file to Lob-required fields for the resource created. See our &lt;a href="https://help.lob.com/print-and-mail/building-a-mail-strategy/campaign-or-triggered-sends/campaign-audience-guide#required-columns-2" target="_blank"&gt;Campaign Audience Guide&lt;/a&gt; for additional details.
     */
    @JsonProperty("requiredAddressColumnMapping")
    public RequiredAddressColumnMapping requiredAddressColumnMapping;

    public Upload withRequiredAddressColumnMapping(RequiredAddressColumnMapping requiredAddressColumnMapping) {
        this.requiredAddressColumnMapping = requiredAddressColumnMapping;
        return this;
    }
    
    /**
     * The mapping of column headers in your file to Lob-optional fields for the resource created. See our &lt;a href="https://help.lob.com/print-and-mail/building-a-mail-strategy/campaign-or-triggered-sends/campaign-audience-guide#optional-columns-3" target="_blank"&gt;Campaign Audience Guide&lt;/a&gt; for additional details.
     */
    @JsonProperty("optionalAddressColumnMapping")
    public OptionalAddressColumnMapping optionalAddressColumnMapping;

    public Upload withOptionalAddressColumnMapping(OptionalAddressColumnMapping optionalAddressColumnMapping) {
        this.optionalAddressColumnMapping = optionalAddressColumnMapping;
        return this;
    }
    
    /**
     * The list of column headers in your file as an array that you want as metadata associated with each mailpiece. See our &lt;a href="https://help.lob.com/print-and-mail/building-a-mail-strategy/campaign-or-triggered-sends/campaign-audience-guide#required-columns-2" target="_blank"&gt;Campaign Audience Guide&lt;/a&gt; for additional details.
     */
    @JsonProperty("metadata")
    public UploadsMetadata metadata;

    public Upload withMetadata(UploadsMetadata metadata) {
        this.metadata = metadata;
        return this;
    }
    
    /**
     * The mapping of column headers in your file to the merge variables present in your creative. See our &lt;a href="https://help.lob.com/print-and-mail/building-a-mail-strategy/campaign-or-triggered-sends/campaign-audience-guide#step-3-map-merge-variable-data-if-applicable-7" target="_blank"&gt;Campaign Audience Guide&lt;/a&gt; for additional details. &lt;br /&gt;If a merge variable has the same "name" as a "key" in the `requiredAddressColumnMapping` or `optionalAddressColumnMapping` objects, then they **CANNOT** have a different value in this object. If a different value is provided, then when the campaign is processing it will get overwritten with the mapped value present in the `requiredAddressColumnMapping` or `optionalAddressColumnMapping` objects. If using customized QR code redirect from the Audience file, then a `qr_code_redirect_url` must be mapped to the column header as used in the CSV.
     */
    @JsonProperty("mergeVariableColumnMapping")
    public MergeVariableColumnMapping mergeVariableColumnMapping;

    public Upload withMergeVariableColumnMapping(MergeVariableColumnMapping mergeVariableColumnMapping) {
        this.mergeVariableColumnMapping = mergeVariableColumnMapping;
        return this;
    }
    
    /**
     * Unique identifier prefixed with `upl_`.
     */
    @JsonProperty("id")
    public String id;

    public Upload withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Account ID that made the request
     */
    @JsonProperty("accountId")
    public String accountId;

    public Upload withAccountId(String accountId) {
        this.accountId = accountId;
        return this;
    }
    
    /**
     * The environment in which the mailpieces were created. Today, will only be `live`.
     */
    @JsonProperty("mode")
    public Mode mode;

    public Upload withMode(Mode mode) {
        this.mode = mode;
        return this;
    }
    
    /**
     * Url where your campaign mailpiece failures can be retrieved
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("failuresUrl")
    public String failuresUrl;

    public Upload withFailuresUrl(String failuresUrl) {
        this.failuresUrl = failuresUrl;
        return this;
    }
    
    /**
     * Filename of the upload
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("originalFilename")
    public String originalFilename;

    public Upload withOriginalFilename(String originalFilename) {
        this.originalFilename = originalFilename;
        return this;
    }
    
    /**
     * The `state` property on the `upload` object. As the file is processed, the `state` will change from `Ready for Validation` to `Validating` and then will be either `Scheduled` (successfully processed) or `Errored` (Unsuccessfully processed).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public UploadState state;

    public Upload withState(UploadState state) {
        this.state = state;
        return this;
    }
    
    /**
     * Total number of recipients for the campaign
     */
    @JsonProperty("totalMailpieces")
    public Long totalMailpieces;

    public Upload withTotalMailpieces(Long totalMailpieces) {
        this.totalMailpieces = totalMailpieces;
        return this;
    }
    
    /**
     * Number of mailpieces that failed to create
     */
    @JsonProperty("failedMailpieces")
    public Long failedMailpieces;

    public Upload withFailedMailpieces(Long failedMailpieces) {
        this.failedMailpieces = failedMailpieces;
        return this;
    }
    
    /**
     * Number of mailpieces that were successfully created
     */
    @JsonProperty("validatedMailpieces")
    public Long validatedMailpieces;

    public Upload withValidatedMailpieces(Long validatedMailpieces) {
        this.validatedMailpieces = validatedMailpieces;
        return this;
    }
    
    /**
     * Number of bytes processed in your CSV
     */
    @JsonProperty("bytesProcessed")
    public Long bytesProcessed;

    public Upload withBytesProcessed(Long bytesProcessed) {
        this.bytesProcessed = bytesProcessed;
        return this;
    }
    
    /**
     * A timestamp in ISO 8601 format of the date the upload was created
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("dateCreated")
    public OffsetDateTime dateCreated;

    public Upload withDateCreated(OffsetDateTime dateCreated) {
        this.dateCreated = dateCreated;
        return this;
    }
    
    /**
     * A timestamp in ISO 8601 format of the date the upload was last modified
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("dateModified")
    public OffsetDateTime dateModified;

    public Upload withDateModified(OffsetDateTime dateModified) {
        this.dateModified = dateModified;
        return this;
    }
    
    public Upload(@JsonProperty("campaignId") String campaignId, @JsonProperty("requiredAddressColumnMapping") RequiredAddressColumnMapping requiredAddressColumnMapping, @JsonProperty("optionalAddressColumnMapping") OptionalAddressColumnMapping optionalAddressColumnMapping, @JsonProperty("metadata") UploadsMetadata metadata, @JsonProperty("mergeVariableColumnMapping") MergeVariableColumnMapping mergeVariableColumnMapping, @JsonProperty("id") String id, @JsonProperty("accountId") String accountId, @JsonProperty("mode") Mode mode, @JsonProperty("totalMailpieces") Long totalMailpieces, @JsonProperty("failedMailpieces") Long failedMailpieces, @JsonProperty("validatedMailpieces") Long validatedMailpieces, @JsonProperty("bytesProcessed") Long bytesProcessed, @JsonProperty("dateCreated") OffsetDateTime dateCreated, @JsonProperty("dateModified") OffsetDateTime dateModified) {
        this.campaignId = campaignId;
        this.requiredAddressColumnMapping = requiredAddressColumnMapping;
        this.optionalAddressColumnMapping = optionalAddressColumnMapping;
        this.metadata = metadata;
        this.mergeVariableColumnMapping = mergeVariableColumnMapping;
        this.id = id;
        this.accountId = accountId;
        this.mode = mode;
        this.totalMailpieces = totalMailpieces;
        this.failedMailpieces = failedMailpieces;
        this.validatedMailpieces = validatedMailpieces;
        this.bytesProcessed = bytesProcessed;
        this.dateCreated = dateCreated;
        this.dateModified = dateModified;
  }
}
