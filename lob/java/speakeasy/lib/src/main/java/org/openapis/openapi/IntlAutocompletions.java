/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.util.function.Function;
import java.util.stream.Collectors;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

/**
 * Address autocompletion for non-US addresses. Given partial address information, this endpoint returns up to 10 address suggestions.
 * ## Autocompletion Test Env
 * Your test API key does not autocomplete international addresses and is used to simulate
 * behavior. With your test API key, requests with specific values for `address_prefix`
 * return predetermined values. When `address_prefix` is set to:
 * - `0 suggestions` - Returns no suggestions
 * - `[PRIMARY NUMBER] s[uggestion]` - Returns a maximum of ten predefined suggested addresses.
 *   `[PRIMARY NUMBER]` does not have to be a valid primary number when sending a test request.
 *   Each additional letter in `suggestion` reduces the number of suggestions by one (e.g.
 *   `1 su` returns 9 suggested addresses). `[PRIMARY NUMBER]` does not affect the number of
 *   suggestions returned.
 * Country is a required field.
 * City and state filters work as expected and filter the list of predetermined suggested addresses.
 * See the `test` request &amp; response examples under [Autocomplete Examples](#operation/intl_autocompletions) within the "Autocomplete
 * a partial address" section in Intl Autocompletions.
 * &lt;div class="back-to-top" &gt;&lt;a href="#" onclick="toTopLink()"&gt;back to top&lt;/a&gt;&lt;/div&gt;
 * 
 */
public class IntlAutocompletions {
	
	private SDKConfiguration sdkConfiguration;

	public IntlAutocompletions(SDKConfiguration sdkConfiguration) {
		this.sdkConfiguration = sdkConfiguration;
	}

    /**
     * Autocomplete
     * Given an address prefix consisting of a partial primary line and country, as well as optional input of city, state, and zip code, this functionality returns up to 10 full International address suggestions. Not all of them will turn out to be valid addresses; they'll need to be [verified](#operation/intl_verification).
     * @param intlAutocompletionsWritable
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.IntlAutocompletionsResponse intlAutocompletions(org.openapis.openapi.models.shared.IntlAutocompletionsWritable intlAutocompletionsWritable) throws Exception {
        return this.intlAutocompletions(intlAutocompletionsWritable, null);
    }

    /**
     * Autocomplete
     * Given an address prefix consisting of a partial primary line and country, as well as optional input of city, state, and zip code, this functionality returns up to 10 full International address suggestions. Not all of them will turn out to be valid addresses; they'll need to be [verified](#operation/intl_verification).
     * @param intlAutocompletionsWritable
     * @param xLangOutput
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.IntlAutocompletionsResponse intlAutocompletions(org.openapis.openapi.models.shared.IntlAutocompletionsWritable intlAutocompletionsWritable, org.openapis.openapi.models.shared.LangSpec xLangOutput) throws Exception {
        org.openapis.openapi.models.operations.IntlAutocompletionsRequest request = new org.openapis.openapi.models.operations.IntlAutocompletionsRequest(intlAutocompletionsWritable);
        request.xLangOutput=xLangOutput;
        
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/intl_autocompletions");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "intlAutocompletionsWritable", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this.sdkConfiguration.securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");
        
        org.openapis.openapi.models.operations.IntlAutocompletionsResponse res = new org.openapis.openapi.models.operations.IntlAutocompletionsResponse(contentType, null, httpRes.statusCode(), httpRes) {{
            intlAutocompletions = null;
        }};
        
        if (httpRes.statusCode() == 200) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.IntlAutocompletions out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.IntlAutocompletions.class);
                res.intlAutocompletions = out;
            }
        }

        return res;
    }
}