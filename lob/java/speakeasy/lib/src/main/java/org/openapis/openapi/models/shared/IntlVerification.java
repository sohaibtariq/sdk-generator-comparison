/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;


public class IntlVerification {
    /**
     * The intended recipient, typically a person's or firm's name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recipient")
    public String recipient;

    public IntlVerification withRecipient(String recipient) {
        this.recipient = recipient;
        return this;
    }
    
    /**
     * The primary delivery line (usually the street address) of the address.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("primary_line")
    public String primaryLine;

    public IntlVerification withPrimaryLine(String primaryLine) {
        this.primaryLine = primaryLine;
        return this;
    }
    
    /**
     * The secondary delivery line of the address. This field is typically empty but may contain information if `primary_line` is too long.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("secondary_line")
    public String secondaryLine;

    public IntlVerification withSecondaryLine(String secondaryLine) {
        this.secondaryLine = secondaryLine;
        return this;
    }
    
    /**
     * Unique identifier prefixed with `intl_ver_`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public IntlVerification withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * Combination of the following applicable `components`:
     * * `city`
     * * `state`
     * * `zip_code`
     * * `zip_code_plus_4`
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_line")
    public String lastLine;

    public IntlVerification withLastLine(String lastLine) {
        this.lastLine = lastLine;
        return this;
    }
    
    /**
     * The country of the address. Will be returned as a 2 letter country short-name code (ISO 3166).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country")
    public String country;

    public IntlVerification withCountry(String country) {
        this.country = country;
        return this;
    }
    
    /**
     * The coverage level for the country. This represents the maximum level of
     * accuracy an input address can be verified to.
     * 
     * * `SUBBUILDING` - Coverage down to unit numbers. For example, in an apartment or a large building
     * * `HOUSENUMBER/BUILDING` - Coverage down to house number. For example, the address where a house or building may be located
     * * `STREET` - Coverage down to street. This means that we can verify that an street exists in a city, state, country
     * * `LOCALITY` - Coverage down to city, state, or village or province. This means that we can verify that a city, village, province, or state exists in a country. Countries differ in how they define what is a province, state, city, village, etc. This attempts to group eveyrthing together.
     * * `SPARSE` - Some addresses for this country exist in our databases
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("coverage")
    public Coverage coverage;

    public IntlVerification withCoverage(Coverage coverage) {
        this.coverage = coverage;
        return this;
    }
    
    /**
     * Summarizes the deliverability of the `intl_verification` object. Possible values are:
     * * `deliverable` — The address is deliverable.
     * * `deliverable_missing_info` — The address is missing some information, but is most likely deliverable.
     * * `undeliverable` — The address is most likely not deliverable. Some components of the address (such as city or postal code) may have been found.
     * * `no_match` — This address is not deliverable. No matching street could be found within the city or postal code.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deliverability")
    public Deliverability deliverability;

    public IntlVerification withDeliverability(Deliverability deliverability) {
        this.deliverability = deliverability;
        return this;
    }
    
    /**
     * The status level for the country. This represents the maximum level of
     * accuracy an input address can be verified to.
     * 
     * * `LV4` - Verified. The input data is correct. All input data was able to match in databases.
     * * `LV3` - Verified. The input data is correct. All input data was able to match in databases &lt;em&gt;after&lt;/em&gt; some or all elements were standarized. The input data may also be using outdated city, state, or country names.
     * * `LV2` - Verified. The input data is correct although some input data is unverifiable due to incomplete data.
     * * `LV1` - Verified. The input data is acceptable but in an attempt to standarize user input, errors were introduced.
     * * `LF4` - Fixed. The input data is matched and fixed. (Example: Brighon, UK -&gt; Brighton, UK)
     * * `LF3` - Fixed. The input data is matched and fixed but some elements such as Subbuilding number and house number cannot be checked.
     * * `LF2` - Fixed. The input data is matched but some elements such as Street cannot be checked.
     * * `LF1` - Fixed. The input data is acceptable but in an attempt to standarize user input, errors were introduced.
     * * `LM4` - Missing Info. The input data cannot be corrected completely.
     * * `LM3` - Missing Info. The input data cannot be corrected completely and there were multiple matches found in databases.
     * * `LM2` - Missing Info. The input data cannot be corrected completely and only some elements were found.
     * * `LU1` - Unverified. The input data cannot be corrected or matched.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    public IntlVerificationStatus status;

    public IntlVerification withStatus(IntlVerificationStatus status) {
        this.status = status;
        return this;
    }
    
    /**
     * A nested object containing a breakdown of each component of an address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("components")
    public IntlComponents components;

    public IntlVerification withComponents(IntlComponents components) {
        this.components = components;
        return this;
    }
    
    /**
     * Value is resource type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("object")
    public IntlVerificationObject object;

    public IntlVerification withObject(IntlVerificationObject object) {
        this.object = object;
        return this;
    }
    
    public IntlVerification(){}
}
