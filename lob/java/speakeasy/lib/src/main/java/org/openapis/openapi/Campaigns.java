/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

/**
 * The campaigns endpoint allows you to create and view campaigns that can be used to send multiple letters or postcards.
 * The API provides endpoints for creating campaigns, updating campaigns, retrieving individual campaigns, listing campaigns, and deleting
 * campaigns.
 * 
 */
public class Campaigns {
	
	private SDKConfiguration sdkConfiguration;

	public Campaigns(SDKConfiguration sdkConfiguration) {
		this.sdkConfiguration = sdkConfiguration;
	}

    /**
     * List
     * Returns a list of your campaigns. The campaigns are returned sorted by creation date, with the most recently created campaigns appearing first.
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CampaignsListResponse campaignsList() throws Exception {
        return this.campaignsList(null, null, null);
    }

    /**
     * List
     * Returns a list of your campaigns. The campaigns are returned sorted by creation date, with the most recently created campaigns appearing first.
     * @param beforeAfter `before` and `after` are both optional but only one of them can be in the query at a time.

     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CampaignsListResponse campaignsList(Object beforeAfter) throws Exception {
        return this.campaignsList(null, null, beforeAfter);
    }

    /**
     * List
     * Returns a list of your campaigns. The campaigns are returned sorted by creation date, with the most recently created campaigns appearing first.
     * @param include Request that the response include the total count by specifying `include=["total_count"]`.

     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CampaignsListResponse campaignsList(String[] include) throws Exception {
        return this.campaignsList(null, include, null);
    }

    /**
     * List
     * Returns a list of your campaigns. The campaigns are returned sorted by creation date, with the most recently created campaigns appearing first.
     * @param include Request that the response include the total count by specifying `include=["total_count"]`.

     * @param beforeAfter `before` and `after` are both optional but only one of them can be in the query at a time.

     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CampaignsListResponse campaignsList(String[] include, Object beforeAfter) throws Exception {
        return this.campaignsList(null, include, beforeAfter);
    }

    /**
     * List
     * Returns a list of your campaigns. The campaigns are returned sorted by creation date, with the most recently created campaigns appearing first.
     * @param limit How many results to return.
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CampaignsListResponse campaignsList(Long limit) throws Exception {
        return this.campaignsList(limit, null, null);
    }

    /**
     * List
     * Returns a list of your campaigns. The campaigns are returned sorted by creation date, with the most recently created campaigns appearing first.
     * @param limit How many results to return.
     * @param beforeAfter `before` and `after` are both optional but only one of them can be in the query at a time.

     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CampaignsListResponse campaignsList(Long limit, Object beforeAfter) throws Exception {
        return this.campaignsList(limit, null, beforeAfter);
    }

    /**
     * List
     * Returns a list of your campaigns. The campaigns are returned sorted by creation date, with the most recently created campaigns appearing first.
     * @param limit How many results to return.
     * @param include Request that the response include the total count by specifying `include=["total_count"]`.

     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CampaignsListResponse campaignsList(Long limit, String[] include) throws Exception {
        return this.campaignsList(limit, include, null);
    }

    /**
     * List
     * Returns a list of your campaigns. The campaigns are returned sorted by creation date, with the most recently created campaigns appearing first.
     * @param limit How many results to return.
     * @param include Request that the response include the total count by specifying `include=["total_count"]`.

     * @param beforeAfter `before` and `after` are both optional but only one of them can be in the query at a time.

     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CampaignsListResponse campaignsList(Long limit, String[] include, Object beforeAfter) throws Exception {
        org.openapis.openapi.models.operations.CampaignsListRequest request = new org.openapis.openapi.models.operations.CampaignsListRequest();
        request.limit=limit;
        request.include=include;
        request.beforeAfter=beforeAfter;
        
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/campaigns");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.CampaignsListRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this.sdkConfiguration.securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");
        
        org.openapis.openapi.models.operations.CampaignsListResponse res = new org.openapis.openapi.models.operations.CampaignsListResponse(contentType, httpRes.statusCode(), httpRes) {{
            object = null;
        }};
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.CampaignsListResponseBody out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.CampaignsListResponseBody.class);
                res.object = out;
            }
        }

        return res;
    }

    /**
     * Create
     * Creates a new campaign with the provided properties. See how to launch your first campaign [here](https://help.lob.com/print-and-mail/building-a-mail-strategy/campaign-or-triggered-sends/launch-your-first-campaign).
     * @param campaignWritable
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CampaignCreateResponse campaignCreate(org.openapis.openapi.models.shared.CampaignWritable campaignWritable) throws Exception {
        return this.campaignCreate(campaignWritable, null);
    }

    /**
     * Create
     * Creates a new campaign with the provided properties. See how to launch your first campaign [here](https://help.lob.com/print-and-mail/building-a-mail-strategy/campaign-or-triggered-sends/launch-your-first-campaign).
     * @param campaignWritable
     * @param xLangOutput
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CampaignCreateResponse campaignCreate(org.openapis.openapi.models.shared.CampaignWritable campaignWritable, org.openapis.openapi.models.shared.LangSpec xLangOutput) throws Exception {
        org.openapis.openapi.models.operations.CampaignCreateRequest request = new org.openapis.openapi.models.operations.CampaignCreateRequest(campaignWritable);
        request.xLangOutput=xLangOutput;
        
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/campaigns");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "campaignWritable", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);
        java.util.Map<String, java.util.List<String>> headers = org.openapis.openapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = this.sdkConfiguration.securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");
        
        org.openapis.openapi.models.operations.CampaignCreateResponse res = new org.openapis.openapi.models.operations.CampaignCreateResponse(contentType, httpRes.statusCode(), httpRes) {{
            campaign = null;
        }};
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Campaign out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Campaign.class);
                res.campaign = out;
            }
        }

        return res;
    }

    /**
     * Delete
     * Delete an existing campaign. You need only supply the unique identifier that was returned upon campaign creation. Deleting a campaign also deletes any associated mail pieces that have been created but not sent. A campaign's `send_date` matches its associated mail pieces' `send_date`s.
     * @param cmpId id of the campaign
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CampaignDeleteResponse campaignDelete(String cmpId) throws Exception {
        org.openapis.openapi.models.operations.CampaignDeleteRequest request = new org.openapis.openapi.models.operations.CampaignDeleteRequest(cmpId);
        
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CampaignDeleteRequest.class, baseUrl, "/campaigns/{cmp_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);
        
        HTTPClient client = this.sdkConfiguration.securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");
        
        org.openapis.openapi.models.operations.CampaignDeleteResponse res = new org.openapis.openapi.models.operations.CampaignDeleteResponse(contentType, httpRes.statusCode(), httpRes) {{
            object = null;
        }};
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.CampaignDeleteResponseBody out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.CampaignDeleteResponseBody.class);
                res.object = out;
            }
        }

        return res;
    }

    /**
     * Retrieve
     * Retrieves the details of an existing campaign. You need only supply the unique campaign identifier that was returned upon campaign creation.
     * @param cmpId id of the campaign
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CampaignRetrieveResponse campaignRetrieve(String cmpId) throws Exception {
        org.openapis.openapi.models.operations.CampaignRetrieveRequest request = new org.openapis.openapi.models.operations.CampaignRetrieveRequest(cmpId);
        
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CampaignRetrieveRequest.class, baseUrl, "/campaigns/{cmp_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);
        
        HTTPClient client = this.sdkConfiguration.securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");
        
        org.openapis.openapi.models.operations.CampaignRetrieveResponse res = new org.openapis.openapi.models.operations.CampaignRetrieveResponse(contentType, httpRes.statusCode(), httpRes) {{
            campaign = null;
        }};
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Campaign out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Campaign.class);
                res.campaign = out;
            }
        }

        return res;
    }

    /**
     * Update
     * Update the details of an existing campaign. You need only supply the unique identifier that was returned upon campaign creation.
     * @param cmpId id of the campaign
     * @param campaignUpdatable
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CampaignUpdateResponse campaignUpdate(String cmpId, org.openapis.openapi.models.shared.CampaignUpdatable campaignUpdatable) throws Exception {
        org.openapis.openapi.models.operations.CampaignUpdateRequest request = new org.openapis.openapi.models.operations.CampaignUpdateRequest(cmpId, campaignUpdatable);
        
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CampaignUpdateRequest.class, baseUrl, "/campaigns/{cmp_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PATCH");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "campaignUpdatable", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);
        
        HTTPClient client = this.sdkConfiguration.securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");
        
        org.openapis.openapi.models.operations.CampaignUpdateResponse res = new org.openapis.openapi.models.operations.CampaignUpdateResponse(contentType, httpRes.statusCode(), httpRes) {{
            campaign = null;
        }};
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Campaign out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Campaign.class);
                res.campaign = out;
            }
        }

        return res;
    }

    /**
     * Send Campaign
     * Sends a campaign. You need only supply the unique campaign identifier that was returned upon campaign creation.
     * @param cmpId id of the campaign
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CampaignSendResponse campaignSend(String cmpId) throws Exception {
        org.openapis.openapi.models.operations.CampaignSendRequest request = new org.openapis.openapi.models.operations.CampaignSendRequest(cmpId);
        
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CampaignSendRequest.class, baseUrl, "/campaigns/{cmp_id}/send", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);
        
        HTTPClient client = this.sdkConfiguration.securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");
        
        org.openapis.openapi.models.operations.CampaignSendResponse res = new org.openapis.openapi.models.operations.CampaignSendResponse(contentType, httpRes.statusCode(), httpRes) {{
            campaign = null;
        }};
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.Campaign out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.Campaign.class);
                res.campaign = out;
            }
        }

        return res;
    }
}