/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.util.function.Function;
import java.util.stream.Collectors;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

/**
 * Given partial address information, this endpoint returns up to 10 address suggestions. &lt;br&gt; &lt;div class="back-to-top" &gt;&lt;a href="#" onclick="toTopLink()"&gt;back to top&lt;/a&gt;&lt;/div&gt;
 * ## Autocompletion Test Env
 * Your test API key does not autocomplete US addresses and is used to simulate behavior. With your test API key, requests with specific values for `address_prefix` return predetermined values. When `address_prefix` is set to:
 * - `0 suggestions` - Returns no suggestions - `[PRIMARY NUMBER] s[uggestion]` - Returns a maximum of ten predefined suggested addresses.
 *   `[PRIMARY NUMBER]` does not have to be a valid primary number when sending a test request.
 *   Each additional letter in `suggestion` reduces the number of suggestions by one (e.g.
 *   `1 su` returns 9 suggested addresses). `[PRIMARY NUMBER]` does not affect the number of
 *   suggestions returned.
 * 
 * City and state filters work as expected and filter the list of predetermined suggested addresses.
 * See the `test` request &amp; response examples under [Autocomplete Examples](#operation/autocompletion) within the "Autocomplete a partial address" section in US Autocompletions. &lt;div class="back-to-top" &gt;&lt;a href="#" onclick="toTopLink()"&gt;back to top&lt;/a&gt;&lt;/div&gt;
 * 
 */
public class USAutocompletions {
	
	private SDKConfiguration sdkConfiguration;

	public USAutocompletions(SDKConfiguration sdkConfiguration) {
		this.sdkConfiguration = sdkConfiguration;
	}

    /**
     * Autocomplete
     * Given an address prefix consisting of a partial primary line, as well as optional input of city, state, and zip code, this functionality returns up to 10 full US address suggestions. Not all of them will turn out to be valid addresses; they'll need to be [verified](#operation/verification_us).
     * @param usAutocompletionsWritable
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.AutocompletionResponse autocompletion(org.openapis.openapi.models.shared.UsAutocompletionsWritable usAutocompletionsWritable) throws Exception {
        return this.autocompletion(usAutocompletionsWritable, null, null);
    }

    /**
     * Autocomplete
     * Given an address prefix consisting of a partial primary line, as well as optional input of city, state, and zip code, this functionality returns up to 10 full US address suggestions. Not all of them will turn out to be valid addresses; they'll need to be [verified](#operation/verification_us).
     * @param usAutocompletionsWritable
     * @param validAddresses Possible values are `true` and `false`. If false, not all of the suggestions in the response will be valid addresses; they'll need to be verified in order to determine the deliverability. The valid_addresses flag will greatly reduce the number of keystrokes needed before reaching an intended address.
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.AutocompletionResponse autocompletion(org.openapis.openapi.models.shared.UsAutocompletionsWritable usAutocompletionsWritable, Boolean validAddresses) throws Exception {
        return this.autocompletion(usAutocompletionsWritable, null, validAddresses);
    }

    /**
     * Autocomplete
     * Given an address prefix consisting of a partial primary line, as well as optional input of city, state, and zip code, this functionality returns up to 10 full US address suggestions. Not all of them will turn out to be valid addresses; they'll need to be [verified](#operation/verification_us).
     * @param usAutocompletionsWritable
     * @param case_ Casing of the verified address. Possible values are `upper` and `proper` for uppercased (e.g. "PO BOX") and proper-cased (e.g. "PO Box"), respectively. Only affects `primary_line`, `city`, and `state`. Default casing is `upper`.
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.AutocompletionResponse autocompletion(org.openapis.openapi.models.shared.UsAutocompletionsWritable usAutocompletionsWritable, org.openapis.openapi.models.operations.QueryParamCase case_) throws Exception {
        return this.autocompletion(usAutocompletionsWritable, case_, null);
    }

    /**
     * Autocomplete
     * Given an address prefix consisting of a partial primary line, as well as optional input of city, state, and zip code, this functionality returns up to 10 full US address suggestions. Not all of them will turn out to be valid addresses; they'll need to be [verified](#operation/verification_us).
     * @param usAutocompletionsWritable
     * @param case_ Casing of the verified address. Possible values are `upper` and `proper` for uppercased (e.g. "PO BOX") and proper-cased (e.g. "PO Box"), respectively. Only affects `primary_line`, `city`, and `state`. Default casing is `upper`.
     * @param validAddresses Possible values are `true` and `false`. If false, not all of the suggestions in the response will be valid addresses; they'll need to be verified in order to determine the deliverability. The valid_addresses flag will greatly reduce the number of keystrokes needed before reaching an intended address.
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.AutocompletionResponse autocompletion(org.openapis.openapi.models.shared.UsAutocompletionsWritable usAutocompletionsWritable, org.openapis.openapi.models.operations.QueryParamCase case_, Boolean validAddresses) throws Exception {
        org.openapis.openapi.models.operations.AutocompletionRequest request = new org.openapis.openapi.models.operations.AutocompletionRequest(usAutocompletionsWritable);
        request.case_=case_;
        request.validAddresses=validAddresses;
        
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/us_autocompletions");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "usAutocompletionsWritable", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.AutocompletionRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this.sdkConfiguration.securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");
        
        org.openapis.openapi.models.operations.AutocompletionResponse res = new org.openapis.openapi.models.operations.AutocompletionResponse(contentType, null, httpRes.statusCode(), httpRes) {{
            usAutocompletions = null;
        }};
        
        if (httpRes.statusCode() == 200) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.UsAutocompletions out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.UsAutocompletions.class);
                res.usAutocompletions = out;
            }
        }

        return res;
    }
}