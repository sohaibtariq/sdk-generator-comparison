/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * UsComponents - A nested object containing a breakdown of each component of an address.
 */

public class UsComponents {
    /**
     * The numeric or alphanumeric part of an address preceding the street name. Often the house, building, or PO Box number.
     */
    @JsonProperty("primary_number")
    public String primaryNumber;

    public UsComponents withPrimaryNumber(String primaryNumber) {
        this.primaryNumber = primaryNumber;
        return this;
    }
    
    /**
     * Geographic direction preceding a street name (`N`, `S`, `E`, `W`, `NE`, `SW`, `SE`, `NW`).
     * 
     */
    @JsonProperty("street_predirection")
    public StreetPredirection streetPredirection;

    public UsComponents withStreetPredirection(StreetPredirection streetPredirection) {
        this.streetPredirection = streetPredirection;
        return this;
    }
    
    /**
     * The name of the street.
     */
    @JsonProperty("street_name")
    public String streetName;

    public UsComponents withStreetName(String streetName) {
        this.streetName = streetName;
        return this;
    }
    
    /**
     * The standard USPS abbreviation for the street suffix (`ST`, `AVE`, `BLVD`, etc).
     * 
     */
    @JsonProperty("street_suffix")
    public String streetSuffix;

    public UsComponents withStreetSuffix(String streetSuffix) {
        this.streetSuffix = streetSuffix;
        return this;
    }
    
    /**
     * Geographic direction following a street name (`N`, `S`, `E`, `W`, `NE`, `SW`, `SE`, `NW`).
     * 
     */
    @JsonProperty("street_postdirection")
    public StreetPostdirection streetPostdirection;

    public UsComponents withStreetPostdirection(StreetPostdirection streetPostdirection) {
        this.streetPostdirection = streetPostdirection;
        return this;
    }
    
    /**
     * The standard USPS abbreviation describing the `components[secondary_number]` (`STE`, `APT`, `BLDG`, etc).
     * 
     */
    @JsonProperty("secondary_designator")
    public String secondaryDesignator;

    public UsComponents withSecondaryDesignator(String secondaryDesignator) {
        this.secondaryDesignator = secondaryDesignator;
        return this;
    }
    
    /**
     * Number of the apartment/unit/etc.
     * 
     */
    @JsonProperty("secondary_number")
    public String secondaryNumber;

    public UsComponents withSecondaryNumber(String secondaryNumber) {
        this.secondaryNumber = secondaryNumber;
        return this;
    }
    
    /**
     * Designator of a &lt;a href="https://en.wikipedia.org/wiki/Commercial_mail_receiving_agency" target="_blank"&gt;CMRA-authorized&lt;/a&gt; private mailbox.
     * 
     */
    @JsonProperty("pmb_designator")
    public String pmbDesignator;

    public UsComponents withPmbDesignator(String pmbDesignator) {
        this.pmbDesignator = pmbDesignator;
        return this;
    }
    
    /**
     * Number of a &lt;a href="https://en.wikipedia.org/wiki/Commercial_mail_receiving_agency" target="_blank"&gt;CMRA-authorized&lt;/a&gt; private mailbox.
     * 
     */
    @JsonProperty("pmb_number")
    public String pmbNumber;

    public UsComponents withPmbNumber(String pmbNumber) {
        this.pmbNumber = pmbNumber;
        return this;
    }
    
    /**
     * An extra (often unnecessary) secondary designator provided with the input address.
     * 
     */
    @JsonProperty("extra_secondary_designator")
    public String extraSecondaryDesignator;

    public UsComponents withExtraSecondaryDesignator(String extraSecondaryDesignator) {
        this.extraSecondaryDesignator = extraSecondaryDesignator;
        return this;
    }
    
    /**
     * An extra (often unnecessary) secondary number provided with the input address.
     * 
     */
    @JsonProperty("extra_secondary_number")
    public String extraSecondaryNumber;

    public UsComponents withExtraSecondaryNumber(String extraSecondaryNumber) {
        this.extraSecondaryNumber = extraSecondaryNumber;
        return this;
    }
    
    @JsonProperty("city")
    public String city;

    public UsComponents withCity(String city) {
        this.city = city;
        return this;
    }
    
    /**
     * The &lt;a href="https://en.wikipedia.org/wiki/ISO_3166-2" target="_blank"&gt;ISO 3166-2&lt;/a&gt; two letter code for the state.
     * 
     */
    @JsonProperty("state")
    public String state;

    public UsComponents withState(String state) {
        this.state = state;
        return this;
    }
    
    /**
     * The 5-digit ZIP code
     */
    @JsonProperty("zip_code")
    public String zipCode;

    public UsComponents withZipCode(String zipCode) {
        this.zipCode = zipCode;
        return this;
    }
    
    @JsonProperty("zip_code_plus_4")
    public String zipCodePlus4;

    public UsComponents withZipCodePlus4(String zipCodePlus4) {
        this.zipCodePlus4 = zipCodePlus4;
        return this;
    }
    
    /**
     * A description of the ZIP code type. For more detailed information about
     * each ZIP code type, see [US Verification Details](#tag/US-Verification-Types).
     * 
     */
    @JsonProperty("zip_code_type")
    public ZipCodeType zipCodeType;

    public UsComponents withZipCodeType(ZipCodeType zipCodeType) {
        this.zipCodeType = zipCodeType;
        return this;
    }
    
    /**
     * A 12-digit identifier that uniquely identifies a delivery point (location where mail can be sent and received). It consists of the 5-digit ZIP code (`zip_code`), 4-digit ZIP+4 add-on (`zip_code_plus_4`), 2-digit delivery point, and 1-digit delivery point check digit.
     * 
     */
    @JsonProperty("delivery_point_barcode")
    public String deliveryPointBarcode;

    public UsComponents withDeliveryPointBarcode(String deliveryPointBarcode) {
        this.deliveryPointBarcode = deliveryPointBarcode;
        return this;
    }
    
    /**
     * Uses USPS's &lt;a href="https://www.usps.com/nationalpremieraccounts/rdi.htm" target="_blank"&gt;Residential Delivery Indicator (RDI)&lt;/a&gt; to identify
     * whether an address is classified as residential or
     * business. Possible values are:
     * * `residential` –– The address is residential or a PO Box.
     * * `commercial` –– The address is commercial.
     * * `''` –– Not enough information provided to be determined.
     * 
     */
    @JsonProperty("address_type")
    public AddressType addressType;

    public UsComponents withAddressType(AddressType addressType) {
        this.addressType = addressType;
        return this;
    }
    
    /**
     * A description of the type of address. Populated if a DPV match is made (`deliverability_analysis[dpv_confirmation]`
     * is `Y`, `S`, or `D`). For more detailed information about each record type, see
     * [US Verification Details](#tag/US-Verification-Types).
     * 
     */
    @JsonProperty("record_type")
    public RecordType recordType;

    public UsComponents withRecordType(RecordType recordType) {
        this.recordType = recordType;
        return this;
    }
    
    /**
     * Designates whether or not the address is the default address for a building containing multiple delivery points.
     * 
     */
    @JsonProperty("default_building_address")
    public Boolean defaultBuildingAddress;

    public UsComponents withDefaultBuildingAddress(Boolean defaultBuildingAddress) {
        this.defaultBuildingAddress = defaultBuildingAddress;
        return this;
    }
    
    /**
     * County name of the address city.
     */
    @JsonProperty("county")
    public String county;

    public UsComponents withCounty(String county) {
        this.county = county;
        return this;
    }
    
    /**
     * A 5-digit &lt;a href="https://en.wikipedia.org/wiki/FIPS_county_code" target="_blank"&gt;FIPS county code&lt;/a&gt; which uniquely identifies `components[county]`. It consists of a 2-digit state code and a 3-digit county code.
     * 
     */
    @JsonProperty("county_fips")
    public String countyFips;

    public UsComponents withCountyFips(String countyFips) {
        this.countyFips = countyFips;
        return this;
    }
    
    /**
     * A 4-character code assigned to a mail delivery route within a ZIP code.
     * 
     */
    @JsonProperty("carrier_route")
    public String carrierRoute;

    public UsComponents withCarrierRoute(String carrierRoute) {
        this.carrierRoute = carrierRoute;
        return this;
    }
    
    /**
     * The type of `components[carrier_route]`. For more detailed information about
     * each carrier route type, see [US Verification Details](#tag/US-Verification-Types).
     * 
     */
    @JsonProperty("carrier_route_type")
    public CarrierRouteType carrierRouteType;

    public UsComponents withCarrierRouteType(CarrierRouteType carrierRouteType) {
        this.carrierRouteType = carrierRouteType;
        return this;
    }
    
    /**
     * A positive or negative decimal indicating the geographic latitude of the address, specifying the north-to-south position of a location. This should be used with `longitude` to pinpoint locations on a map. Will not be returned for undeliverable addresses or military addresses (state is `AA`, `AE`, or `AP`).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("latitude")
    public Float latitude;

    public UsComponents withLatitude(Float latitude) {
        this.latitude = latitude;
        return this;
    }
    
    /**
     * A positive or negative decimal indicating the geographic longitude of the address, specifying the north-to-south position of a location. This should be used with `latitude` to pinpoint locations on a map. Will not be returned for undeliverable addresses or military addresses (state is `AA`, `AE`, or `AP`).
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("longitude")
    public Float longitude;

    public UsComponents withLongitude(Float longitude) {
        this.longitude = longitude;
        return this;
    }
    
    public UsComponents(@JsonProperty("primary_number") String primaryNumber, @JsonProperty("street_predirection") StreetPredirection streetPredirection, @JsonProperty("street_name") String streetName, @JsonProperty("street_suffix") String streetSuffix, @JsonProperty("street_postdirection") StreetPostdirection streetPostdirection, @JsonProperty("secondary_designator") String secondaryDesignator, @JsonProperty("secondary_number") String secondaryNumber, @JsonProperty("pmb_designator") String pmbDesignator, @JsonProperty("pmb_number") String pmbNumber, @JsonProperty("extra_secondary_designator") String extraSecondaryDesignator, @JsonProperty("extra_secondary_number") String extraSecondaryNumber, @JsonProperty("city") String city, @JsonProperty("state") String state, @JsonProperty("zip_code") String zipCode, @JsonProperty("zip_code_plus_4") String zipCodePlus4, @JsonProperty("zip_code_type") ZipCodeType zipCodeType, @JsonProperty("delivery_point_barcode") String deliveryPointBarcode, @JsonProperty("address_type") AddressType addressType, @JsonProperty("record_type") RecordType recordType, @JsonProperty("default_building_address") Boolean defaultBuildingAddress, @JsonProperty("county") String county, @JsonProperty("county_fips") String countyFips, @JsonProperty("carrier_route") String carrierRoute, @JsonProperty("carrier_route_type") CarrierRouteType carrierRouteType) {
        this.primaryNumber = primaryNumber;
        this.streetPredirection = streetPredirection;
        this.streetName = streetName;
        this.streetSuffix = streetSuffix;
        this.streetPostdirection = streetPostdirection;
        this.secondaryDesignator = secondaryDesignator;
        this.secondaryNumber = secondaryNumber;
        this.pmbDesignator = pmbDesignator;
        this.pmbNumber = pmbNumber;
        this.extraSecondaryDesignator = extraSecondaryDesignator;
        this.extraSecondaryNumber = extraSecondaryNumber;
        this.city = city;
        this.state = state;
        this.zipCode = zipCode;
        this.zipCodePlus4 = zipCodePlus4;
        this.zipCodeType = zipCodeType;
        this.deliveryPointBarcode = deliveryPointBarcode;
        this.addressType = addressType;
        this.recordType = recordType;
        this.defaultBuildingAddress = defaultBuildingAddress;
        this.county = county;
        this.countyFips = countyFips;
        this.carrierRoute = carrierRoute;
        this.carrierRouteType = carrierRouteType;
  }
}
