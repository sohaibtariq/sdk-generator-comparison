/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.util.function.Function;
import java.util.stream.Collectors;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

/**
 * Validate, automatically correct, and standardize the addresses in your
 * address book based on USPS's &lt;a href="https://postalpro.usps.com/certifications/cass" target="_blank"&gt;Coding Accuracy Support System (CASS)&lt;/a&gt;.
 * &lt;br&gt;
 * &lt;div class="back-to-top" &gt;&lt;a href="#" onclick="toTopLink()"&gt;back to top&lt;/a&gt;&lt;/div&gt;
 * 
 * ## US Verifications Test Env
 * 
 * When verifying US addresses, you'll likely want to test against a wide array of addresses to
 * ensure you're handling responses correctly. With your test API key, requests that use specific
 * values for `address` or `primary_line` and (if using `primary_line`) an arbitrary five digit
 * number for `zip_code` (e.g. "11111") let you explore the responses to many types of addresses:
 * 
 * &lt;table&gt;
 *   &lt;tr&gt;
 *     &lt;th style="white-space: nowrap"&gt;ADDRESS TYPE FOR SAMPLE RESPONSE&lt;/th&gt;
 *     &lt;th style="white-space: nowrap"&gt;DELIVERABILITY&lt;/th&gt;
 *     &lt;th style="white-space: nowrap"&gt;SET &lt;code&gt;primary_line&lt;/code&gt; OR &lt;code&gt;address&lt;/code&gt; TO&lt;/th&gt;
 *   &lt;/tr&gt;
 *   &lt;tr&gt;
 *     &lt;td style="white-space: nowrap"&gt;Commercial highrise&lt;/td&gt;
 *     &lt;td style="white-space: nowrap"&gt;&lt;code&gt;deliverable&lt;/code&gt;&lt;/td&gt;
 *     &lt;td style="white-space: nowrap"&gt;&lt;code&gt;commercial highrise&lt;/code&gt;&lt;/td&gt;
 *   &lt;/tr&gt;
 *   &lt;tr&gt;
 *     &lt;td style="white-space: nowrap"&gt;Residential highrise&lt;/td&gt;
 *     &lt;td style="white-space: nowrap"&gt;&lt;code&gt;deliverable&lt;/code&gt;&lt;/td&gt;
 *     &lt;td style="white-space: nowrap"&gt;&lt;code&gt;residential highrise&lt;/code&gt;&lt;/td&gt;
 *   &lt;/tr&gt;
 *   &lt;tr&gt;
 *     &lt;td style="white-space: nowrap"&gt;Residential house&lt;/td&gt;
 *     &lt;td style="white-space: nowrap"&gt;&lt;code&gt;deliverable&lt;/code&gt;&lt;/td&gt;
 *     &lt;td style="white-space: nowrap"&gt;&lt;code&gt;residential house&lt;/code&gt;&lt;/td&gt;
 *   &lt;/tr&gt;
 *   &lt;tr&gt;
 *     &lt;td style="white-space: nowrap"&gt;PO Box&lt;/td&gt;
 *     &lt;td style="white-space: nowrap"&gt;&lt;code&gt;deliverable&lt;/code&gt;&lt;/td&gt;
 *     &lt;td style="white-space: nowrap"&gt;&lt;code&gt;po box&lt;/code&gt;&lt;/td&gt;
 *   &lt;/tr&gt;
 *   &lt;tr&gt;
 *     &lt;td style="white-space: nowrap"&gt;Rural route&lt;/td&gt;
 *     &lt;td style="white-space: nowrap"&gt;&lt;code&gt;deliverable&lt;/code&gt;&lt;/td&gt;
 *     &lt;td style="white-space: nowrap"&gt;&lt;code&gt;rural route&lt;/code&gt;&lt;/td&gt;
 *   &lt;/tr&gt;
 *   &lt;tr&gt;
 *     &lt;td style="white-space: nowrap"&gt;Puerty Rico address w/ urbanization&lt;/td&gt;
 *     &lt;td style="white-space: nowrap"&gt;&lt;code&gt;deliverable&lt;/code&gt;&lt;/td&gt;
 *     &lt;td style="white-space: nowrap"&gt;&lt;code&gt;puerto rico&lt;/code&gt;&lt;/td&gt;
 *   &lt;/tr&gt;
 *   &lt;tr&gt;
 *     &lt;td style="white-space: nowrap"&gt;Military address&lt;/td&gt;
 *     &lt;td style="white-space: nowrap"&gt;&lt;code&gt;deliverable&lt;/code&gt;&lt;/td&gt;
 *     &lt;td style="white-space: nowrap"&gt;&lt;code&gt;military&lt;/code&gt;&lt;/td&gt;
 *   &lt;/tr&gt;
 *   &lt;tr&gt;
 *     &lt;td style="white-space: nowrap"&gt;Department of state&lt;/td&gt;
 *     &lt;td style="white-space: nowrap"&gt;&lt;code&gt;deliverable&lt;/code&gt;&lt;/td&gt;
 *     &lt;td style="white-space: nowrap"&gt;&lt;code&gt;department of state&lt;/code&gt;&lt;/td&gt;
 *   &lt;/tr&gt;
 *   &lt;tr&gt;
 *     &lt;td style="white-space: nowrap"&gt;Generic deliverable&lt;/td&gt;
 *     &lt;td style="white-space: nowrap"&gt;&lt;code&gt;deliverable&lt;/code&gt;&lt;/td&gt;
 *     &lt;td style="white-space: nowrap"&gt;&lt;code&gt;deliverable&lt;/code&gt;&lt;/td&gt;
 *   &lt;/tr&gt;
 *   &lt;tr&gt;
 *     &lt;td style="white-space: nowrap"&gt;Missing a suite number&lt;/td&gt;
 *     &lt;td style="white-space: nowrap"&gt;&lt;code&gt;deliverable_missing_unit&lt;/code&gt;&lt;/td&gt;
 *     &lt;td style="white-space: nowrap"&gt;&lt;code&gt;missing unit&lt;/code&gt;&lt;/td&gt;
 *   &lt;/tr&gt;
 *   &lt;tr&gt;
 *     &lt;td style="white-space: nowrap"&gt;Suite number doesn't exist&lt;/td&gt;
 *     &lt;td style="white-space: nowrap"&gt;&lt;code&gt;deliverable_incorrect_unit&lt;/code&gt;&lt;/td&gt;
 *     &lt;td style="white-space: nowrap"&gt;&lt;code&gt;incorrect unit&lt;/code&gt;&lt;/td&gt;
 *   &lt;/tr&gt;
 *   &lt;tr&gt;
 *     &lt;td style="white-space: nowrap"&gt;Residential house with unnecessary suite number&lt;/td&gt;
 *     &lt;td style="white-space: nowrap"&gt;&lt;code&gt;deliverable_unnecessary_unit&lt;/code&gt;&lt;/td&gt;
 *     &lt;td style="white-space: nowrap"&gt;&lt;code&gt;unnecessary unit&lt;/code&gt;&lt;/td&gt;
 *   &lt;/tr&gt;
 *   &lt;tr&gt;
 *     &lt;td style="white-space: nowrap"&gt;Undeliverable and block matched&lt;/td&gt;
 *     &lt;td style="white-space: nowrap"&gt;&lt;code&gt;undeliverable&lt;/code&gt;&lt;/td&gt;
 *     &lt;td style="white-space: nowrap"&gt;&lt;code&gt;undeliverable block match&lt;/code&gt;&lt;/td&gt;
 *   &lt;/tr&gt;
 *   &lt;tr&gt;
 *     &lt;td style="white-space: nowrap"&gt;Undeliverable and no block matched&lt;/td&gt;
 *     &lt;td style="white-space: nowrap"&gt;&lt;code&gt;undeliverable&lt;/code&gt;&lt;/td&gt;
 *     &lt;td style="white-space: nowrap"&gt;&lt;code&gt;undeliverable no match&lt;/code&gt;&lt;/td&gt;
 *   &lt;/tr&gt;
 * &lt;/table&gt;
 * 
 * See the `test` request &amp; response examples under [US Verification Examples](#operation/us_verification) within the
 * "Verify a US or US territory address" section in US Verifications.
 * 
 * You can rely on the response from these examples generally matching the response you'd see in the live environment with an
 * address of that type (excluding the `recipient` field).
 * 
 * The test API key does not perform any verification, automatic correction, or standardization for addresses. If you wish to
 * try these features out, use our &lt;a href="https://lob.com/address-verification" target="_blank"&gt;live demo&lt;/a&gt; or the free plan (see &lt;a href="https://lob.com/pricing/address-verification" target="_blank"&gt;our pricing&lt;/a&gt; for details).
 * &lt;div class="back-to-top" &gt;&lt;a href="#" onclick="toTopLink()"&gt;back to top&lt;/a&gt;&lt;/div&gt;
 * 
 */
public class USVerifications {
	
	private SDKConfiguration sdkConfiguration;

	public USVerifications(SDKConfiguration sdkConfiguration) {
		this.sdkConfiguration = sdkConfiguration;
	}

    /**
     * Bulk Verify
     * Verify a list of US or US territory addresses _with a live API key_. Requests to this endpoint with a test API key will return a dummy response based on the primary line you input.
     * @param multipleComponentsList
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.BulkUsVerificationsResponse bulkUsVerifications(org.openapis.openapi.models.shared.MultipleComponentsList multipleComponentsList) throws Exception {
        return this.bulkUsVerifications(multipleComponentsList, null);
    }

    /**
     * Bulk Verify
     * Verify a list of US or US territory addresses _with a live API key_. Requests to this endpoint with a test API key will return a dummy response based on the primary line you input.
     * @param multipleComponentsList
     * @param case_ Casing of the verified address. Possible values are `upper` and `proper` for uppercased (e.g. "PO BOX") and proper-cased (e.g. "PO Box"), respectively. Only affects `recipient`, `primary_line`, `secondary_line`, `urbanization`, and `last_line`. Default casing is `upper`.
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.BulkUsVerificationsResponse bulkUsVerifications(org.openapis.openapi.models.shared.MultipleComponentsList multipleComponentsList, org.openapis.openapi.models.operations.Case case_) throws Exception {
        org.openapis.openapi.models.operations.BulkUsVerificationsRequest request = new org.openapis.openapi.models.operations.BulkUsVerificationsRequest(multipleComponentsList);
        request.case_=case_;
        
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/bulk/us_verifications");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "multipleComponentsList", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.BulkUsVerificationsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this.sdkConfiguration.securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");
        
        org.openapis.openapi.models.operations.BulkUsVerificationsResponse res = new org.openapis.openapi.models.operations.BulkUsVerificationsResponse(contentType, null, httpRes.statusCode(), httpRes) {{
            usVerifications = null;
        }};
        
        if (httpRes.statusCode() == 200) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.UsVerifications out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.UsVerifications.class);
                res.usVerifications = out;
            }
        }

        return res;
    }

    /**
     * Single Verify
     * Verify a US or US territory address _with a live API key_. The address can be in components (e.g. `primary_line` is "210 King Street", `zip_code` is "94107") or as a single string (e.g. "210 King Street 94107"), but not as both. Requests using a test API key validate required fields but return empty values unless specific `primary_line` values are provided. See the [US Verifications Test Environment](#section/US-Verifications-Test-Env) for details.
     * @param requestBody
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UsVerificationResponse usVerification(Object requestBody) throws Exception {
        return this.usVerification(requestBody, null);
    }

    /**
     * Single Verify
     * Verify a US or US territory address _with a live API key_. The address can be in components (e.g. `primary_line` is "210 King Street", `zip_code` is "94107") or as a single string (e.g. "210 King Street 94107"), but not as both. Requests using a test API key validate required fields but return empty values unless specific `primary_line` values are provided. See the [US Verifications Test Environment](#section/US-Verifications-Test-Env) for details.
     * @param requestBody
     * @param case_ Casing of the verified address. Possible values are `upper` and `proper` for uppercased (e.g. "PO BOX") and proper-cased (e.g. "PO Box"), respectively. Only affects `recipient`, `primary_line`, `secondary_line`, `urbanization`, and `last_line`. Default casing is `upper`.
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.UsVerificationResponse usVerification(Object requestBody, org.openapis.openapi.models.operations.UsVerificationQueryParamCase case_) throws Exception {
        org.openapis.openapi.models.operations.UsVerificationRequest request = new org.openapis.openapi.models.operations.UsVerificationRequest(requestBody);
        request.case_=case_;
        
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(baseUrl, "/us_verifications");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.UsVerificationRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this.sdkConfiguration.securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");
        
        org.openapis.openapi.models.operations.UsVerificationResponse res = new org.openapis.openapi.models.operations.UsVerificationResponse(contentType, null, httpRes.statusCode(), httpRes) {{
            usVerification = null;
        }};
        
        if (httpRes.statusCode() == 200) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.UsVerification out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.UsVerification.class);
                res.usVerification = out;
            }
        }

        return res;
    }
}