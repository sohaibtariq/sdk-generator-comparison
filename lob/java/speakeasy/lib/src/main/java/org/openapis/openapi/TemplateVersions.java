/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.function.Function;
import java.util.stream.Collectors;
import org.apache.http.NameValuePair;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.JSON;
import org.openapis.openapi.utils.SerializedBody;

/**
 * These API endpoints allow you to create, retrieve, update and delete versions of reusable HTML templates for use with the Print &amp; Mail API.
 * &lt;div class="back-to-top" &gt;&lt;a href="#" onclick="toTopLink()"&gt;back to top&lt;/a&gt;&lt;/div&gt;
 * 
 */
public class TemplateVersions {
	
	private SDKConfiguration sdkConfiguration;

	public TemplateVersions(SDKConfiguration sdkConfiguration) {
		this.sdkConfiguration = sdkConfiguration;
	}

    /**
     * Delete
     * Permanently deletes a template version. A template's `published_version` can not be deleted.
     * @param tmplId The ID of the template to which the version belongs.
     * @param vrsnId id of the template_version
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.TemplateVersionDeleteResponse templateVersionDelete(String tmplId, String vrsnId) throws Exception {
        org.openapis.openapi.models.operations.TemplateVersionDeleteRequest request = new org.openapis.openapi.models.operations.TemplateVersionDeleteRequest(tmplId, vrsnId);
        
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.TemplateVersionDeleteRequest.class, baseUrl, "/templates/{tmpl_id}/versions/{vrsn_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);
        
        HTTPClient client = this.sdkConfiguration.securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");
        
        org.openapis.openapi.models.operations.TemplateVersionDeleteResponse res = new org.openapis.openapi.models.operations.TemplateVersionDeleteResponse(contentType, httpRes.statusCode(), httpRes) {{
            templateVersionDeletion = null;
        }};
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TemplateVersionDeletion out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TemplateVersionDeletion.class);
                res.templateVersionDeletion = out;
            }
        }

        return res;
    }

    /**
     * Retrieve
     * Retrieves the template version with the given template and version ids.
     * @param tmplId The ID of the template to which the version belongs.
     * @param vrsnId id of the template_version
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.TemplateVersionRetrieveResponse templateVersionRetrieve(String tmplId, String vrsnId) throws Exception {
        org.openapis.openapi.models.operations.TemplateVersionRetrieveRequest request = new org.openapis.openapi.models.operations.TemplateVersionRetrieveRequest(tmplId, vrsnId);
        
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.TemplateVersionRetrieveRequest.class, baseUrl, "/templates/{tmpl_id}/versions/{vrsn_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);
        
        HTTPClient client = this.sdkConfiguration.securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");
        
        org.openapis.openapi.models.operations.TemplateVersionRetrieveResponse res = new org.openapis.openapi.models.operations.TemplateVersionRetrieveResponse(contentType, httpRes.statusCode(), httpRes) {{
            templateVersion = null;
        }};
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TemplateVersion out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TemplateVersion.class);
                res.templateVersion = out;
            }
        }

        return res;
    }

    /**
     * Update
     * Updates the template version with the given template and version ids.
     * @param tmplId The ID of the template to which the version belongs.
     * @param vrsnId id of the template_version
     * @param templateVersionUpdatable
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.TemplateVersionUpdateResponse templateVersionUpdate(String tmplId, String vrsnId, org.openapis.openapi.models.shared.TemplateVersionUpdatable templateVersionUpdatable) throws Exception {
        org.openapis.openapi.models.operations.TemplateVersionUpdateRequest request = new org.openapis.openapi.models.operations.TemplateVersionUpdateRequest(tmplId, vrsnId, templateVersionUpdatable);
        
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.TemplateVersionUpdateRequest.class, baseUrl, "/templates/{tmpl_id}/versions/{vrsn_id}", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "templateVersionUpdatable", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);
        
        HTTPClient client = this.sdkConfiguration.securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");
        
        org.openapis.openapi.models.operations.TemplateVersionUpdateResponse res = new org.openapis.openapi.models.operations.TemplateVersionUpdateResponse(contentType, null, httpRes.statusCode(), httpRes) {{
            templateVersion = null;
        }};
        
        if (httpRes.statusCode() == 200) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TemplateVersion out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TemplateVersion.class);
                res.templateVersion = out;
            }
        }

        return res;
    }

    /**
     * List
     * Returns a list of template versions for the given template ID. The template versions are sorted by creation date, with the most recently created appearing first.
     * 
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.TemplateVersionsListResponse templateVersionsList(org.openapis.openapi.models.operations.TemplateVersionsListRequest request) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.TemplateVersionsListRequest.class, baseUrl, "/templates/{tmpl_id}/versions", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);
        java.util.List<NameValuePair> queryParams = org.openapis.openapi.utils.Utils.getQueryParams(org.openapis.openapi.models.operations.TemplateVersionsListRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = this.sdkConfiguration.securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");
        
        org.openapis.openapi.models.operations.TemplateVersionsListResponse res = new org.openapis.openapi.models.operations.TemplateVersionsListResponse(contentType, httpRes.statusCode(), httpRes) {{
            object = null;
        }};
        
        if (httpRes.statusCode() == 200) {
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.operations.TemplateVersionsListResponseBody out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.operations.TemplateVersionsListResponseBody.class);
                res.object = out;
            }
        }

        return res;
    }

    /**
     * Create
     * Creates a new template version attached to the specified template.
     * @param tmplId The ID of the template the new version will be attached to
     * @param templateVersionWritable
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public org.openapis.openapi.models.operations.CreateTemplateVersionResponse createTemplateVersion(String tmplId, org.openapis.openapi.models.shared.TemplateVersionWritable templateVersionWritable) throws Exception {
        org.openapis.openapi.models.operations.CreateTemplateVersionRequest request = new org.openapis.openapi.models.operations.CreateTemplateVersionRequest(tmplId, templateVersionWritable);
        
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = org.openapis.openapi.utils.Utils.generateURL(org.openapis.openapi.models.operations.CreateTemplateVersionRequest.class, baseUrl, "/templates/{tmpl_id}/versions", request, null);
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = org.openapis.openapi.utils.Utils.serializeRequestBody(request, "templateVersionWritable", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);
        
        HTTPClient client = this.sdkConfiguration.securityClient;
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");
        
        org.openapis.openapi.models.operations.CreateTemplateVersionResponse res = new org.openapis.openapi.models.operations.CreateTemplateVersionResponse(contentType, null, httpRes.statusCode(), httpRes) {{
            templateVersion = null;
        }};
        
        if (httpRes.statusCode() == 200) {
            res.headers = httpRes.headers().map().keySet().stream().collect(Collectors.toMap(Function.identity(), k -> httpRes.headers().allValues(k).toArray(new String[0])));
            
            if (org.openapis.openapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                org.openapis.openapi.models.shared.TemplateVersion out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), org.openapis.openapi.models.shared.TemplateVersion.class);
                res.templateVersion = out;
            }
        }

        return res;
    }
}