/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.time.OffsetDateTime;
import org.openapis.openapi.utils.DateTimeDeserializer;
import org.openapis.openapi.utils.DateTimeSerializer;


public class Card {
    /**
     * A timestamp in ISO 8601 format of the date the resource was created.
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("date_created")
    public OffsetDateTime dateCreated;

    public Card withDateCreated(OffsetDateTime dateCreated) {
        this.dateCreated = dateCreated;
        return this;
    }
    
    /**
     * A timestamp in ISO 8601 format of the date the resource was last modified.
     */
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("date_modified")
    public OffsetDateTime dateModified;

    public Card withDateModified(OffsetDateTime dateModified) {
        this.dateModified = dateModified;
        return this;
    }
    
    /**
     * Only returned if the resource has been successfully deleted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleted")
    public Boolean deleted;

    public Card withDeleted(Boolean deleted) {
        this.deleted = deleted;
        return this;
    }
    
    /**
     * object
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("object")
    public CardObject object;

    public Card withObject(CardObject object) {
        this.object = object;
        return this;
    }
    
    /**
     * Description of the card.
     */
    @JsonProperty("description")
    public String description;

    public Card withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * The size of the card
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("size")
    public CardSize size;

    public Card withSize(CardSize size) {
        this.size = size;
        return this;
    }
    
    /**
     * Unique identifier prefixed with `card_`.
     */
    @JsonProperty("id")
    public String id;

    public Card withId(String id) {
        this.id = id;
        return this;
    }
    
    /**
     * The signed link for the card.
     */
    @JsonProperty("url")
    public String url;

    public Card withUrl(String url) {
        this.url = url;
        return this;
    }
    
    /**
     * True if the cards should be auto-reordered.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("auto_reorder")
    public Boolean autoReorder;

    public Card withAutoReorder(Boolean autoReorder) {
        this.autoReorder = autoReorder;
        return this;
    }
    
    /**
     * The number of cards to be reordered.
     */
    @JsonProperty("reorder_quantity")
    public Long reorderQuantity;

    public Card withReorderQuantity(Long reorderQuantity) {
        this.reorderQuantity = reorderQuantity;
        return this;
    }
    
    /**
     * The raw URL of the card.
     */
    @JsonProperty("raw_url")
    public String rawUrl;

    public Card withRawUrl(String rawUrl) {
        this.rawUrl = rawUrl;
        return this;
    }
    
    /**
     * The original URL of the front template.
     */
    @JsonProperty("front_original_url")
    public String frontOriginalUrl;

    public Card withFrontOriginalUrl(String frontOriginalUrl) {
        this.frontOriginalUrl = frontOriginalUrl;
        return this;
    }
    
    /**
     * The original URL of the back template.
     */
    @JsonProperty("back_original_url")
    public String backOriginalUrl;

    public Card withBackOriginalUrl(String backOriginalUrl) {
        this.backOriginalUrl = backOriginalUrl;
        return this;
    }
    
    @JsonProperty("thumbnails")
    public Thumbnail[] thumbnails;

    public Card withThumbnails(Thumbnail[] thumbnails) {
        this.thumbnails = thumbnails;
        return this;
    }
    
    /**
     * The available quantity of cards.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("available_quantity")
    public Long availableQuantity;

    public Card withAvailableQuantity(Long availableQuantity) {
        this.availableQuantity = availableQuantity;
        return this;
    }
    
    /**
     * The pending quantity of cards.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pending_quantity")
    public Long pendingQuantity;

    public Card withPendingQuantity(Long pendingQuantity) {
        this.pendingQuantity = pendingQuantity;
        return this;
    }
    
    @JsonProperty("status")
    public TheStatusOfTheCard status;

    public Card withStatus(TheStatusOfTheCard status) {
        this.status = status;
        return this;
    }
    
    /**
     * The orientation of the card.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("orientation")
    public Orientation orientation;

    public Card withOrientation(Orientation orientation) {
        this.orientation = orientation;
        return this;
    }
    
    /**
     * The threshold amount of the card
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("threshold_amount")
    public Long thresholdAmount;

    public Card withThresholdAmount(Long thresholdAmount) {
        this.thresholdAmount = thresholdAmount;
        return this;
    }
    
    public Card(@JsonProperty("date_created") OffsetDateTime dateCreated, @JsonProperty("date_modified") OffsetDateTime dateModified, @JsonProperty("description") String description, @JsonProperty("id") String id, @JsonProperty("url") String url, @JsonProperty("reorder_quantity") Long reorderQuantity, @JsonProperty("raw_url") String rawUrl, @JsonProperty("front_original_url") String frontOriginalUrl, @JsonProperty("back_original_url") String backOriginalUrl, @JsonProperty("thumbnails") Thumbnail[] thumbnails, @JsonProperty("status") TheStatusOfTheCard status) {
        this.dateCreated = dateCreated;
        this.dateModified = dateModified;
        this.description = description;
        this.id = id;
        this.url = url;
        this.reorderQuantity = reorderQuantity;
        this.rawUrl = rawUrl;
        this.frontOriginalUrl = frontOriginalUrl;
        this.backOriginalUrl = backOriginalUrl;
        this.thumbnails = thumbnails;
        this.status = status;
  }
}
