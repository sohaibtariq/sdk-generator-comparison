/*
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 
 *
 * The version of the OpenAPI document: 1.19.18
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddressesListBeforeAfterParameter;
import org.openapitools.client.model.Card;
import org.openapitools.client.model.CardDeletion;
import org.openapitools.client.model.CardEditable;
import org.openapitools.client.model.CardUpdatable;
import org.openapitools.client.model.CardsList200Response;
import org.openapitools.client.model.Error;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CardsApi
 */
@Disabled
public class CardsApiTest {

    private final CardsApi api = new CardsApi();

    /**
     * Create
     *
     * Creates a new card given information
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cardCreateTest() throws ApiException {
        CardEditable cardEditable = null;
        Card response = api.cardCreate(cardEditable);
        // TODO: test validations
    }

    /**
     * Delete
     *
     * Delete an existing card. You need only supply the unique identifier that was returned upon card creation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cardDeleteTest() throws ApiException {
        String cardId = null;
        CardDeletion response = api.cardDelete(cardId);
        // TODO: test validations
    }

    /**
     * Retrieve
     *
     * Retrieves the details of an existing card. You need only supply the unique customer identifier that was returned upon card creation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cardRetrieveTest() throws ApiException {
        String cardId = null;
        Card response = api.cardRetrieve(cardId);
        // TODO: test validations
    }

    /**
     * Update
     *
     * Update the details of an existing card. You need only supply the unique identifier that was returned upon card creation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cardUpdateTest() throws ApiException {
        String cardId = null;
        CardUpdatable cardUpdatable = null;
        Card response = api.cardUpdate(cardId, cardUpdatable);
        // TODO: test validations
    }

    /**
     * List
     *
     * Returns a list of your cards. The cards are returned sorted by creation date, with the most recently created addresses appearing first.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cardsListTest() throws ApiException {
        Integer limit = null;
        AddressesListBeforeAfterParameter beforeAfter = null;
        List<String> include = null;
        CardsList200Response response = api.cardsList(limit, beforeAfter, include);
        // TODO: test validations
    }

}
