/*
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 
 *
 * The version of the OpenAPI document: 1.19.18
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DomainResponse;
import org.openapitools.client.model.Domains;
import org.openapitools.client.model.DomainsResponse;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.LinkResponse;
import org.openapitools.client.model.LinkSingle;
import org.openapitools.client.model.LinksResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UrlShortenerApi
 */
@Disabled
public class UrlShortenerApiTest {

    private final UrlShortenerApi api = new UrlShortenerApi();

    /**
     * Create Domain
     *
     * Add a new custom domain that can be used to create custom links.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void domainCreateTest() throws ApiException {
        Domains domains = null;
        DomainResponse response = api.domainCreate(domains);
        // TODO: test validations
    }

    /**
     * Delete a Domain
     *
     * Delete a registered domain. This operation can only be performed if all associated links with the domain are deleted.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void domainDeleteTest() throws ApiException {
        String domainId = null;
        DomainResponse response = api.domainDelete(domainId);
        // TODO: test validations
    }

    /**
     * Delete all links for a domain
     *
     * Delete all associated links for a domain
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void domainDeleteLinksTest() throws ApiException {
        String domainId = null;
        DomainsResponse response = api.domainDeleteLinks(domainId);
        // TODO: test validations
    }

    /**
     * Retrieve a domain
     *
     * Retrieve details for a single domain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void domainGetTest() throws ApiException {
        String domainId = null;
        DomainResponse response = api.domainGet(domainId);
        // TODO: test validations
    }

    /**
     * List all domains
     *
     * Retrieve a list of all created domains.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void domainListTest() throws ApiException {
        DomainsResponse response = api.domainList();
        // TODO: test validations
    }

    /**
     * Bulk Create Links
     *
     * Shortens a list of links in a single request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void linkBulkCreateTest() throws ApiException {
        List<LinkSingle> linkSingle = null;
        LinksResponse response = api.linkBulkCreate(linkSingle);
        // TODO: test validations
    }

    /**
     * Create Link
     *
     * Given a long URL, shorten your URL either by using a custom domain or Lob&#39;s own short domain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void linkCreateTest() throws ApiException {
        LinkSingle linkSingle = null;
        LinkResponse response = api.linkCreate(linkSingle);
        // TODO: test validations
    }

    /**
     * Update a Link
     *
     * Update any of the properties of a shortened link.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void linkUpdateTest() throws ApiException {
        String linkId = null;
        LinkSingle linkSingle = null;
        LinkResponse response = api.linkUpdate(linkId, linkSingle);
        // TODO: test validations
    }

    /**
     * Delete Link
     *
     * Delete the shortened link.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void linksDeleteTest() throws ApiException {
        String linkId = null;
        LinkResponse response = api.linksDelete(linkId);
        // TODO: test validations
    }

    /**
     * Retrieve a link
     *
     * Retrievs a single shortened link.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void linksGetTest() throws ApiException {
        String linkId = null;
        LinkResponse response = api.linksGet(linkId);
        // TODO: test validations
    }

    /**
     * Retrieve all shortened links
     *
     * Retrieves a list of shortened links. The list is sorted by  creation date, with the most recently created appearing first.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void linksListTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        List<String> include = null;
        Map<String, String> dateCreated = null;
        Map<String, String> metadata = null;
        String campaignId = null;
        Boolean clicked = null;
        String billingGroupId = null;
        LinksResponse response = api.linksList(limit, offset, include, dateCreated, metadata, campaignId, clicked, billingGroupId);
        // TODO: test validations
    }

}
