/*
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 
 *
 * The version of the OpenAPI document: 1.19.18
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddressesListBeforeAfterParameter;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.TemplateVersion;
import org.openapitools.client.model.TemplateVersionDeletion;
import org.openapitools.client.model.TemplateVersionUpdatable;
import org.openapitools.client.model.TemplateVersionWritable;
import org.openapitools.client.model.TemplateVersionsList200Response;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TemplateVersionsApi
 */
@Disabled
public class TemplateVersionsApiTest {

    private final TemplateVersionsApi api = new TemplateVersionsApi();

    /**
     * Create
     *
     * Creates a new template version attached to the specified template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTemplateVersionTest() throws ApiException {
        String tmplId = null;
        TemplateVersionWritable templateVersionWritable = null;
        TemplateVersion response = api.createTemplateVersion(tmplId, templateVersionWritable);
        // TODO: test validations
    }

    /**
     * Delete
     *
     * Permanently deletes a template version. A template&#39;s &#x60;published_version&#x60; can not be deleted.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void templateVersionDeleteTest() throws ApiException {
        String tmplId = null;
        String vrsnId = null;
        TemplateVersionDeletion response = api.templateVersionDelete(tmplId, vrsnId);
        // TODO: test validations
    }

    /**
     * Retrieve
     *
     * Retrieves the template version with the given template and version ids.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void templateVersionRetrieveTest() throws ApiException {
        String tmplId = null;
        String vrsnId = null;
        TemplateVersion response = api.templateVersionRetrieve(tmplId, vrsnId);
        // TODO: test validations
    }

    /**
     * Update
     *
     * Updates the template version with the given template and version ids.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void templateVersionUpdateTest() throws ApiException {
        String tmplId = null;
        String vrsnId = null;
        TemplateVersionUpdatable templateVersionUpdatable = null;
        TemplateVersion response = api.templateVersionUpdate(tmplId, vrsnId, templateVersionUpdatable);
        // TODO: test validations
    }

    /**
     * List
     *
     * Returns a list of template versions for the given template ID. The template versions are sorted by creation date, with the most recently created appearing first. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void templateVersionsListTest() throws ApiException {
        String tmplId = null;
        Integer limit = null;
        AddressesListBeforeAfterParameter beforeAfter = null;
        List<String> include = null;
        Map<String, String> dateCreated = null;
        TemplateVersionsList200Response response = api.templateVersionsList(tmplId, limit, beforeAfter, include, dateCreated);
        // TODO: test validations
    }

}
