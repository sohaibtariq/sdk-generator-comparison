/*
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 
 *
 * The version of the OpenAPI document: 1.19.18
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.Address;
import org.openapitools.client.model.AddressUs;
import org.openapitools.client.model.MailType;
import org.openapitools.client.model.PostcardSize;
import org.openapitools.client.model.PscUseType;
import org.openapitools.client.model.SendDate;
import org.openapitools.client.model.Thumbnail;
import org.openapitools.client.model.TrackingEventNormal;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Postcard
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-28T10:58:18.138843-08:00[America/Los_Angeles]")
public class Postcard {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Map<String, String> metadata = new HashMap<>();

  public static final String SERIALIZED_NAME_MAIL_TYPE = "mail_type";
  @SerializedName(SERIALIZED_NAME_MAIL_TYPE)
  private MailType mailType = MailType.FIRST_CLASS;

  public static final String SERIALIZED_NAME_MERGE_VARIABLES = "merge_variables";
  @SerializedName(SERIALIZED_NAME_MERGE_VARIABLES)
  private String mergeVariables;

  public static final String SERIALIZED_NAME_SEND_DATE = "send_date";
  @SerializedName(SERIALIZED_NAME_SEND_DATE)
  private SendDate sendDate;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private PostcardSize size = PostcardSize._4X6;

  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  private Address to;

  /**
   * Gets or Sets carrier
   */
  @JsonAdapter(CarrierEnum.Adapter.class)
  public enum CarrierEnum {
    USPS("USPS");

    private String value;

    CarrierEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CarrierEnum fromValue(String value) {
      for (CarrierEnum b : CarrierEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CarrierEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CarrierEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CarrierEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CarrierEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CarrierEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CARRIER = "carrier";
  @SerializedName(SERIALIZED_NAME_CARRIER)
  private CarrierEnum carrier = CarrierEnum.USPS;

  public static final String SERIALIZED_NAME_THUMBNAILS = "thumbnails";
  @SerializedName(SERIALIZED_NAME_THUMBNAILS)
  private List<Thumbnail> thumbnails;

  public static final String SERIALIZED_NAME_EXPECTED_DELIVERY_DATE = "expected_delivery_date";
  @SerializedName(SERIALIZED_NAME_EXPECTED_DELIVERY_DATE)
  private LocalDate expectedDeliveryDate;

  public static final String SERIALIZED_NAME_DATE_CREATED = "date_created";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_DATE_MODIFIED = "date_modified";
  @SerializedName(SERIALIZED_NAME_DATE_MODIFIED)
  private OffsetDateTime dateModified;

  public static final String SERIALIZED_NAME_DELETED = "deleted";
  @SerializedName(SERIALIZED_NAME_DELETED)
  private Boolean deleted;

  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  private AddressUs from;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_FRONT_TEMPLATE_ID = "front_template_id";
  @SerializedName(SERIALIZED_NAME_FRONT_TEMPLATE_ID)
  private String frontTemplateId;

  public static final String SERIALIZED_NAME_BACK_TEMPLATE_ID = "back_template_id";
  @SerializedName(SERIALIZED_NAME_BACK_TEMPLATE_ID)
  private String backTemplateId;

  public static final String SERIALIZED_NAME_FRONT_TEMPLATE_VERSION_ID = "front_template_version_id";
  @SerializedName(SERIALIZED_NAME_FRONT_TEMPLATE_VERSION_ID)
  private String frontTemplateVersionId;

  public static final String SERIALIZED_NAME_BACK_TEMPLATE_VERSION_ID = "back_template_version_id";
  @SerializedName(SERIALIZED_NAME_BACK_TEMPLATE_VERSION_ID)
  private String backTemplateVersionId;

  public static final String SERIALIZED_NAME_TRACKING_EVENTS = "tracking_events";
  @SerializedName(SERIALIZED_NAME_TRACKING_EVENTS)
  private List<TrackingEventNormal> trackingEvents;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_CAMPAIGN_ID = "campaign_id";
  @SerializedName(SERIALIZED_NAME_CAMPAIGN_ID)
  private String campaignId;

  public static final String SERIALIZED_NAME_USE_TYPE = "use_type";
  @SerializedName(SERIALIZED_NAME_USE_TYPE)
  private PscUseType useType;

  public static final String SERIALIZED_NAME_FSC = "fsc";
  @SerializedName(SERIALIZED_NAME_FSC)
  private Boolean fsc = false;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    PROCESSED("processed"),
    
    RENDERED("rendered"),
    
    FAILED("failed");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_FAILURE_REASON = "failure_reason";
  @SerializedName(SERIALIZED_NAME_FAILURE_REASON)
  private String failureReason;

  /**
   * Value is resource type.
   */
  @JsonAdapter(ObjectEnum.Adapter.class)
  public enum ObjectEnum {
    POSTCARD("postcard");

    private String value;

    ObjectEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ObjectEnum fromValue(String value) {
      for (ObjectEnum b : ObjectEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ObjectEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ObjectEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ObjectEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ObjectEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ObjectEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OBJECT = "object";
  @SerializedName(SERIALIZED_NAME_OBJECT)
  private ObjectEnum _object = ObjectEnum.POSTCARD;

  public Postcard() {
  }

  public Postcard description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * An internal description that identifies this resource. Must be no longer than 255 characters. 
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public Postcard metadata(Map<String, String> metadata) {
    
    this.metadata = metadata;
    return this;
  }

  public Postcard putMetadataItem(String key, String metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }

   /**
   * Use metadata to store custom information for tagging and labeling back to your internal systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters and values must be at most 500 characters. Neither can contain the characters &#x60;\&quot;&#x60; and &#x60;\\&#x60;. i.e. &#39;{\&quot;customer_id\&quot; : \&quot;NEWYORK2015\&quot;}&#39; Nested objects are not supported.  See [Metadata](#section/Metadata) for more information.
   * @return metadata
  **/
  @javax.annotation.Nullable
  public Map<String, String> getMetadata() {
    return metadata;
  }


  public void setMetadata(Map<String, String> metadata) {
    this.metadata = metadata;
  }


  public Postcard mailType(MailType mailType) {
    
    this.mailType = mailType;
    return this;
  }

   /**
   * Get mailType
   * @return mailType
  **/
  @javax.annotation.Nullable
  public MailType getMailType() {
    return mailType;
  }


  public void setMailType(MailType mailType) {
    this.mailType = mailType;
  }


  public Postcard mergeVariables(String mergeVariables) {
    
    this.mergeVariables = mergeVariables;
    return this;
  }

   /**
   * You can input a merge variable payload object to your template to render dynamic content. For example, if you have a template like: &#x60;{{variable_name}}&#x60;, pass in &#x60;{\&quot;variable_name\&quot;: \&quot;Harry\&quot;}&#x60; to render &#x60;Harry&#x60;. &#x60;merge_variables&#x60; must be an object. Any type of value is accepted as long as the object is valid JSON; you can use &#x60;strings&#x60;, &#x60;numbers&#x60;, &#x60;booleans&#x60;, &#x60;arrays&#x60;, &#x60;objects&#x60;, or &#x60;null&#x60;. The max length of the object is 25,000 characters. If you call &#x60;JSON.stringify&#x60; on your object, it can be no longer than 25,000 characters. Your variable names cannot contain any whitespace or any of the following special characters: &#x60;!&#x60;, &#x60;\&quot;&#x60;, &#x60;#&#x60;, &#x60;%&#x60;, &#x60;&amp;&#x60;, &#x60;&#39;&#x60;, &#x60;(&#x60;, &#x60;)&#x60;, &#x60;*&#x60;, &#x60;+&#x60;, &#x60;,&#x60;, &#x60;/&#x60;, &#x60;;&#x60;, &#x60;&lt;&#x60;, &#x60;&#x3D;&#x60;, &#x60;&gt;&#x60;, &#x60;@&#x60;, &#x60;[&#x60;, &#x60;\\&#x60;, &#x60;]&#x60;, &#x60;^&#x60;, &#x60;&#x60; &#x60; &#x60;&#x60;, &#x60;{&#x60;, &#x60;|&#x60;, &#x60;}&#x60;, &#x60;~&#x60;. More instructions can be found in &lt;a href&#x3D;\&quot;https://help.lob.com/print-and-mail/designing-mail-creatives/dynamic-personalization#using-html-and-merge-variables-10\&quot; target&#x3D;\&quot;_blank\&quot;&gt;our guide to using html and merge variables&lt;/a&gt;. Depending on your &lt;a href&#x3D;\&quot;https://dashboard.lob.com/#/settings/account\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Merge Variable strictness&lt;/a&gt; setting, if you define variables in your HTML but do not pass them here, you will either receive an error or the variable will render as an empty string.
   * @return mergeVariables
  **/
  @javax.annotation.Nullable
  public String getMergeVariables() {
    return mergeVariables;
  }


  public void setMergeVariables(String mergeVariables) {
    this.mergeVariables = mergeVariables;
  }


  public Postcard sendDate(SendDate sendDate) {
    
    this.sendDate = sendDate;
    return this;
  }

   /**
   * Get sendDate
   * @return sendDate
  **/
  @javax.annotation.Nullable
  public SendDate getSendDate() {
    return sendDate;
  }


  public void setSendDate(SendDate sendDate) {
    this.sendDate = sendDate;
  }


  public Postcard size(PostcardSize size) {
    
    this.size = size;
    return this;
  }

   /**
   * Get size
   * @return size
  **/
  @javax.annotation.Nullable
  public PostcardSize getSize() {
    return size;
  }


  public void setSize(PostcardSize size) {
    this.size = size;
  }


  public Postcard to(Address to) {
    
    this.to = to;
    return this;
  }

   /**
   * Get to
   * @return to
  **/
  @javax.annotation.Nonnull
  public Address getTo() {
    return to;
  }


  public void setTo(Address to) {
    this.to = to;
  }


  public Postcard carrier(CarrierEnum carrier) {
    
    this.carrier = carrier;
    return this;
  }

   /**
   * Get carrier
   * @return carrier
  **/
  @javax.annotation.Nonnull
  public CarrierEnum getCarrier() {
    return carrier;
  }


  public void setCarrier(CarrierEnum carrier) {
    this.carrier = carrier;
  }


  public Postcard thumbnails(List<Thumbnail> thumbnails) {
    
    this.thumbnails = thumbnails;
    return this;
  }

  public Postcard addThumbnailsItem(Thumbnail thumbnailsItem) {
    if (this.thumbnails == null) {
      this.thumbnails = new ArrayList<>();
    }
    this.thumbnails.add(thumbnailsItem);
    return this;
  }

   /**
   * Get thumbnails
   * @return thumbnails
  **/
  @javax.annotation.Nullable
  public List<Thumbnail> getThumbnails() {
    return thumbnails;
  }


  public void setThumbnails(List<Thumbnail> thumbnails) {
    this.thumbnails = thumbnails;
  }


  public Postcard expectedDeliveryDate(LocalDate expectedDeliveryDate) {
    
    this.expectedDeliveryDate = expectedDeliveryDate;
    return this;
  }

   /**
   * A date in YYYY-MM-DD format of the mailpiece&#39;s expected delivery date based on its &#x60;send_date&#x60;.
   * @return expectedDeliveryDate
  **/
  @javax.annotation.Nullable
  public LocalDate getExpectedDeliveryDate() {
    return expectedDeliveryDate;
  }


  public void setExpectedDeliveryDate(LocalDate expectedDeliveryDate) {
    this.expectedDeliveryDate = expectedDeliveryDate;
  }


  public Postcard dateCreated(OffsetDateTime dateCreated) {
    
    this.dateCreated = dateCreated;
    return this;
  }

   /**
   * A timestamp in ISO 8601 format of the date the resource was created.
   * @return dateCreated
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }


  public void setDateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
  }


  public Postcard dateModified(OffsetDateTime dateModified) {
    
    this.dateModified = dateModified;
    return this;
  }

   /**
   * A timestamp in ISO 8601 format of the date the resource was last modified.
   * @return dateModified
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getDateModified() {
    return dateModified;
  }


  public void setDateModified(OffsetDateTime dateModified) {
    this.dateModified = dateModified;
  }


  public Postcard deleted(Boolean deleted) {
    
    this.deleted = deleted;
    return this;
  }

   /**
   * Only returned if the resource has been successfully deleted.
   * @return deleted
  **/
  @javax.annotation.Nullable
  public Boolean getDeleted() {
    return deleted;
  }


  public void setDeleted(Boolean deleted) {
    this.deleted = deleted;
  }


  public Postcard from(AddressUs from) {
    
    this.from = from;
    return this;
  }

   /**
   * Get from
   * @return from
  **/
  @javax.annotation.Nullable
  public AddressUs getFrom() {
    return from;
  }


  public void setFrom(AddressUs from) {
    this.from = from;
  }


  public Postcard id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Unique identifier prefixed with &#x60;psc_&#x60;.
   * @return id
  **/
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public Postcard frontTemplateId(String frontTemplateId) {
    
    this.frontTemplateId = frontTemplateId;
    return this;
  }

   /**
   * The unique ID of the HTML template used for the front of the postcard. Only filled out when the request contains a valid postcard template ID.
   * @return frontTemplateId
  **/
  @javax.annotation.Nullable
  public String getFrontTemplateId() {
    return frontTemplateId;
  }


  public void setFrontTemplateId(String frontTemplateId) {
    this.frontTemplateId = frontTemplateId;
  }


  public Postcard backTemplateId(String backTemplateId) {
    
    this.backTemplateId = backTemplateId;
    return this;
  }

   /**
   * The unique ID of the HTML template used for the back of the postcard. Only filled out when the request contains a valid postcard template ID.
   * @return backTemplateId
  **/
  @javax.annotation.Nullable
  public String getBackTemplateId() {
    return backTemplateId;
  }


  public void setBackTemplateId(String backTemplateId) {
    this.backTemplateId = backTemplateId;
  }


  public Postcard frontTemplateVersionId(String frontTemplateVersionId) {
    
    this.frontTemplateVersionId = frontTemplateVersionId;
    return this;
  }

   /**
   * The unique ID of the specific version of the HTML template used for the front of the postcard. Only filled out when the request contains a valid postcard template ID.
   * @return frontTemplateVersionId
  **/
  @javax.annotation.Nullable
  public String getFrontTemplateVersionId() {
    return frontTemplateVersionId;
  }


  public void setFrontTemplateVersionId(String frontTemplateVersionId) {
    this.frontTemplateVersionId = frontTemplateVersionId;
  }


  public Postcard backTemplateVersionId(String backTemplateVersionId) {
    
    this.backTemplateVersionId = backTemplateVersionId;
    return this;
  }

   /**
   * The unique ID of the specific version of the HTML template used for the back of the postcard. Only filled out when the request contains a valid postcard template ID.
   * @return backTemplateVersionId
  **/
  @javax.annotation.Nullable
  public String getBackTemplateVersionId() {
    return backTemplateVersionId;
  }


  public void setBackTemplateVersionId(String backTemplateVersionId) {
    this.backTemplateVersionId = backTemplateVersionId;
  }


  public Postcard trackingEvents(List<TrackingEventNormal> trackingEvents) {
    
    this.trackingEvents = trackingEvents;
    return this;
  }

  public Postcard addTrackingEventsItem(TrackingEventNormal trackingEventsItem) {
    if (this.trackingEvents == null) {
      this.trackingEvents = new ArrayList<>();
    }
    this.trackingEvents.add(trackingEventsItem);
    return this;
  }

   /**
   * An array of tracking_event objects ordered by ascending &#x60;time&#x60;. Will not be populated for postcards created in test mode.
   * @return trackingEvents
  **/
  @javax.annotation.Nullable
  public List<TrackingEventNormal> getTrackingEvents() {
    return trackingEvents;
  }


  public void setTrackingEvents(List<TrackingEventNormal> trackingEvents) {
    this.trackingEvents = trackingEvents;
  }


  public Postcard url(String url) {
    
    this.url = url;
    return this;
  }

   /**
   * A [signed link](#section/Asset-URLs) served over HTTPS. The link returned will expire in 30 days to prevent mis-sharing. Each time a GET request is initiated, a new signed URL will be generated.
   * @return url
  **/
  @javax.annotation.Nonnull
  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    this.url = url;
  }


  public Postcard campaignId(String campaignId) {
    
    this.campaignId = campaignId;
    return this;
  }

   /**
   * The unique ID of the associated campaign if the resource was generated from a campaign.
   * @return campaignId
  **/
  @javax.annotation.Nullable
  public String getCampaignId() {
    return campaignId;
  }


  public void setCampaignId(String campaignId) {
    this.campaignId = campaignId;
  }


  public Postcard useType(PscUseType useType) {
    
    this.useType = useType;
    return this;
  }

   /**
   * Get useType
   * @return useType
  **/
  @javax.annotation.Nullable
  public PscUseType getUseType() {
    return useType;
  }


  public void setUseType(PscUseType useType) {
    this.useType = useType;
  }


  public Postcard fsc(Boolean fsc) {
    
    this.fsc = fsc;
    return this;
  }

   /**
   * This is in beta. Contact support@lob.com or your account contact to learn more. Not available for &#x60;4x6&#x60; or &#x60;A5&#x60; postcard sizes.
   * @return fsc
  **/
  @javax.annotation.Nullable
  public Boolean getFsc() {
    return fsc;
  }


  public void setFsc(Boolean fsc) {
    this.fsc = fsc;
  }


  public Postcard status(StatusEnum status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public Postcard failureReason(String failureReason) {
    
    this.failureReason = failureReason;
    return this;
  }

   /**
   * A string describing the reason for failure if the postcard failed to render.
   * @return failureReason
  **/
  @javax.annotation.Nullable
  public String getFailureReason() {
    return failureReason;
  }


  public void setFailureReason(String failureReason) {
    this.failureReason = failureReason;
  }


  public Postcard _object(ObjectEnum _object) {
    
    this._object = _object;
    return this;
  }

   /**
   * Value is resource type.
   * @return _object
  **/
  @javax.annotation.Nullable
  public ObjectEnum getObject() {
    return _object;
  }


  public void setObject(ObjectEnum _object) {
    this._object = _object;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Postcard postcard = (Postcard) o;
    return Objects.equals(this.description, postcard.description) &&
        Objects.equals(this.metadata, postcard.metadata) &&
        Objects.equals(this.mailType, postcard.mailType) &&
        Objects.equals(this.mergeVariables, postcard.mergeVariables) &&
        Objects.equals(this.sendDate, postcard.sendDate) &&
        Objects.equals(this.size, postcard.size) &&
        Objects.equals(this.to, postcard.to) &&
        Objects.equals(this.carrier, postcard.carrier) &&
        Objects.equals(this.thumbnails, postcard.thumbnails) &&
        Objects.equals(this.expectedDeliveryDate, postcard.expectedDeliveryDate) &&
        Objects.equals(this.dateCreated, postcard.dateCreated) &&
        Objects.equals(this.dateModified, postcard.dateModified) &&
        Objects.equals(this.deleted, postcard.deleted) &&
        Objects.equals(this.from, postcard.from) &&
        Objects.equals(this.id, postcard.id) &&
        Objects.equals(this.frontTemplateId, postcard.frontTemplateId) &&
        Objects.equals(this.backTemplateId, postcard.backTemplateId) &&
        Objects.equals(this.frontTemplateVersionId, postcard.frontTemplateVersionId) &&
        Objects.equals(this.backTemplateVersionId, postcard.backTemplateVersionId) &&
        Objects.equals(this.trackingEvents, postcard.trackingEvents) &&
        Objects.equals(this.url, postcard.url) &&
        Objects.equals(this.campaignId, postcard.campaignId) &&
        Objects.equals(this.useType, postcard.useType) &&
        Objects.equals(this.fsc, postcard.fsc) &&
        Objects.equals(this.status, postcard.status) &&
        Objects.equals(this.failureReason, postcard.failureReason) &&
        Objects.equals(this._object, postcard._object);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, metadata, mailType, mergeVariables, sendDate, size, to, carrier, thumbnails, expectedDeliveryDate, dateCreated, dateModified, deleted, from, id, frontTemplateId, backTemplateId, frontTemplateVersionId, backTemplateVersionId, trackingEvents, url, campaignId, useType, fsc, status, failureReason, _object);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Postcard {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    mailType: ").append(toIndentedString(mailType)).append("\n");
    sb.append("    mergeVariables: ").append(toIndentedString(mergeVariables)).append("\n");
    sb.append("    sendDate: ").append(toIndentedString(sendDate)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    carrier: ").append(toIndentedString(carrier)).append("\n");
    sb.append("    thumbnails: ").append(toIndentedString(thumbnails)).append("\n");
    sb.append("    expectedDeliveryDate: ").append(toIndentedString(expectedDeliveryDate)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateModified: ").append(toIndentedString(dateModified)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    frontTemplateId: ").append(toIndentedString(frontTemplateId)).append("\n");
    sb.append("    backTemplateId: ").append(toIndentedString(backTemplateId)).append("\n");
    sb.append("    frontTemplateVersionId: ").append(toIndentedString(frontTemplateVersionId)).append("\n");
    sb.append("    backTemplateVersionId: ").append(toIndentedString(backTemplateVersionId)).append("\n");
    sb.append("    trackingEvents: ").append(toIndentedString(trackingEvents)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    campaignId: ").append(toIndentedString(campaignId)).append("\n");
    sb.append("    useType: ").append(toIndentedString(useType)).append("\n");
    sb.append("    fsc: ").append(toIndentedString(fsc)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    failureReason: ").append(toIndentedString(failureReason)).append("\n");
    sb.append("    _object: ").append(toIndentedString(_object)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("metadata");
    openapiFields.add("mail_type");
    openapiFields.add("merge_variables");
    openapiFields.add("send_date");
    openapiFields.add("size");
    openapiFields.add("to");
    openapiFields.add("carrier");
    openapiFields.add("thumbnails");
    openapiFields.add("expected_delivery_date");
    openapiFields.add("date_created");
    openapiFields.add("date_modified");
    openapiFields.add("deleted");
    openapiFields.add("from");
    openapiFields.add("id");
    openapiFields.add("front_template_id");
    openapiFields.add("back_template_id");
    openapiFields.add("front_template_version_id");
    openapiFields.add("back_template_version_id");
    openapiFields.add("tracking_events");
    openapiFields.add("url");
    openapiFields.add("campaign_id");
    openapiFields.add("use_type");
    openapiFields.add("fsc");
    openapiFields.add("status");
    openapiFields.add("failure_reason");
    openapiFields.add("object");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("to");
    openapiRequiredFields.add("carrier");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("front_template_id");
    openapiRequiredFields.add("back_template_id");
    openapiRequiredFields.add("url");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Postcard
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Postcard.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Postcard is not found in the empty JSON string", Postcard.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Postcard.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Postcard` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Postcard.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `mail_type`
      if (jsonObj.get("mail_type") != null && !jsonObj.get("mail_type").isJsonNull()) {
        MailType.validateJsonElement(jsonObj.get("mail_type"));
      }
      // validate the optional field `send_date`
      if (jsonObj.get("send_date") != null && !jsonObj.get("send_date").isJsonNull()) {
        SendDate.validateJsonElement(jsonObj.get("send_date"));
      }
      // validate the optional field `size`
      if (jsonObj.get("size") != null && !jsonObj.get("size").isJsonNull()) {
        PostcardSize.validateJsonElement(jsonObj.get("size"));
      }
      // validate the required field `to`
      Address.validateJsonElement(jsonObj.get("to"));
      if (!jsonObj.get("carrier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `carrier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("carrier").toString()));
      }
      // validate the required field `carrier`
      CarrierEnum.validateJsonElement(jsonObj.get("carrier"));
      if (jsonObj.get("thumbnails") != null && !jsonObj.get("thumbnails").isJsonNull()) {
        JsonArray jsonArraythumbnails = jsonObj.getAsJsonArray("thumbnails");
        if (jsonArraythumbnails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("thumbnails").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `thumbnails` to be an array in the JSON string but got `%s`", jsonObj.get("thumbnails").toString()));
          }

          // validate the optional field `thumbnails` (array)
          for (int i = 0; i < jsonArraythumbnails.size(); i++) {
            Thumbnail.validateJsonElement(jsonArraythumbnails.get(i));
          };
        }
      }
      // validate the optional field `from`
      if (jsonObj.get("from") != null && !jsonObj.get("from").isJsonNull()) {
        AddressUs.validateJsonElement(jsonObj.get("from"));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("front_template_id") != null && !jsonObj.get("front_template_id").isJsonNull()) && !jsonObj.get("front_template_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `front_template_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("front_template_id").toString()));
      }
      if ((jsonObj.get("back_template_id") != null && !jsonObj.get("back_template_id").isJsonNull()) && !jsonObj.get("back_template_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `back_template_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("back_template_id").toString()));
      }
      if ((jsonObj.get("front_template_version_id") != null && !jsonObj.get("front_template_version_id").isJsonNull()) && !jsonObj.get("front_template_version_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `front_template_version_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("front_template_version_id").toString()));
      }
      if ((jsonObj.get("back_template_version_id") != null && !jsonObj.get("back_template_version_id").isJsonNull()) && !jsonObj.get("back_template_version_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `back_template_version_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("back_template_version_id").toString()));
      }
      if (jsonObj.get("tracking_events") != null && !jsonObj.get("tracking_events").isJsonNull()) {
        JsonArray jsonArraytrackingEvents = jsonObj.getAsJsonArray("tracking_events");
        if (jsonArraytrackingEvents != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tracking_events").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tracking_events` to be an array in the JSON string but got `%s`", jsonObj.get("tracking_events").toString()));
          }

          // validate the optional field `tracking_events` (array)
          for (int i = 0; i < jsonArraytrackingEvents.size(); i++) {
            TrackingEventNormal.validateJsonElement(jsonArraytrackingEvents.get(i));
          };
        }
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("campaign_id") != null && !jsonObj.get("campaign_id").isJsonNull()) && !jsonObj.get("campaign_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `campaign_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("campaign_id").toString()));
      }
      // validate the optional field `use_type`
      if (jsonObj.get("use_type") != null && !jsonObj.get("use_type").isJsonNull()) {
        PscUseType.validateJsonElement(jsonObj.get("use_type"));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("failure_reason") != null && !jsonObj.get("failure_reason").isJsonNull()) && !jsonObj.get("failure_reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `failure_reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("failure_reason").toString()));
      }
      if ((jsonObj.get("object") != null && !jsonObj.get("object").isJsonNull()) && !jsonObj.get("object").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `object` to be a primitive type in the JSON string but got `%s`", jsonObj.get("object").toString()));
      }
      // validate the optional field `object`
      if (jsonObj.get("object") != null && !jsonObj.get("object").isJsonNull()) {
        ObjectEnum.validateJsonElement(jsonObj.get("object"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Postcard.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Postcard' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Postcard> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Postcard.class));

       return (TypeAdapter<T>) new TypeAdapter<Postcard>() {
           @Override
           public void write(JsonWriter out, Postcard value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Postcard read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Postcard given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Postcard
  * @throws IOException if the JSON string is invalid with respect to Postcard
  */
  public static Postcard fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Postcard.class);
  }

 /**
  * Convert an instance of Postcard to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

