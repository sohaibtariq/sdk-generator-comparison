/*
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 
 *
 * The version of the OpenAPI document: 1.19.18
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import org.openapitools.client.model.AddressTypes;
import org.openapitools.client.model.BankAccountTypes;
import org.openapitools.client.model.CheckTypes;
import org.openapitools.client.model.LetterTypes;
import org.openapitools.client.model.PostcardTypes;
import org.openapitools.client.model.SelfMailerTypes;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-28T10:58:18.138843-08:00[America/Los_Angeles]")
public class EventTypeId extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(EventTypeId.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!EventTypeId.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'EventTypeId' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<PostcardTypes> adapterPostcardTypes = gson.getDelegateAdapter(this, TypeToken.get(PostcardTypes.class));
            final TypeAdapter<SelfMailerTypes> adapterSelfMailerTypes = gson.getDelegateAdapter(this, TypeToken.get(SelfMailerTypes.class));
            final TypeAdapter<LetterTypes> adapterLetterTypes = gson.getDelegateAdapter(this, TypeToken.get(LetterTypes.class));
            final TypeAdapter<CheckTypes> adapterCheckTypes = gson.getDelegateAdapter(this, TypeToken.get(CheckTypes.class));
            final TypeAdapter<AddressTypes> adapterAddressTypes = gson.getDelegateAdapter(this, TypeToken.get(AddressTypes.class));
            final TypeAdapter<BankAccountTypes> adapterBankAccountTypes = gson.getDelegateAdapter(this, TypeToken.get(BankAccountTypes.class));

            return (TypeAdapter<T>) new TypeAdapter<EventTypeId>() {
                @Override
                public void write(JsonWriter out, EventTypeId value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `PostcardTypes`
                    if (value.getActualInstance() instanceof PostcardTypes) {
                      JsonElement element = adapterPostcardTypes.toJsonTree((PostcardTypes)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `SelfMailerTypes`
                    if (value.getActualInstance() instanceof SelfMailerTypes) {
                      JsonElement element = adapterSelfMailerTypes.toJsonTree((SelfMailerTypes)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `LetterTypes`
                    if (value.getActualInstance() instanceof LetterTypes) {
                      JsonElement element = adapterLetterTypes.toJsonTree((LetterTypes)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `CheckTypes`
                    if (value.getActualInstance() instanceof CheckTypes) {
                      JsonElement element = adapterCheckTypes.toJsonTree((CheckTypes)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `AddressTypes`
                    if (value.getActualInstance() instanceof AddressTypes) {
                      JsonElement element = adapterAddressTypes.toJsonTree((AddressTypes)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `BankAccountTypes`
                    if (value.getActualInstance() instanceof BankAccountTypes) {
                      JsonElement element = adapterBankAccountTypes.toJsonTree((BankAccountTypes)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: AddressTypes, BankAccountTypes, CheckTypes, LetterTypes, PostcardTypes, SelfMailerTypes");
                }

                @Override
                public EventTypeId read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize PostcardTypes
                    try {
                      // validate the JSON object to see if any exception is thrown
                      PostcardTypes.validateJsonElement(jsonElement);
                      actualAdapter = adapterPostcardTypes;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'PostcardTypes'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for PostcardTypes failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'PostcardTypes'", e);
                    }
                    // deserialize SelfMailerTypes
                    try {
                      // validate the JSON object to see if any exception is thrown
                      SelfMailerTypes.validateJsonElement(jsonElement);
                      actualAdapter = adapterSelfMailerTypes;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'SelfMailerTypes'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for SelfMailerTypes failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'SelfMailerTypes'", e);
                    }
                    // deserialize LetterTypes
                    try {
                      // validate the JSON object to see if any exception is thrown
                      LetterTypes.validateJsonElement(jsonElement);
                      actualAdapter = adapterLetterTypes;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'LetterTypes'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for LetterTypes failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'LetterTypes'", e);
                    }
                    // deserialize CheckTypes
                    try {
                      // validate the JSON object to see if any exception is thrown
                      CheckTypes.validateJsonElement(jsonElement);
                      actualAdapter = adapterCheckTypes;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'CheckTypes'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for CheckTypes failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'CheckTypes'", e);
                    }
                    // deserialize AddressTypes
                    try {
                      // validate the JSON object to see if any exception is thrown
                      AddressTypes.validateJsonElement(jsonElement);
                      actualAdapter = adapterAddressTypes;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'AddressTypes'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for AddressTypes failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'AddressTypes'", e);
                    }
                    // deserialize BankAccountTypes
                    try {
                      // validate the JSON object to see if any exception is thrown
                      BankAccountTypes.validateJsonElement(jsonElement);
                      actualAdapter = adapterBankAccountTypes;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'BankAccountTypes'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for BankAccountTypes failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'BankAccountTypes'", e);
                    }

                    if (match == 1) {
                        EventTypeId ret = new EventTypeId();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for EventTypeId: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public EventTypeId() {
        super("oneOf", Boolean.FALSE);
    }

    public EventTypeId(AddressTypes o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public EventTypeId(BankAccountTypes o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public EventTypeId(CheckTypes o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public EventTypeId(LetterTypes o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public EventTypeId(PostcardTypes o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public EventTypeId(SelfMailerTypes o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("PostcardTypes", PostcardTypes.class);
        schemas.put("SelfMailerTypes", SelfMailerTypes.class);
        schemas.put("LetterTypes", LetterTypes.class);
        schemas.put("CheckTypes", CheckTypes.class);
        schemas.put("AddressTypes", AddressTypes.class);
        schemas.put("BankAccountTypes", BankAccountTypes.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return EventTypeId.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * AddressTypes, BankAccountTypes, CheckTypes, LetterTypes, PostcardTypes, SelfMailerTypes
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof PostcardTypes) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SelfMailerTypes) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof LetterTypes) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CheckTypes) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AddressTypes) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof BankAccountTypes) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be AddressTypes, BankAccountTypes, CheckTypes, LetterTypes, PostcardTypes, SelfMailerTypes");
    }

    /**
     * Get the actual instance, which can be the following:
     * AddressTypes, BankAccountTypes, CheckTypes, LetterTypes, PostcardTypes, SelfMailerTypes
     *
     * @return The actual instance (AddressTypes, BankAccountTypes, CheckTypes, LetterTypes, PostcardTypes, SelfMailerTypes)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `PostcardTypes`. If the actual instance is not `PostcardTypes`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PostcardTypes`
     * @throws ClassCastException if the instance is not `PostcardTypes`
     */
    public PostcardTypes getPostcardTypes() throws ClassCastException {
        return (PostcardTypes)super.getActualInstance();
    }
    /**
     * Get the actual instance of `SelfMailerTypes`. If the actual instance is not `SelfMailerTypes`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SelfMailerTypes`
     * @throws ClassCastException if the instance is not `SelfMailerTypes`
     */
    public SelfMailerTypes getSelfMailerTypes() throws ClassCastException {
        return (SelfMailerTypes)super.getActualInstance();
    }
    /**
     * Get the actual instance of `LetterTypes`. If the actual instance is not `LetterTypes`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `LetterTypes`
     * @throws ClassCastException if the instance is not `LetterTypes`
     */
    public LetterTypes getLetterTypes() throws ClassCastException {
        return (LetterTypes)super.getActualInstance();
    }
    /**
     * Get the actual instance of `CheckTypes`. If the actual instance is not `CheckTypes`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CheckTypes`
     * @throws ClassCastException if the instance is not `CheckTypes`
     */
    public CheckTypes getCheckTypes() throws ClassCastException {
        return (CheckTypes)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AddressTypes`. If the actual instance is not `AddressTypes`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AddressTypes`
     * @throws ClassCastException if the instance is not `AddressTypes`
     */
    public AddressTypes getAddressTypes() throws ClassCastException {
        return (AddressTypes)super.getActualInstance();
    }
    /**
     * Get the actual instance of `BankAccountTypes`. If the actual instance is not `BankAccountTypes`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `BankAccountTypes`
     * @throws ClassCastException if the instance is not `BankAccountTypes`
     */
    public BankAccountTypes getBankAccountTypes() throws ClassCastException {
        return (BankAccountTypes)super.getActualInstance();
    }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to EventTypeId
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    // validate oneOf schemas one by one
    int validCount = 0;
    ArrayList<String> errorMessages = new ArrayList<>();
    // validate the json string with PostcardTypes
    try {
      PostcardTypes.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for PostcardTypes failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with SelfMailerTypes
    try {
      SelfMailerTypes.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for SelfMailerTypes failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with LetterTypes
    try {
      LetterTypes.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for LetterTypes failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with CheckTypes
    try {
      CheckTypes.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for CheckTypes failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with AddressTypes
    try {
      AddressTypes.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for AddressTypes failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with BankAccountTypes
    try {
      BankAccountTypes.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for BankAccountTypes failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    if (validCount != 1) {
      throw new IOException(String.format("The JSON string is invalid for EventTypeId with oneOf schemas: AddressTypes, BankAccountTypes, CheckTypes, LetterTypes, PostcardTypes, SelfMailerTypes. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
    }
  }

 /**
  * Create an instance of EventTypeId given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EventTypeId
  * @throws IOException if the JSON string is invalid with respect to EventTypeId
  */
  public static EventTypeId fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventTypeId.class);
  }

 /**
  * Convert an instance of EventTypeId to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

