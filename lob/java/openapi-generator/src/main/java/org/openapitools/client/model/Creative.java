/*
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 
 *
 * The version of the OpenAPI document: 1.19.18
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CampaignItem;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Creative
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-28T10:58:18.138843-08:00[America/Los_Angeles]")
public class Creative {
  public static final String SERIALIZED_NAME_DATE_CREATED = "date_created";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_DATE_MODIFIED = "date_modified";
  @SerializedName(SERIALIZED_NAME_DATE_MODIFIED)
  private OffsetDateTime dateModified;

  public static final String SERIALIZED_NAME_DELETED = "deleted";
  @SerializedName(SERIALIZED_NAME_DELETED)
  private Boolean deleted;

  /**
   * Value is resource type.
   */
  @JsonAdapter(ObjectEnum.Adapter.class)
  public enum ObjectEnum {
    CREATIVE("creative");

    private String value;

    ObjectEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ObjectEnum fromValue(String value) {
      for (ObjectEnum b : ObjectEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ObjectEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ObjectEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ObjectEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ObjectEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ObjectEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OBJECT = "object";
  @SerializedName(SERIALIZED_NAME_OBJECT)
  private ObjectEnum _object = ObjectEnum.CREATIVE;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_TEMPLATE_PREVIEW_URLS = "template_preview_urls";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_PREVIEW_URLS)
  private String templatePreviewUrls;

  public static final String SERIALIZED_NAME_TEMPLATE_PREVIEWS = "template_previews";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_PREVIEWS)
  private List<String> templatePreviews = new ArrayList<>();

  public static final String SERIALIZED_NAME_CAMPAIGNS = "campaigns";
  @SerializedName(SERIALIZED_NAME_CAMPAIGNS)
  private List<CampaignItem> campaigns = new ArrayList<>();

  public Creative() {
  }

  public Creative dateCreated(OffsetDateTime dateCreated) {
    
    this.dateCreated = dateCreated;
    return this;
  }

   /**
   * A timestamp in ISO 8601 format of the date the resource was created.
   * @return dateCreated
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }


  public void setDateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
  }


  public Creative dateModified(OffsetDateTime dateModified) {
    
    this.dateModified = dateModified;
    return this;
  }

   /**
   * A timestamp in ISO 8601 format of the date the resource was last modified.
   * @return dateModified
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getDateModified() {
    return dateModified;
  }


  public void setDateModified(OffsetDateTime dateModified) {
    this.dateModified = dateModified;
  }


  public Creative deleted(Boolean deleted) {
    
    this.deleted = deleted;
    return this;
  }

   /**
   * Whether the resource has been deleted.
   * @return deleted
  **/
  @javax.annotation.Nonnull
  public Boolean getDeleted() {
    return deleted;
  }


  public void setDeleted(Boolean deleted) {
    this.deleted = deleted;
  }


  public Creative _object(ObjectEnum _object) {
    
    this._object = _object;
    return this;
  }

   /**
   * Value is resource type.
   * @return _object
  **/
  @javax.annotation.Nonnull
  public ObjectEnum getObject() {
    return _object;
  }


  public void setObject(ObjectEnum _object) {
    this._object = _object;
  }


  public Creative id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Unique identifier prefixed with &#x60;crv_&#x60;.
   * @return id
  **/
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public Creative templatePreviewUrls(String templatePreviewUrls) {
    
    this.templatePreviewUrls = templatePreviewUrls;
    return this;
  }

   /**
   * Preview URLs associated with a creative&#39;s artwork asset(s) if the creative uses HTML templates as assets. An empty object will be returned if no &#x60;template_preview&#x60;s have been generated.
   * @return templatePreviewUrls
  **/
  @javax.annotation.Nonnull
  public String getTemplatePreviewUrls() {
    return templatePreviewUrls;
  }


  public void setTemplatePreviewUrls(String templatePreviewUrls) {
    this.templatePreviewUrls = templatePreviewUrls;
  }


  public Creative templatePreviews(List<String> templatePreviews) {
    
    this.templatePreviews = templatePreviews;
    return this;
  }

  public Creative addTemplatePreviewsItem(String templatePreviewsItem) {
    if (this.templatePreviews == null) {
      this.templatePreviews = new ArrayList<>();
    }
    this.templatePreviews.add(templatePreviewsItem);
    return this;
  }

   /**
   * A list of template preview objects if the creative uses HTML template(s) as artwork asset(s). An empty array will be returned if no &#x60;template_preview&#x60;s have been generated for the creative.
   * @return templatePreviews
  **/
  @javax.annotation.Nonnull
  public List<String> getTemplatePreviews() {
    return templatePreviews;
  }


  public void setTemplatePreviews(List<String> templatePreviews) {
    this.templatePreviews = templatePreviews;
  }


  public Creative campaigns(List<CampaignItem> campaigns) {
    
    this.campaigns = campaigns;
    return this;
  }

  public Creative addCampaignsItem(CampaignItem campaignsItem) {
    if (this.campaigns == null) {
      this.campaigns = new ArrayList<>();
    }
    this.campaigns.add(campaignsItem);
    return this;
  }

   /**
   * Array of campaigns associated with the creative ID
   * @return campaigns
  **/
  @javax.annotation.Nonnull
  public List<CampaignItem> getCampaigns() {
    return campaigns;
  }


  public void setCampaigns(List<CampaignItem> campaigns) {
    this.campaigns = campaigns;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Creative creative = (Creative) o;
    return Objects.equals(this.dateCreated, creative.dateCreated) &&
        Objects.equals(this.dateModified, creative.dateModified) &&
        Objects.equals(this.deleted, creative.deleted) &&
        Objects.equals(this._object, creative._object) &&
        Objects.equals(this.id, creative.id) &&
        Objects.equals(this.templatePreviewUrls, creative.templatePreviewUrls) &&
        Objects.equals(this.templatePreviews, creative.templatePreviews) &&
        Objects.equals(this.campaigns, creative.campaigns);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dateCreated, dateModified, deleted, _object, id, templatePreviewUrls, templatePreviews, campaigns);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Creative {\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateModified: ").append(toIndentedString(dateModified)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    _object: ").append(toIndentedString(_object)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    templatePreviewUrls: ").append(toIndentedString(templatePreviewUrls)).append("\n");
    sb.append("    templatePreviews: ").append(toIndentedString(templatePreviews)).append("\n");
    sb.append("    campaigns: ").append(toIndentedString(campaigns)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("date_created");
    openapiFields.add("date_modified");
    openapiFields.add("deleted");
    openapiFields.add("object");
    openapiFields.add("id");
    openapiFields.add("template_preview_urls");
    openapiFields.add("template_previews");
    openapiFields.add("campaigns");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("date_created");
    openapiRequiredFields.add("date_modified");
    openapiRequiredFields.add("deleted");
    openapiRequiredFields.add("object");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("template_preview_urls");
    openapiRequiredFields.add("template_previews");
    openapiRequiredFields.add("campaigns");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Creative
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Creative.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Creative is not found in the empty JSON string", Creative.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Creative.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Creative` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Creative.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("object").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `object` to be a primitive type in the JSON string but got `%s`", jsonObj.get("object").toString()));
      }
      // validate the required field `object`
      ObjectEnum.validateJsonElement(jsonObj.get("object"));
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("template_previews") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("template_previews").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `template_previews` to be an array in the JSON string but got `%s`", jsonObj.get("template_previews").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("campaigns").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `campaigns` to be an array in the JSON string but got `%s`", jsonObj.get("campaigns").toString()));
      }

      JsonArray jsonArraycampaigns = jsonObj.getAsJsonArray("campaigns");
      // validate the required field `campaigns` (array)
      for (int i = 0; i < jsonArraycampaigns.size(); i++) {
        CampaignItem.validateJsonElement(jsonArraycampaigns.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Creative.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Creative' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Creative> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Creative.class));

       return (TypeAdapter<T>) new TypeAdapter<Creative>() {
           @Override
           public void write(JsonWriter out, Creative value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Creative read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Creative given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Creative
  * @throws IOException if the JSON string is invalid with respect to Creative
  */
  public static Creative fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Creative.class);
  }

 /**
  * Convert an instance of Creative to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

