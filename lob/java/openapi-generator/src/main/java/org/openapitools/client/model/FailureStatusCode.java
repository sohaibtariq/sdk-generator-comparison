/*
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 
 *
 * The version of the OpenAPI document: 1.19.18
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * A conventional HTTP status code:   * &#x60;401&#x60; - Authorization error with your API key or account   * &#x60;403&#x60; - Forbidden error with your API key or account   * &#x60;404&#x60; - The requested item does not exist   * &#x60;413&#x60; - Payload too large   * &#x60;422&#x60; - The query or body parameters did not pass validation   * &#x60;429&#x60; - Too many requests have been sent with an API key in a given amount of time   * &#x60;500&#x60; - An internal server error occurred, please contact support@lob.com 
 */
@JsonAdapter(FailureStatusCode.Adapter.class)
public enum FailureStatusCode {
  
  NUMBER_401(401),
  
  NUMBER_403(403),
  
  NUMBER_404(404),
  
  NUMBER_413(413),
  
  NUMBER_422(422),
  
  NUMBER_429(429),
  
  NUMBER_500(500);

  private Integer value;

  FailureStatusCode(Integer value) {
    this.value = value;
  }

  public Integer getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static FailureStatusCode fromValue(Integer value) {
    for (FailureStatusCode b : FailureStatusCode.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<FailureStatusCode> {
    @Override
    public void write(final JsonWriter jsonWriter, final FailureStatusCode enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public FailureStatusCode read(final JsonReader jsonReader) throws IOException {
      Integer value = jsonReader.nextInt();
      return FailureStatusCode.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    Integer value = jsonElement.getAsInt();
    FailureStatusCode.fromValue(value);
  }
}

