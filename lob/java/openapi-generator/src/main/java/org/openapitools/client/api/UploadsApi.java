/*
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 
 *
 * The version of the OpenAPI document: 1.19.18
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Error;
import org.openapitools.client.model.ExportRetrieve200Response;
import java.io.File;
import org.openapitools.client.model.HTTPValidationError;
import org.openapitools.client.model.ReportRetrieve200Response;
import org.openapitools.client.model.ReportRetrieve403Response;
import org.openapitools.client.model.Upload;
import org.openapitools.client.model.UploadCreateExport;
import org.openapitools.client.model.UploadExportCreate4XXResponse;
import org.openapitools.client.model.UploadExportCreateRequest;
import org.openapitools.client.model.UploadFile;
import org.openapitools.client.model.UploadUpdatable;
import org.openapitools.client.model.UploadWritable;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UploadsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UploadsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UploadsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for exportRetrieve
     * @param uplId ID of the upload (required)
     * @param exId ID of the export (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an export object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportRetrieveCall(String uplId, String exId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/uploads/{upl_id}/exports/{ex_id}"
            .replace("{" + "upl_id" + "}", localVarApiClient.escapeString(uplId.toString()))
            .replace("{" + "ex_id" + "}", localVarApiClient.escapeString(exId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportRetrieveValidateBeforeCall(String uplId, String exId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uplId' is set
        if (uplId == null) {
            throw new ApiException("Missing the required parameter 'uplId' when calling exportRetrieve(Async)");
        }

        // verify the required parameter 'exId' is set
        if (exId == null) {
            throw new ApiException("Missing the required parameter 'exId' when calling exportRetrieve(Async)");
        }

        return exportRetrieveCall(uplId, exId, _callback);

    }

    /**
     * Retrieve Export
     * Retrieves the details of an existing export. You need only supply the unique export identifier that was returned upon export creation. If you try retrieving an export immediately after creating one (i.e., before we&#39;re done processing the export), you will get back an export object with &#x60;state &#x3D; in_progress&#x60;.
     * @param uplId ID of the upload (required)
     * @param exId ID of the export (required)
     * @return ExportRetrieve200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an export object </td><td>  -  </td></tr>
     </table>
     */
    public ExportRetrieve200Response exportRetrieve(String uplId, String exId) throws ApiException {
        ApiResponse<ExportRetrieve200Response> localVarResp = exportRetrieveWithHttpInfo(uplId, exId);
        return localVarResp.getData();
    }

    /**
     * Retrieve Export
     * Retrieves the details of an existing export. You need only supply the unique export identifier that was returned upon export creation. If you try retrieving an export immediately after creating one (i.e., before we&#39;re done processing the export), you will get back an export object with &#x60;state &#x3D; in_progress&#x60;.
     * @param uplId ID of the upload (required)
     * @param exId ID of the export (required)
     * @return ApiResponse&lt;ExportRetrieve200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an export object </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExportRetrieve200Response> exportRetrieveWithHttpInfo(String uplId, String exId) throws ApiException {
        okhttp3.Call localVarCall = exportRetrieveValidateBeforeCall(uplId, exId, null);
        Type localVarReturnType = new TypeToken<ExportRetrieve200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve Export (asynchronously)
     * Retrieves the details of an existing export. You need only supply the unique export identifier that was returned upon export creation. If you try retrieving an export immediately after creating one (i.e., before we&#39;re done processing the export), you will get back an export object with &#x60;state &#x3D; in_progress&#x60;.
     * @param uplId ID of the upload (required)
     * @param exId ID of the export (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an export object </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportRetrieveAsync(String uplId, String exId, final ApiCallback<ExportRetrieve200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportRetrieveValidateBeforeCall(uplId, exId, _callback);
        Type localVarReturnType = new TypeToken<ExportRetrieve200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportRetrieve
     * @param uplId ID of the upload (required)
     * @param status The status of line items to filter and retrieve. By default all line items are returned. (optional)
     * @param limit How many results to return. (optional, default to 100)
     * @param offset An integer that designates the offset at which to begin returning results. Defaults to 0. (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an report object </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportRetrieveCall(String uplId, String status, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/uploads/{upl_id}/report"
            .replace("{" + "upl_id" + "}", localVarApiClient.escapeString(uplId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportRetrieveValidateBeforeCall(String uplId, String status, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uplId' is set
        if (uplId == null) {
            throw new ApiException("Missing the required parameter 'uplId' when calling reportRetrieve(Async)");
        }

        return reportRetrieveCall(uplId, status, limit, offset, _callback);

    }

    /**
     * Retrieve Line Item Report
     * Retrieves the line item data for each row from the csv file associated with the upload id record. NOTE: This endpoint is currently feature flagged. Please reach out to Lob&#39;s support team if you  would like access to this API endpoint.
     * @param uplId ID of the upload (required)
     * @param status The status of line items to filter and retrieve. By default all line items are returned. (optional)
     * @param limit How many results to return. (optional, default to 100)
     * @param offset An integer that designates the offset at which to begin returning results. Defaults to 0. (optional, default to 0)
     * @return ReportRetrieve200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an report object </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found Error </td><td>  -  </td></tr>
     </table>
     */
    public ReportRetrieve200Response reportRetrieve(String uplId, String status, Integer limit, Integer offset) throws ApiException {
        ApiResponse<ReportRetrieve200Response> localVarResp = reportRetrieveWithHttpInfo(uplId, status, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Retrieve Line Item Report
     * Retrieves the line item data for each row from the csv file associated with the upload id record. NOTE: This endpoint is currently feature flagged. Please reach out to Lob&#39;s support team if you  would like access to this API endpoint.
     * @param uplId ID of the upload (required)
     * @param status The status of line items to filter and retrieve. By default all line items are returned. (optional)
     * @param limit How many results to return. (optional, default to 100)
     * @param offset An integer that designates the offset at which to begin returning results. Defaults to 0. (optional, default to 0)
     * @return ApiResponse&lt;ReportRetrieve200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an report object </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReportRetrieve200Response> reportRetrieveWithHttpInfo(String uplId, String status, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = reportRetrieveValidateBeforeCall(uplId, status, limit, offset, null);
        Type localVarReturnType = new TypeToken<ReportRetrieve200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve Line Item Report (asynchronously)
     * Retrieves the line item data for each row from the csv file associated with the upload id record. NOTE: This endpoint is currently feature flagged. Please reach out to Lob&#39;s support team if you  would like access to this API endpoint.
     * @param uplId ID of the upload (required)
     * @param status The status of line items to filter and retrieve. By default all line items are returned. (optional)
     * @param limit How many results to return. (optional, default to 100)
     * @param offset An integer that designates the offset at which to begin returning results. Defaults to 0. (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an report object </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden Error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportRetrieveAsync(String uplId, String status, Integer limit, Integer offset, final ApiCallback<ReportRetrieve200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportRetrieveValidateBeforeCall(uplId, status, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<ReportRetrieve200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadCreate
     * @param uploadWritable  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Upload created successfully </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadCreateCall(UploadWritable uploadWritable, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = uploadWritable;

        // create path and map variables
        String localVarPath = "/uploads";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadCreateValidateBeforeCall(UploadWritable uploadWritable, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uploadWritable' is set
        if (uploadWritable == null) {
            throw new ApiException("Missing the required parameter 'uploadWritable' when calling uploadCreate(Async)");
        }

        return uploadCreateCall(uploadWritable, _callback);

    }

    /**
     * Create
     * Creates a new upload with the provided properties.
     * @param uploadWritable  (required)
     * @return Upload
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Upload created successfully </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Upload uploadCreate(UploadWritable uploadWritable) throws ApiException {
        ApiResponse<Upload> localVarResp = uploadCreateWithHttpInfo(uploadWritable);
        return localVarResp.getData();
    }

    /**
     * Create
     * Creates a new upload with the provided properties.
     * @param uploadWritable  (required)
     * @return ApiResponse&lt;Upload&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Upload created successfully </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Upload> uploadCreateWithHttpInfo(UploadWritable uploadWritable) throws ApiException {
        okhttp3.Call localVarCall = uploadCreateValidateBeforeCall(uploadWritable, null);
        Type localVarReturnType = new TypeToken<Upload>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create (asynchronously)
     * Creates a new upload with the provided properties.
     * @param uploadWritable  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Upload created successfully </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadCreateAsync(UploadWritable uploadWritable, final ApiCallback<Upload> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadCreateValidateBeforeCall(uploadWritable, _callback);
        Type localVarReturnType = new TypeToken<Upload>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadDelete
     * @param uplId id of the upload (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadDeleteCall(String uplId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/uploads/{upl_id}"
            .replace("{" + "upl_id" + "}", localVarApiClient.escapeString(uplId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadDeleteValidateBeforeCall(String uplId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uplId' is set
        if (uplId == null) {
            throw new ApiException("Missing the required parameter 'uplId' when calling uploadDelete(Async)");
        }

        return uploadDeleteCall(uplId, _callback);

    }

    /**
     * Delete
     * Delete an existing upload. You need only supply the unique identifier that was returned upon upload creation.
     * @param uplId id of the upload (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public void uploadDelete(String uplId) throws ApiException {
        uploadDeleteWithHttpInfo(uplId);
    }

    /**
     * Delete
     * Delete an existing upload. You need only supply the unique identifier that was returned upon upload creation.
     * @param uplId id of the upload (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> uploadDeleteWithHttpInfo(String uplId) throws ApiException {
        okhttp3.Call localVarCall = uploadDeleteValidateBeforeCall(uplId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete (asynchronously)
     * Delete an existing upload. You need only supply the unique identifier that was returned upon upload creation.
     * @param uplId id of the upload (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadDeleteAsync(String uplId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadDeleteValidateBeforeCall(uplId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadExportCreate
     * @param uplId ID of the upload (required)
     * @param uploadExportCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Export Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadExportCreateCall(String uplId, UploadExportCreateRequest uploadExportCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = uploadExportCreateRequest;

        // create path and map variables
        String localVarPath = "/uploads/{upl_id}/exports"
            .replace("{" + "upl_id" + "}", localVarApiClient.escapeString(uplId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadExportCreateValidateBeforeCall(String uplId, UploadExportCreateRequest uploadExportCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uplId' is set
        if (uplId == null) {
            throw new ApiException("Missing the required parameter 'uplId' when calling uploadExportCreate(Async)");
        }

        // verify the required parameter 'uploadExportCreateRequest' is set
        if (uploadExportCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'uploadExportCreateRequest' when calling uploadExportCreate(Async)");
        }

        return uploadExportCreateCall(uplId, uploadExportCreateRequest, _callback);

    }

    /**
     * Create Export
     * Campaign Exports can help you understand exactly which records in a campaign could not be created. By initiating and retrieving an export, you will get row-by-row errors for your campaign. For a step-by-step walkthrough of creating a campaign and exporting failures, see our [Campaigns Guide](https://help.lob.com/print-and-mail/building-a-mail-strategy/campaign-or-triggered-sends/launch-your-first-campaign).  Create an export file associated with an upload.
     * @param uplId ID of the upload (required)
     * @param uploadExportCreateRequest  (required)
     * @return UploadCreateExport
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Export Error </td><td>  -  </td></tr>
     </table>
     */
    public UploadCreateExport uploadExportCreate(String uplId, UploadExportCreateRequest uploadExportCreateRequest) throws ApiException {
        ApiResponse<UploadCreateExport> localVarResp = uploadExportCreateWithHttpInfo(uplId, uploadExportCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create Export
     * Campaign Exports can help you understand exactly which records in a campaign could not be created. By initiating and retrieving an export, you will get row-by-row errors for your campaign. For a step-by-step walkthrough of creating a campaign and exporting failures, see our [Campaigns Guide](https://help.lob.com/print-and-mail/building-a-mail-strategy/campaign-or-triggered-sends/launch-your-first-campaign).  Create an export file associated with an upload.
     * @param uplId ID of the upload (required)
     * @param uploadExportCreateRequest  (required)
     * @return ApiResponse&lt;UploadCreateExport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Export Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UploadCreateExport> uploadExportCreateWithHttpInfo(String uplId, UploadExportCreateRequest uploadExportCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = uploadExportCreateValidateBeforeCall(uplId, uploadExportCreateRequest, null);
        Type localVarReturnType = new TypeToken<UploadCreateExport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Export (asynchronously)
     * Campaign Exports can help you understand exactly which records in a campaign could not be created. By initiating and retrieving an export, you will get row-by-row errors for your campaign. For a step-by-step walkthrough of creating a campaign and exporting failures, see our [Campaigns Guide](https://help.lob.com/print-and-mail/building-a-mail-strategy/campaign-or-triggered-sends/launch-your-first-campaign).  Create an export file associated with an upload.
     * @param uplId ID of the upload (required)
     * @param uploadExportCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Create Export Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadExportCreateAsync(String uplId, UploadExportCreateRequest uploadExportCreateRequest, final ApiCallback<UploadCreateExport> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadExportCreateValidateBeforeCall(uplId, uploadExportCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<UploadCreateExport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadFile
     * @param uplId ID of the upload (required)
     * @param _file  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadFileCall(String uplId, File _file, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/uploads/{upl_id}/file"
            .replace("{" + "upl_id" + "}", localVarApiClient.escapeString(uplId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadFileValidateBeforeCall(String uplId, File _file, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uplId' is set
        if (uplId == null) {
            throw new ApiException("Missing the required parameter 'uplId' when calling uploadFile(Async)");
        }

        return uploadFileCall(uplId, _file, _callback);

    }

    /**
     * Upload file
     * Upload an [audience file](https://help.lob.com/print-and-mail/building-a-mail-strategy/campaign-or-triggered-sends/campaign-audience-guide) and associate it with an upload.
     * @param uplId ID of the upload (required)
     * @param _file  (optional)
     * @return UploadFile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public UploadFile uploadFile(String uplId, File _file) throws ApiException {
        ApiResponse<UploadFile> localVarResp = uploadFileWithHttpInfo(uplId, _file);
        return localVarResp.getData();
    }

    /**
     * Upload file
     * Upload an [audience file](https://help.lob.com/print-and-mail/building-a-mail-strategy/campaign-or-triggered-sends/campaign-audience-guide) and associate it with an upload.
     * @param uplId ID of the upload (required)
     * @param _file  (optional)
     * @return ApiResponse&lt;UploadFile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UploadFile> uploadFileWithHttpInfo(String uplId, File _file) throws ApiException {
        okhttp3.Call localVarCall = uploadFileValidateBeforeCall(uplId, _file, null);
        Type localVarReturnType = new TypeToken<UploadFile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload file (asynchronously)
     * Upload an [audience file](https://help.lob.com/print-and-mail/building-a-mail-strategy/campaign-or-triggered-sends/campaign-audience-guide) and associate it with an upload.
     * @param uplId ID of the upload (required)
     * @param _file  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadFileAsync(String uplId, File _file, final ApiCallback<UploadFile> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadFileValidateBeforeCall(uplId, _file, _callback);
        Type localVarReturnType = new TypeToken<UploadFile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadRetrieve
     * @param uplId id of the upload (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an upload object </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found Error </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadRetrieveCall(String uplId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/uploads/{upl_id}"
            .replace("{" + "upl_id" + "}", localVarApiClient.escapeString(uplId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadRetrieveValidateBeforeCall(String uplId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uplId' is set
        if (uplId == null) {
            throw new ApiException("Missing the required parameter 'uplId' when calling uploadRetrieve(Async)");
        }

        return uploadRetrieveCall(uplId, _callback);

    }

    /**
     * Retrieve
     * Retrieves the details of an existing upload. You need only supply the unique upload identifier that was returned upon upload creation.
     * @param uplId id of the upload (required)
     * @return Upload
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an upload object </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found Error </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Upload uploadRetrieve(String uplId) throws ApiException {
        ApiResponse<Upload> localVarResp = uploadRetrieveWithHttpInfo(uplId);
        return localVarResp.getData();
    }

    /**
     * Retrieve
     * Retrieves the details of an existing upload. You need only supply the unique upload identifier that was returned upon upload creation.
     * @param uplId id of the upload (required)
     * @return ApiResponse&lt;Upload&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an upload object </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found Error </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Upload> uploadRetrieveWithHttpInfo(String uplId) throws ApiException {
        okhttp3.Call localVarCall = uploadRetrieveValidateBeforeCall(uplId, null);
        Type localVarReturnType = new TypeToken<Upload>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve (asynchronously)
     * Retrieves the details of an existing upload. You need only supply the unique upload identifier that was returned upon upload creation.
     * @param uplId id of the upload (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an upload object </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found Error </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadRetrieveAsync(String uplId, final ApiCallback<Upload> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadRetrieveValidateBeforeCall(uplId, _callback);
        Type localVarReturnType = new TypeToken<Upload>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadUpdate
     * @param uplId id of the upload (required)
     * @param uploadUpdatable  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an upload object </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found Error </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadUpdateCall(String uplId, UploadUpdatable uploadUpdatable, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = uploadUpdatable;

        // create path and map variables
        String localVarPath = "/uploads/{upl_id}"
            .replace("{" + "upl_id" + "}", localVarApiClient.escapeString(uplId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadUpdateValidateBeforeCall(String uplId, UploadUpdatable uploadUpdatable, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uplId' is set
        if (uplId == null) {
            throw new ApiException("Missing the required parameter 'uplId' when calling uploadUpdate(Async)");
        }

        // verify the required parameter 'uploadUpdatable' is set
        if (uploadUpdatable == null) {
            throw new ApiException("Missing the required parameter 'uploadUpdatable' when calling uploadUpdate(Async)");
        }

        return uploadUpdateCall(uplId, uploadUpdatable, _callback);

    }

    /**
     * Update
     * Update the details of an existing upload. You need only supply the unique identifier that was returned upon upload creation.
     * @param uplId id of the upload (required)
     * @param uploadUpdatable  (required)
     * @return Upload
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an upload object </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found Error </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Upload uploadUpdate(String uplId, UploadUpdatable uploadUpdatable) throws ApiException {
        ApiResponse<Upload> localVarResp = uploadUpdateWithHttpInfo(uplId, uploadUpdatable);
        return localVarResp.getData();
    }

    /**
     * Update
     * Update the details of an existing upload. You need only supply the unique identifier that was returned upon upload creation.
     * @param uplId id of the upload (required)
     * @param uploadUpdatable  (required)
     * @return ApiResponse&lt;Upload&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an upload object </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found Error </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Upload> uploadUpdateWithHttpInfo(String uplId, UploadUpdatable uploadUpdatable) throws ApiException {
        okhttp3.Call localVarCall = uploadUpdateValidateBeforeCall(uplId, uploadUpdatable, null);
        Type localVarReturnType = new TypeToken<Upload>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update (asynchronously)
     * Update the details of an existing upload. You need only supply the unique identifier that was returned upon upload creation.
     * @param uplId id of the upload (required)
     * @param uploadUpdatable  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an upload object </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found Error </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadUpdateAsync(String uplId, UploadUpdatable uploadUpdatable, final ApiCallback<Upload> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadUpdateValidateBeforeCall(uplId, uploadUpdatable, _callback);
        Type localVarReturnType = new TypeToken<Upload>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadsList
     * @param campaignId id of the campaign (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of matching uploads. Each entry in the array is a separate upload. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadsListCall(String campaignId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/uploads";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (campaignId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("campaignId", campaignId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadsListValidateBeforeCall(String campaignId, final ApiCallback _callback) throws ApiException {
        return uploadsListCall(campaignId, _callback);

    }

    /**
     * List
     * Returns a list of your uploads. Optionally, filter uploads by campaign.
     * @param campaignId id of the campaign (optional)
     * @return List&lt;Upload&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of matching uploads. Each entry in the array is a separate upload. </td><td>  -  </td></tr>
     </table>
     */
    public List<Upload> uploadsList(String campaignId) throws ApiException {
        ApiResponse<List<Upload>> localVarResp = uploadsListWithHttpInfo(campaignId);
        return localVarResp.getData();
    }

    /**
     * List
     * Returns a list of your uploads. Optionally, filter uploads by campaign.
     * @param campaignId id of the campaign (optional)
     * @return ApiResponse&lt;List&lt;Upload&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of matching uploads. Each entry in the array is a separate upload. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Upload>> uploadsListWithHttpInfo(String campaignId) throws ApiException {
        okhttp3.Call localVarCall = uploadsListValidateBeforeCall(campaignId, null);
        Type localVarReturnType = new TypeToken<List<Upload>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List (asynchronously)
     * Returns a list of your uploads. Optionally, filter uploads by campaign.
     * @param campaignId id of the campaign (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of matching uploads. Each entry in the array is a separate upload. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadsListAsync(String campaignId, final ApiCallback<List<Upload>> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadsListValidateBeforeCall(campaignId, _callback);
        Type localVarReturnType = new TypeToken<List<Upload>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
