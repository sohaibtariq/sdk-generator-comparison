/*
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 
 *
 * The version of the OpenAPI document: 1.19.18
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The mapping of column headers in your file to Lob-required fields for the resource created. See our &lt;a href&#x3D;\&quot;https://help.lob.com/print-and-mail/building-a-mail-strategy/campaign-or-triggered-sends/campaign-audience-guide#required-columns-2\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Campaign Audience Guide&lt;/a&gt; for additional details.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-28T10:58:18.138843-08:00[America/Los_Angeles]")
public class RequiredAddressColumnMapping {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ADDRESS_LINE1 = "address_line1";
  @SerializedName(SERIALIZED_NAME_ADDRESS_LINE1)
  private String addressLine1;

  public static final String SERIALIZED_NAME_ADDRESS_CITY = "address_city";
  @SerializedName(SERIALIZED_NAME_ADDRESS_CITY)
  private String addressCity;

  public static final String SERIALIZED_NAME_ADDRESS_STATE = "address_state";
  @SerializedName(SERIALIZED_NAME_ADDRESS_STATE)
  private String addressState;

  public static final String SERIALIZED_NAME_ADDRESS_ZIP = "address_zip";
  @SerializedName(SERIALIZED_NAME_ADDRESS_ZIP)
  private String addressZip;

  public RequiredAddressColumnMapping() {
  }

  public RequiredAddressColumnMapping name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The column header from the csv file that should be mapped to the required field &#x60;name&#x60;
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public RequiredAddressColumnMapping addressLine1(String addressLine1) {
    
    this.addressLine1 = addressLine1;
    return this;
  }

   /**
   * The column header from the csv file that should be mapped to the required field &#x60;address_line1&#x60;
   * @return addressLine1
  **/
  @javax.annotation.Nullable
  public String getAddressLine1() {
    return addressLine1;
  }


  public void setAddressLine1(String addressLine1) {
    this.addressLine1 = addressLine1;
  }


  public RequiredAddressColumnMapping addressCity(String addressCity) {
    
    this.addressCity = addressCity;
    return this;
  }

   /**
   * The column header from the csv file that should be mapped to the required field &#x60;address_city&#x60;
   * @return addressCity
  **/
  @javax.annotation.Nullable
  public String getAddressCity() {
    return addressCity;
  }


  public void setAddressCity(String addressCity) {
    this.addressCity = addressCity;
  }


  public RequiredAddressColumnMapping addressState(String addressState) {
    
    this.addressState = addressState;
    return this;
  }

   /**
   * The column header from the csv file that should be mapped to the required field &#x60;address_state&#x60;
   * @return addressState
  **/
  @javax.annotation.Nullable
  public String getAddressState() {
    return addressState;
  }


  public void setAddressState(String addressState) {
    this.addressState = addressState;
  }


  public RequiredAddressColumnMapping addressZip(String addressZip) {
    
    this.addressZip = addressZip;
    return this;
  }

   /**
   * The column header from the csv file that should be mapped to the required field &#x60;address_zip&#x60;
   * @return addressZip
  **/
  @javax.annotation.Nullable
  public String getAddressZip() {
    return addressZip;
  }


  public void setAddressZip(String addressZip) {
    this.addressZip = addressZip;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RequiredAddressColumnMapping requiredAddressColumnMapping = (RequiredAddressColumnMapping) o;
    return Objects.equals(this.name, requiredAddressColumnMapping.name) &&
        Objects.equals(this.addressLine1, requiredAddressColumnMapping.addressLine1) &&
        Objects.equals(this.addressCity, requiredAddressColumnMapping.addressCity) &&
        Objects.equals(this.addressState, requiredAddressColumnMapping.addressState) &&
        Objects.equals(this.addressZip, requiredAddressColumnMapping.addressZip);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, addressLine1, addressCity, addressState, addressZip);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RequiredAddressColumnMapping {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    addressLine1: ").append(toIndentedString(addressLine1)).append("\n");
    sb.append("    addressCity: ").append(toIndentedString(addressCity)).append("\n");
    sb.append("    addressState: ").append(toIndentedString(addressState)).append("\n");
    sb.append("    addressZip: ").append(toIndentedString(addressZip)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("address_line1");
    openapiFields.add("address_city");
    openapiFields.add("address_state");
    openapiFields.add("address_zip");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("address_line1");
    openapiRequiredFields.add("address_city");
    openapiRequiredFields.add("address_state");
    openapiRequiredFields.add("address_zip");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to RequiredAddressColumnMapping
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RequiredAddressColumnMapping.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RequiredAddressColumnMapping is not found in the empty JSON string", RequiredAddressColumnMapping.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RequiredAddressColumnMapping.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RequiredAddressColumnMapping` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RequiredAddressColumnMapping.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("address_line1") != null && !jsonObj.get("address_line1").isJsonNull()) && !jsonObj.get("address_line1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address_line1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address_line1").toString()));
      }
      if ((jsonObj.get("address_city") != null && !jsonObj.get("address_city").isJsonNull()) && !jsonObj.get("address_city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address_city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address_city").toString()));
      }
      if ((jsonObj.get("address_state") != null && !jsonObj.get("address_state").isJsonNull()) && !jsonObj.get("address_state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address_state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address_state").toString()));
      }
      if ((jsonObj.get("address_zip") != null && !jsonObj.get("address_zip").isJsonNull()) && !jsonObj.get("address_zip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address_zip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address_zip").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RequiredAddressColumnMapping.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RequiredAddressColumnMapping' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RequiredAddressColumnMapping> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RequiredAddressColumnMapping.class));

       return (TypeAdapter<T>) new TypeAdapter<RequiredAddressColumnMapping>() {
           @Override
           public void write(JsonWriter out, RequiredAddressColumnMapping value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RequiredAddressColumnMapping read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RequiredAddressColumnMapping given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RequiredAddressColumnMapping
  * @throws IOException if the JSON string is invalid with respect to RequiredAddressColumnMapping
  */
  public static RequiredAddressColumnMapping fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RequiredAddressColumnMapping.class);
  }

 /**
  * Convert an instance of RequiredAddressColumnMapping to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

