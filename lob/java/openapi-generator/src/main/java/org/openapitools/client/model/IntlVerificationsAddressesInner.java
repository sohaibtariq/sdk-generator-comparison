/*
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 
 *
 * The version of the OpenAPI document: 1.19.18
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.ErrorError;
import org.openapitools.client.model.IntlComponents;
import org.openapitools.client.model.IntlVerification;
import org.openapitools.jackson.nullable.JsonNullable;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-28T10:58:18.138843-08:00[America/Los_Angeles]")
public class IntlVerificationsAddressesInner extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(IntlVerificationsAddressesInner.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!IntlVerificationsAddressesInner.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'IntlVerificationsAddressesInner' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<IntlVerification> adapterIntlVerification = gson.getDelegateAdapter(this, TypeToken.get(IntlVerification.class));
            final TypeAdapter<Error> adapterError = gson.getDelegateAdapter(this, TypeToken.get(Error.class));

            return (TypeAdapter<T>) new TypeAdapter<IntlVerificationsAddressesInner>() {
                @Override
                public void write(JsonWriter out, IntlVerificationsAddressesInner value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `IntlVerification`
                    if (value.getActualInstance() instanceof IntlVerification) {
                      JsonElement element = adapterIntlVerification.toJsonTree((IntlVerification)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `Error`
                    if (value.getActualInstance() instanceof Error) {
                      JsonElement element = adapterError.toJsonTree((Error)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: Error, IntlVerification");
                }

                @Override
                public IntlVerificationsAddressesInner read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize IntlVerification
                    try {
                      // validate the JSON object to see if any exception is thrown
                      IntlVerification.validateJsonElement(jsonElement);
                      actualAdapter = adapterIntlVerification;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'IntlVerification'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for IntlVerification failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'IntlVerification'", e);
                    }
                    // deserialize Error
                    try {
                      // validate the JSON object to see if any exception is thrown
                      Error.validateJsonElement(jsonElement);
                      actualAdapter = adapterError;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'Error'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for Error failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'Error'", e);
                    }

                    if (match == 1) {
                        IntlVerificationsAddressesInner ret = new IntlVerificationsAddressesInner();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for IntlVerificationsAddressesInner: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public IntlVerificationsAddressesInner() {
        super("oneOf", Boolean.FALSE);
    }

    public IntlVerificationsAddressesInner(Error o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public IntlVerificationsAddressesInner(IntlVerification o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("IntlVerification", IntlVerification.class);
        schemas.put("Error", Error.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return IntlVerificationsAddressesInner.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * Error, IntlVerification
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof IntlVerification) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof Error) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be Error, IntlVerification");
    }

    /**
     * Get the actual instance, which can be the following:
     * Error, IntlVerification
     *
     * @return The actual instance (Error, IntlVerification)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `IntlVerification`. If the actual instance is not `IntlVerification`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `IntlVerification`
     * @throws ClassCastException if the instance is not `IntlVerification`
     */
    public IntlVerification getIntlVerification() throws ClassCastException {
        return (IntlVerification)super.getActualInstance();
    }
    /**
     * Get the actual instance of `Error`. If the actual instance is not `Error`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Error`
     * @throws ClassCastException if the instance is not `Error`
     */
    public Error getError() throws ClassCastException {
        return (Error)super.getActualInstance();
    }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to IntlVerificationsAddressesInner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    // validate oneOf schemas one by one
    int validCount = 0;
    ArrayList<String> errorMessages = new ArrayList<>();
    // validate the json string with IntlVerification
    try {
      IntlVerification.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for IntlVerification failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with Error
    try {
      Error.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for Error failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    if (validCount != 1) {
      throw new IOException(String.format("The JSON string is invalid for IntlVerificationsAddressesInner with oneOf schemas: Error, IntlVerification. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
    }
  }

 /**
  * Create an instance of IntlVerificationsAddressesInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of IntlVerificationsAddressesInner
  * @throws IOException if the JSON string is invalid with respect to IntlVerificationsAddressesInner
  */
  public static IntlVerificationsAddressesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IntlVerificationsAddressesInner.class);
  }

 /**
  * Convert an instance of IntlVerificationsAddressesInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

