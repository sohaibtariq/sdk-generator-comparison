/*
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 
 *
 * The version of the OpenAPI document: 1.19.18
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.CmpScheduleType;
import org.openapitools.client.model.CmpUseType;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CampaignWritable
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-28T10:58:18.138843-08:00[America/Los_Angeles]")
public class CampaignWritable {
  public static final String SERIALIZED_NAME_BILLING_GROUP_ID = "billing_group_id";
  @SerializedName(SERIALIZED_NAME_BILLING_GROUP_ID)
  private String billingGroupId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SCHEDULE_TYPE = "schedule_type";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_TYPE)
  private CmpScheduleType scheduleType;

  public static final String SERIALIZED_NAME_TARGET_DELIVERY_DATE = "target_delivery_date";
  @SerializedName(SERIALIZED_NAME_TARGET_DELIVERY_DATE)
  private OffsetDateTime targetDeliveryDate;

  public static final String SERIALIZED_NAME_SEND_DATE = "send_date";
  @SerializedName(SERIALIZED_NAME_SEND_DATE)
  private OffsetDateTime sendDate;

  public static final String SERIALIZED_NAME_CANCEL_WINDOW_CAMPAIGN_MINUTES = "cancel_window_campaign_minutes";
  @SerializedName(SERIALIZED_NAME_CANCEL_WINDOW_CAMPAIGN_MINUTES)
  private Integer cancelWindowCampaignMinutes;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Map<String, String> metadata = new HashMap<>();

  public static final String SERIALIZED_NAME_USE_TYPE = "use_type";
  @SerializedName(SERIALIZED_NAME_USE_TYPE)
  private CmpUseType useType;

  public static final String SERIALIZED_NAME_AUTO_CANCEL_IF_NCOA = "auto_cancel_if_ncoa";
  @SerializedName(SERIALIZED_NAME_AUTO_CANCEL_IF_NCOA)
  private Boolean autoCancelIfNcoa;

  public CampaignWritable() {
  }

  public CampaignWritable billingGroupId(String billingGroupId) {
    
    this.billingGroupId = billingGroupId;
    return this;
  }

   /**
   * Unique identifier prefixed with &#x60;bg_&#x60;.
   * @return billingGroupId
  **/
  @javax.annotation.Nullable
  public String getBillingGroupId() {
    return billingGroupId;
  }


  public void setBillingGroupId(String billingGroupId) {
    this.billingGroupId = billingGroupId;
  }


  public CampaignWritable name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Name of the campaign.
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public CampaignWritable description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * An internal description that identifies this resource. Must be no longer than 255 characters. 
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public CampaignWritable scheduleType(CmpScheduleType scheduleType) {
    
    this.scheduleType = scheduleType;
    return this;
  }

   /**
   * Get scheduleType
   * @return scheduleType
  **/
  @javax.annotation.Nonnull
  public CmpScheduleType getScheduleType() {
    return scheduleType;
  }


  public void setScheduleType(CmpScheduleType scheduleType) {
    this.scheduleType = scheduleType;
  }


  public CampaignWritable targetDeliveryDate(OffsetDateTime targetDeliveryDate) {
    
    this.targetDeliveryDate = targetDeliveryDate;
    return this;
  }

   /**
   * If &#x60;schedule_type&#x60; is &#x60;target_delivery_date&#x60;, provide a targeted delivery date for mail pieces in this campaign.
   * @return targetDeliveryDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getTargetDeliveryDate() {
    return targetDeliveryDate;
  }


  public void setTargetDeliveryDate(OffsetDateTime targetDeliveryDate) {
    this.targetDeliveryDate = targetDeliveryDate;
  }


  public CampaignWritable sendDate(OffsetDateTime sendDate) {
    
    this.sendDate = sendDate;
    return this;
  }

   /**
   * If &#x60;schedule_type&#x60; is &#x60;scheduled_send_date&#x60;, provide a date to send this campaign.
   * @return sendDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getSendDate() {
    return sendDate;
  }


  public void setSendDate(OffsetDateTime sendDate) {
    this.sendDate = sendDate;
  }


  public CampaignWritable cancelWindowCampaignMinutes(Integer cancelWindowCampaignMinutes) {
    
    this.cancelWindowCampaignMinutes = cancelWindowCampaignMinutes;
    return this;
  }

   /**
   * A window, in minutes, within which the campaign can be canceled.
   * @return cancelWindowCampaignMinutes
  **/
  @javax.annotation.Nullable
  public Integer getCancelWindowCampaignMinutes() {
    return cancelWindowCampaignMinutes;
  }


  public void setCancelWindowCampaignMinutes(Integer cancelWindowCampaignMinutes) {
    this.cancelWindowCampaignMinutes = cancelWindowCampaignMinutes;
  }


  public CampaignWritable metadata(Map<String, String> metadata) {
    
    this.metadata = metadata;
    return this;
  }

  public CampaignWritable putMetadataItem(String key, String metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }

   /**
   * Use metadata to store custom information for tagging and labeling back to your internal systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters and values must be at most 500 characters. Neither can contain the characters &#x60;\&quot;&#x60; and &#x60;\\&#x60;. i.e. &#39;{\&quot;customer_id\&quot; : \&quot;NEWYORK2015\&quot;}&#39; Nested objects are not supported.  See [Metadata](#section/Metadata) for more information.
   * @return metadata
  **/
  @javax.annotation.Nullable
  public Map<String, String> getMetadata() {
    return metadata;
  }


  public void setMetadata(Map<String, String> metadata) {
    this.metadata = metadata;
  }


  public CampaignWritable useType(CmpUseType useType) {
    
    this.useType = useType;
    return this;
  }

   /**
   * Get useType
   * @return useType
  **/
  @javax.annotation.Nullable
  public CmpUseType getUseType() {
    return useType;
  }


  public void setUseType(CmpUseType useType) {
    this.useType = useType;
  }


  public CampaignWritable autoCancelIfNcoa(Boolean autoCancelIfNcoa) {
    
    this.autoCancelIfNcoa = autoCancelIfNcoa;
    return this;
  }

   /**
   * Whether or not a mail piece should be automatically canceled and not sent if the address is updated via NCOA.
   * @return autoCancelIfNcoa
  **/
  @javax.annotation.Nullable
  public Boolean getAutoCancelIfNcoa() {
    return autoCancelIfNcoa;
  }


  public void setAutoCancelIfNcoa(Boolean autoCancelIfNcoa) {
    this.autoCancelIfNcoa = autoCancelIfNcoa;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CampaignWritable campaignWritable = (CampaignWritable) o;
    return Objects.equals(this.billingGroupId, campaignWritable.billingGroupId) &&
        Objects.equals(this.name, campaignWritable.name) &&
        Objects.equals(this.description, campaignWritable.description) &&
        Objects.equals(this.scheduleType, campaignWritable.scheduleType) &&
        Objects.equals(this.targetDeliveryDate, campaignWritable.targetDeliveryDate) &&
        Objects.equals(this.sendDate, campaignWritable.sendDate) &&
        Objects.equals(this.cancelWindowCampaignMinutes, campaignWritable.cancelWindowCampaignMinutes) &&
        Objects.equals(this.metadata, campaignWritable.metadata) &&
        Objects.equals(this.useType, campaignWritable.useType) &&
        Objects.equals(this.autoCancelIfNcoa, campaignWritable.autoCancelIfNcoa);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(billingGroupId, name, description, scheduleType, targetDeliveryDate, sendDate, cancelWindowCampaignMinutes, metadata, useType, autoCancelIfNcoa);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CampaignWritable {\n");
    sb.append("    billingGroupId: ").append(toIndentedString(billingGroupId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    scheduleType: ").append(toIndentedString(scheduleType)).append("\n");
    sb.append("    targetDeliveryDate: ").append(toIndentedString(targetDeliveryDate)).append("\n");
    sb.append("    sendDate: ").append(toIndentedString(sendDate)).append("\n");
    sb.append("    cancelWindowCampaignMinutes: ").append(toIndentedString(cancelWindowCampaignMinutes)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    useType: ").append(toIndentedString(useType)).append("\n");
    sb.append("    autoCancelIfNcoa: ").append(toIndentedString(autoCancelIfNcoa)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("billing_group_id");
    openapiFields.add("name");
    openapiFields.add("description");
    openapiFields.add("schedule_type");
    openapiFields.add("target_delivery_date");
    openapiFields.add("send_date");
    openapiFields.add("cancel_window_campaign_minutes");
    openapiFields.add("metadata");
    openapiFields.add("use_type");
    openapiFields.add("auto_cancel_if_ncoa");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("schedule_type");
    openapiRequiredFields.add("use_type");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CampaignWritable
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CampaignWritable.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CampaignWritable is not found in the empty JSON string", CampaignWritable.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CampaignWritable.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CampaignWritable` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CampaignWritable.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("billing_group_id") != null && !jsonObj.get("billing_group_id").isJsonNull()) && !jsonObj.get("billing_group_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billing_group_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billing_group_id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the required field `schedule_type`
      CmpScheduleType.validateJsonElement(jsonObj.get("schedule_type"));
      // validate the required field `use_type`
      CmpUseType.validateJsonElement(jsonObj.get("use_type"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CampaignWritable.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CampaignWritable' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CampaignWritable> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CampaignWritable.class));

       return (TypeAdapter<T>) new TypeAdapter<CampaignWritable>() {
           @Override
           public void write(JsonWriter out, CampaignWritable value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CampaignWritable read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CampaignWritable given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CampaignWritable
  * @throws IOException if the JSON string is invalid with respect to CampaignWritable
  */
  public static CampaignWritable fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CampaignWritable.class);
  }

 /**
  * Convert an instance of CampaignWritable to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

