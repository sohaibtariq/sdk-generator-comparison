/*
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 
 *
 * The version of the OpenAPI document: 1.19.18
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Error;
import org.openapitools.client.model.UsAutocompletions;
import org.openapitools.client.model.UsAutocompletionsWritable;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UsAutocompletionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UsAutocompletionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UsAutocompletionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for autocompletion
     * @param usAutocompletionsWritable  (required)
     * @param _case Casing of the verified address. Possible values are &#x60;upper&#x60; and &#x60;proper&#x60; for uppercased (e.g. \&quot;PO BOX\&quot;) and proper-cased (e.g. \&quot;PO Box\&quot;), respectively. Only affects &#x60;primary_line&#x60;, &#x60;city&#x60;, and &#x60;state&#x60;. Default casing is &#x60;upper&#x60;. (optional, default to upper)
     * @param validAddresses Possible values are &#x60;true&#x60; and &#x60;false&#x60;. If false, not all of the suggestions in the response will be valid addresses; they&#39;ll need to be verified in order to determine the deliverability. The valid_addresses flag will greatly reduce the number of keystrokes needed before reaching an intended address. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a US autocompletion object. </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call autocompletionCall(UsAutocompletionsWritable usAutocompletionsWritable, String _case, Boolean validAddresses, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usAutocompletionsWritable;

        // create path and map variables
        String localVarPath = "/us_autocompletions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_case != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("case", _case));
        }

        if (validAddresses != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("valid_addresses", validAddresses));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call autocompletionValidateBeforeCall(UsAutocompletionsWritable usAutocompletionsWritable, String _case, Boolean validAddresses, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'usAutocompletionsWritable' is set
        if (usAutocompletionsWritable == null) {
            throw new ApiException("Missing the required parameter 'usAutocompletionsWritable' when calling autocompletion(Async)");
        }

        return autocompletionCall(usAutocompletionsWritable, _case, validAddresses, _callback);

    }

    /**
     * Autocomplete
     * Given an address prefix consisting of a partial primary line, as well as optional input of city, state, and zip code, this functionality returns up to 10 full US address suggestions. Not all of them will turn out to be valid addresses; they&#39;ll need to be [verified](#operation/verification_us).
     * @param usAutocompletionsWritable  (required)
     * @param _case Casing of the verified address. Possible values are &#x60;upper&#x60; and &#x60;proper&#x60; for uppercased (e.g. \&quot;PO BOX\&quot;) and proper-cased (e.g. \&quot;PO Box\&quot;), respectively. Only affects &#x60;primary_line&#x60;, &#x60;city&#x60;, and &#x60;state&#x60;. Default casing is &#x60;upper&#x60;. (optional, default to upper)
     * @param validAddresses Possible values are &#x60;true&#x60; and &#x60;false&#x60;. If false, not all of the suggestions in the response will be valid addresses; they&#39;ll need to be verified in order to determine the deliverability. The valid_addresses flag will greatly reduce the number of keystrokes needed before reaching an intended address. (optional, default to false)
     * @return UsAutocompletions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a US autocompletion object. </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public UsAutocompletions autocompletion(UsAutocompletionsWritable usAutocompletionsWritable, String _case, Boolean validAddresses) throws ApiException {
        ApiResponse<UsAutocompletions> localVarResp = autocompletionWithHttpInfo(usAutocompletionsWritable, _case, validAddresses);
        return localVarResp.getData();
    }

    /**
     * Autocomplete
     * Given an address prefix consisting of a partial primary line, as well as optional input of city, state, and zip code, this functionality returns up to 10 full US address suggestions. Not all of them will turn out to be valid addresses; they&#39;ll need to be [verified](#operation/verification_us).
     * @param usAutocompletionsWritable  (required)
     * @param _case Casing of the verified address. Possible values are &#x60;upper&#x60; and &#x60;proper&#x60; for uppercased (e.g. \&quot;PO BOX\&quot;) and proper-cased (e.g. \&quot;PO Box\&quot;), respectively. Only affects &#x60;primary_line&#x60;, &#x60;city&#x60;, and &#x60;state&#x60;. Default casing is &#x60;upper&#x60;. (optional, default to upper)
     * @param validAddresses Possible values are &#x60;true&#x60; and &#x60;false&#x60;. If false, not all of the suggestions in the response will be valid addresses; they&#39;ll need to be verified in order to determine the deliverability. The valid_addresses flag will greatly reduce the number of keystrokes needed before reaching an intended address. (optional, default to false)
     * @return ApiResponse&lt;UsAutocompletions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a US autocompletion object. </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UsAutocompletions> autocompletionWithHttpInfo(UsAutocompletionsWritable usAutocompletionsWritable, String _case, Boolean validAddresses) throws ApiException {
        okhttp3.Call localVarCall = autocompletionValidateBeforeCall(usAutocompletionsWritable, _case, validAddresses, null);
        Type localVarReturnType = new TypeToken<UsAutocompletions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Autocomplete (asynchronously)
     * Given an address prefix consisting of a partial primary line, as well as optional input of city, state, and zip code, this functionality returns up to 10 full US address suggestions. Not all of them will turn out to be valid addresses; they&#39;ll need to be [verified](#operation/verification_us).
     * @param usAutocompletionsWritable  (required)
     * @param _case Casing of the verified address. Possible values are &#x60;upper&#x60; and &#x60;proper&#x60; for uppercased (e.g. \&quot;PO BOX\&quot;) and proper-cased (e.g. \&quot;PO Box\&quot;), respectively. Only affects &#x60;primary_line&#x60;, &#x60;city&#x60;, and &#x60;state&#x60;. Default casing is &#x60;upper&#x60;. (optional, default to upper)
     * @param validAddresses Possible values are &#x60;true&#x60; and &#x60;false&#x60;. If false, not all of the suggestions in the response will be valid addresses; they&#39;ll need to be verified in order to determine the deliverability. The valid_addresses flag will greatly reduce the number of keystrokes needed before reaching an intended address. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a US autocompletion object. </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call autocompletionAsync(UsAutocompletionsWritable usAutocompletionsWritable, String _case, Boolean validAddresses, final ApiCallback<UsAutocompletions> _callback) throws ApiException {

        okhttp3.Call localVarCall = autocompletionValidateBeforeCall(usAutocompletionsWritable, _case, validAddresses, _callback);
        Type localVarReturnType = new TypeToken<UsAutocompletions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
