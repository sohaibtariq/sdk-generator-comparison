/*
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 
 *
 * The version of the OpenAPI document: 1.19.18
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Thumbnail;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Card
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-28T10:58:18.138843-08:00[America/Los_Angeles]")
public class Card {
  public static final String SERIALIZED_NAME_DATE_CREATED = "date_created";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_DATE_MODIFIED = "date_modified";
  @SerializedName(SERIALIZED_NAME_DATE_MODIFIED)
  private OffsetDateTime dateModified;

  public static final String SERIALIZED_NAME_DELETED = "deleted";
  @SerializedName(SERIALIZED_NAME_DELETED)
  private Boolean deleted;

  /**
   * object
   */
  @JsonAdapter(ObjectEnum.Adapter.class)
  public enum ObjectEnum {
    CARD("card");

    private String value;

    ObjectEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ObjectEnum fromValue(String value) {
      for (ObjectEnum b : ObjectEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ObjectEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ObjectEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ObjectEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ObjectEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ObjectEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OBJECT = "object";
  @SerializedName(SERIALIZED_NAME_OBJECT)
  private ObjectEnum _object = ObjectEnum.CARD;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  /**
   * The size of the card
   */
  @JsonAdapter(SizeEnum.Adapter.class)
  public enum SizeEnum {
    _3_375X2_125("3.375x2.125"),
    
    _2_125X3_375("2.125x3.375");

    private String value;

    SizeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SizeEnum fromValue(String value) {
      for (SizeEnum b : SizeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SizeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SizeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SizeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SizeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SizeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private SizeEnum size = SizeEnum._2_125X3_375;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public static final String SERIALIZED_NAME_AUTO_REORDER = "auto_reorder";
  @SerializedName(SERIALIZED_NAME_AUTO_REORDER)
  private Boolean autoReorder = false;

  public static final String SERIALIZED_NAME_REORDER_QUANTITY = "reorder_quantity";
  @SerializedName(SERIALIZED_NAME_REORDER_QUANTITY)
  private Integer reorderQuantity;

  public static final String SERIALIZED_NAME_RAW_URL = "raw_url";
  @SerializedName(SERIALIZED_NAME_RAW_URL)
  private URI rawUrl;

  public static final String SERIALIZED_NAME_FRONT_ORIGINAL_URL = "front_original_url";
  @SerializedName(SERIALIZED_NAME_FRONT_ORIGINAL_URL)
  private URI frontOriginalUrl;

  public static final String SERIALIZED_NAME_BACK_ORIGINAL_URL = "back_original_url";
  @SerializedName(SERIALIZED_NAME_BACK_ORIGINAL_URL)
  private URI backOriginalUrl;

  public static final String SERIALIZED_NAME_THUMBNAILS = "thumbnails";
  @SerializedName(SERIALIZED_NAME_THUMBNAILS)
  private List<Thumbnail> thumbnails = new ArrayList<>();

  public static final String SERIALIZED_NAME_AVAILABLE_QUANTITY = "available_quantity";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_QUANTITY)
  private Integer availableQuantity = 0;

  public static final String SERIALIZED_NAME_PENDING_QUANTITY = "pending_quantity";
  @SerializedName(SERIALIZED_NAME_PENDING_QUANTITY)
  private Integer pendingQuantity = 0;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    PROCESSED("processed"),
    
    RENDERED("rendered");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  /**
   * The orientation of the card.
   */
  @JsonAdapter(OrientationEnum.Adapter.class)
  public enum OrientationEnum {
    HORIZONTAL("horizontal"),
    
    VERTICAL("vertical");

    private String value;

    OrientationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OrientationEnum fromValue(String value) {
      for (OrientationEnum b : OrientationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OrientationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OrientationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OrientationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OrientationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OrientationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ORIENTATION = "orientation";
  @SerializedName(SERIALIZED_NAME_ORIENTATION)
  private OrientationEnum orientation = OrientationEnum.HORIZONTAL;

  public static final String SERIALIZED_NAME_THRESHOLD_AMOUNT = "threshold_amount";
  @SerializedName(SERIALIZED_NAME_THRESHOLD_AMOUNT)
  private Integer thresholdAmount = 0;

  public Card() {
  }

  public Card dateCreated(OffsetDateTime dateCreated) {
    
    this.dateCreated = dateCreated;
    return this;
  }

   /**
   * A timestamp in ISO 8601 format of the date the resource was created.
   * @return dateCreated
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }


  public void setDateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
  }


  public Card dateModified(OffsetDateTime dateModified) {
    
    this.dateModified = dateModified;
    return this;
  }

   /**
   * A timestamp in ISO 8601 format of the date the resource was last modified.
   * @return dateModified
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getDateModified() {
    return dateModified;
  }


  public void setDateModified(OffsetDateTime dateModified) {
    this.dateModified = dateModified;
  }


  public Card deleted(Boolean deleted) {
    
    this.deleted = deleted;
    return this;
  }

   /**
   * Only returned if the resource has been successfully deleted.
   * @return deleted
  **/
  @javax.annotation.Nullable
  public Boolean getDeleted() {
    return deleted;
  }


  public void setDeleted(Boolean deleted) {
    this.deleted = deleted;
  }


  public Card _object(ObjectEnum _object) {
    
    this._object = _object;
    return this;
  }

   /**
   * object
   * @return _object
  **/
  @javax.annotation.Nonnull
  public ObjectEnum getObject() {
    return _object;
  }


  public void setObject(ObjectEnum _object) {
    this._object = _object;
  }


  public Card description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Description of the card.
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public Card size(SizeEnum size) {
    
    this.size = size;
    return this;
  }

   /**
   * The size of the card
   * @return size
  **/
  @javax.annotation.Nullable
  public SizeEnum getSize() {
    return size;
  }


  public void setSize(SizeEnum size) {
    this.size = size;
  }


  public Card id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Unique identifier prefixed with &#x60;card_&#x60;.
   * @return id
  **/
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public Card url(URI url) {
    
    this.url = url;
    return this;
  }

   /**
   * The signed link for the card.
   * @return url
  **/
  @javax.annotation.Nonnull
  public URI getUrl() {
    return url;
  }


  public void setUrl(URI url) {
    this.url = url;
  }


  public Card autoReorder(Boolean autoReorder) {
    
    this.autoReorder = autoReorder;
    return this;
  }

   /**
   * True if the cards should be auto-reordered.
   * @return autoReorder
  **/
  @javax.annotation.Nonnull
  public Boolean getAutoReorder() {
    return autoReorder;
  }


  public void setAutoReorder(Boolean autoReorder) {
    this.autoReorder = autoReorder;
  }


  public Card reorderQuantity(Integer reorderQuantity) {
    
    this.reorderQuantity = reorderQuantity;
    return this;
  }

   /**
   * The number of cards to be reordered.
   * @return reorderQuantity
  **/
  @javax.annotation.Nullable
  public Integer getReorderQuantity() {
    return reorderQuantity;
  }


  public void setReorderQuantity(Integer reorderQuantity) {
    this.reorderQuantity = reorderQuantity;
  }


  public Card rawUrl(URI rawUrl) {
    
    this.rawUrl = rawUrl;
    return this;
  }

   /**
   * The raw URL of the card.
   * @return rawUrl
  **/
  @javax.annotation.Nonnull
  public URI getRawUrl() {
    return rawUrl;
  }


  public void setRawUrl(URI rawUrl) {
    this.rawUrl = rawUrl;
  }


  public Card frontOriginalUrl(URI frontOriginalUrl) {
    
    this.frontOriginalUrl = frontOriginalUrl;
    return this;
  }

   /**
   * The original URL of the front template.
   * @return frontOriginalUrl
  **/
  @javax.annotation.Nonnull
  public URI getFrontOriginalUrl() {
    return frontOriginalUrl;
  }


  public void setFrontOriginalUrl(URI frontOriginalUrl) {
    this.frontOriginalUrl = frontOriginalUrl;
  }


  public Card backOriginalUrl(URI backOriginalUrl) {
    
    this.backOriginalUrl = backOriginalUrl;
    return this;
  }

   /**
   * The original URL of the back template.
   * @return backOriginalUrl
  **/
  @javax.annotation.Nonnull
  public URI getBackOriginalUrl() {
    return backOriginalUrl;
  }


  public void setBackOriginalUrl(URI backOriginalUrl) {
    this.backOriginalUrl = backOriginalUrl;
  }


  public Card thumbnails(List<Thumbnail> thumbnails) {
    
    this.thumbnails = thumbnails;
    return this;
  }

  public Card addThumbnailsItem(Thumbnail thumbnailsItem) {
    if (this.thumbnails == null) {
      this.thumbnails = new ArrayList<>();
    }
    this.thumbnails.add(thumbnailsItem);
    return this;
  }

   /**
   * Get thumbnails
   * @return thumbnails
  **/
  @javax.annotation.Nonnull
  public List<Thumbnail> getThumbnails() {
    return thumbnails;
  }


  public void setThumbnails(List<Thumbnail> thumbnails) {
    this.thumbnails = thumbnails;
  }


  public Card availableQuantity(Integer availableQuantity) {
    
    this.availableQuantity = availableQuantity;
    return this;
  }

   /**
   * The available quantity of cards.
   * @return availableQuantity
  **/
  @javax.annotation.Nonnull
  public Integer getAvailableQuantity() {
    return availableQuantity;
  }


  public void setAvailableQuantity(Integer availableQuantity) {
    this.availableQuantity = availableQuantity;
  }


  public Card pendingQuantity(Integer pendingQuantity) {
    
    this.pendingQuantity = pendingQuantity;
    return this;
  }

   /**
   * The pending quantity of cards.
   * @return pendingQuantity
  **/
  @javax.annotation.Nonnull
  public Integer getPendingQuantity() {
    return pendingQuantity;
  }


  public void setPendingQuantity(Integer pendingQuantity) {
    this.pendingQuantity = pendingQuantity;
  }


  public Card status(StatusEnum status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nonnull
  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public Card orientation(OrientationEnum orientation) {
    
    this.orientation = orientation;
    return this;
  }

   /**
   * The orientation of the card.
   * @return orientation
  **/
  @javax.annotation.Nonnull
  public OrientationEnum getOrientation() {
    return orientation;
  }


  public void setOrientation(OrientationEnum orientation) {
    this.orientation = orientation;
  }


  public Card thresholdAmount(Integer thresholdAmount) {
    
    this.thresholdAmount = thresholdAmount;
    return this;
  }

   /**
   * The threshold amount of the card
   * @return thresholdAmount
  **/
  @javax.annotation.Nonnull
  public Integer getThresholdAmount() {
    return thresholdAmount;
  }


  public void setThresholdAmount(Integer thresholdAmount) {
    this.thresholdAmount = thresholdAmount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Card card = (Card) o;
    return Objects.equals(this.dateCreated, card.dateCreated) &&
        Objects.equals(this.dateModified, card.dateModified) &&
        Objects.equals(this.deleted, card.deleted) &&
        Objects.equals(this._object, card._object) &&
        Objects.equals(this.description, card.description) &&
        Objects.equals(this.size, card.size) &&
        Objects.equals(this.id, card.id) &&
        Objects.equals(this.url, card.url) &&
        Objects.equals(this.autoReorder, card.autoReorder) &&
        Objects.equals(this.reorderQuantity, card.reorderQuantity) &&
        Objects.equals(this.rawUrl, card.rawUrl) &&
        Objects.equals(this.frontOriginalUrl, card.frontOriginalUrl) &&
        Objects.equals(this.backOriginalUrl, card.backOriginalUrl) &&
        Objects.equals(this.thumbnails, card.thumbnails) &&
        Objects.equals(this.availableQuantity, card.availableQuantity) &&
        Objects.equals(this.pendingQuantity, card.pendingQuantity) &&
        Objects.equals(this.status, card.status) &&
        Objects.equals(this.orientation, card.orientation) &&
        Objects.equals(this.thresholdAmount, card.thresholdAmount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dateCreated, dateModified, deleted, _object, description, size, id, url, autoReorder, reorderQuantity, rawUrl, frontOriginalUrl, backOriginalUrl, thumbnails, availableQuantity, pendingQuantity, status, orientation, thresholdAmount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Card {\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateModified: ").append(toIndentedString(dateModified)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    _object: ").append(toIndentedString(_object)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    autoReorder: ").append(toIndentedString(autoReorder)).append("\n");
    sb.append("    reorderQuantity: ").append(toIndentedString(reorderQuantity)).append("\n");
    sb.append("    rawUrl: ").append(toIndentedString(rawUrl)).append("\n");
    sb.append("    frontOriginalUrl: ").append(toIndentedString(frontOriginalUrl)).append("\n");
    sb.append("    backOriginalUrl: ").append(toIndentedString(backOriginalUrl)).append("\n");
    sb.append("    thumbnails: ").append(toIndentedString(thumbnails)).append("\n");
    sb.append("    availableQuantity: ").append(toIndentedString(availableQuantity)).append("\n");
    sb.append("    pendingQuantity: ").append(toIndentedString(pendingQuantity)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    orientation: ").append(toIndentedString(orientation)).append("\n");
    sb.append("    thresholdAmount: ").append(toIndentedString(thresholdAmount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("date_created");
    openapiFields.add("date_modified");
    openapiFields.add("deleted");
    openapiFields.add("object");
    openapiFields.add("description");
    openapiFields.add("size");
    openapiFields.add("id");
    openapiFields.add("url");
    openapiFields.add("auto_reorder");
    openapiFields.add("reorder_quantity");
    openapiFields.add("raw_url");
    openapiFields.add("front_original_url");
    openapiFields.add("back_original_url");
    openapiFields.add("thumbnails");
    openapiFields.add("available_quantity");
    openapiFields.add("pending_quantity");
    openapiFields.add("status");
    openapiFields.add("orientation");
    openapiFields.add("threshold_amount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("date_created");
    openapiRequiredFields.add("date_modified");
    openapiRequiredFields.add("object");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("url");
    openapiRequiredFields.add("auto_reorder");
    openapiRequiredFields.add("reorder_quantity");
    openapiRequiredFields.add("raw_url");
    openapiRequiredFields.add("front_original_url");
    openapiRequiredFields.add("back_original_url");
    openapiRequiredFields.add("thumbnails");
    openapiRequiredFields.add("available_quantity");
    openapiRequiredFields.add("pending_quantity");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("orientation");
    openapiRequiredFields.add("threshold_amount");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Card
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Card.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Card is not found in the empty JSON string", Card.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Card.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Card` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Card.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("object").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `object` to be a primitive type in the JSON string but got `%s`", jsonObj.get("object").toString()));
      }
      // validate the required field `object`
      ObjectEnum.validateJsonElement(jsonObj.get("object"));
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("size") != null && !jsonObj.get("size").isJsonNull()) && !jsonObj.get("size").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `size` to be a primitive type in the JSON string but got `%s`", jsonObj.get("size").toString()));
      }
      // validate the optional field `size`
      if (jsonObj.get("size") != null && !jsonObj.get("size").isJsonNull()) {
        SizeEnum.validateJsonElement(jsonObj.get("size"));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if (!jsonObj.get("raw_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `raw_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("raw_url").toString()));
      }
      if (!jsonObj.get("front_original_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `front_original_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("front_original_url").toString()));
      }
      if (!jsonObj.get("back_original_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `back_original_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("back_original_url").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("thumbnails").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `thumbnails` to be an array in the JSON string but got `%s`", jsonObj.get("thumbnails").toString()));
      }

      JsonArray jsonArraythumbnails = jsonObj.getAsJsonArray("thumbnails");
      // validate the required field `thumbnails` (array)
      for (int i = 0; i < jsonArraythumbnails.size(); i++) {
        Thumbnail.validateJsonElement(jsonArraythumbnails.get(i));
      };
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the required field `status`
      StatusEnum.validateJsonElement(jsonObj.get("status"));
      if (!jsonObj.get("orientation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orientation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orientation").toString()));
      }
      // validate the required field `orientation`
      OrientationEnum.validateJsonElement(jsonObj.get("orientation"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Card.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Card' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Card> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Card.class));

       return (TypeAdapter<T>) new TypeAdapter<Card>() {
           @Override
           public void write(JsonWriter out, Card value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Card read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Card given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Card
  * @throws IOException if the JSON string is invalid with respect to Card
  */
  public static Card fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Card.class);
  }

 /**
  * Convert an instance of Card to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

