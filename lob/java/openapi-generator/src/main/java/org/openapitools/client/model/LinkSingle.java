/*
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 
 *
 * The version of the OpenAPI document: 1.19.18
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LinkSingle
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-28T10:58:18.138843-08:00[America/Los_Angeles]")
public class LinkSingle {
  public static final String SERIALIZED_NAME_REDIRECT_LINK = "redirect_link";
  @SerializedName(SERIALIZED_NAME_REDIRECT_LINK)
  private String redirectLink;

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_SLUG = "slug";
  @SerializedName(SERIALIZED_NAME_SLUG)
  private String slug;

  public static final String SERIALIZED_NAME_METADATA_TAG = "metadata_tag";
  @SerializedName(SERIALIZED_NAME_METADATA_TAG)
  private Map<String, String> metadataTag = new HashMap<>();

  public static final String SERIALIZED_NAME_BILLING_GROUP_ID = "billing_group_id";
  @SerializedName(SERIALIZED_NAME_BILLING_GROUP_ID)
  private String billingGroupId;

  public LinkSingle() {
  }

  public LinkSingle redirectLink(String redirectLink) {
    
    this.redirectLink = redirectLink;
    return this;
  }

   /**
   * The original target URL.
   * @return redirectLink
  **/
  @javax.annotation.Nonnull
  public String getRedirectLink() {
    return redirectLink;
  }


  public void setRedirectLink(String redirectLink) {
    this.redirectLink = redirectLink;
  }


  public LinkSingle domain(String domain) {
    
    this.domain = domain;
    return this;
  }

   /**
   * The registered domain to be used for the short URL.
   * @return domain
  **/
  @javax.annotation.Nullable
  public String getDomain() {
    return domain;
  }


  public void setDomain(String domain) {
    this.domain = domain;
  }


  public LinkSingle slug(String slug) {
    
    this.slug = slug;
    return this;
  }

   /**
   * The unique path for the shortened URL, if empty a unique path will be used.
   * @return slug
  **/
  @javax.annotation.Nullable
  public String getSlug() {
    return slug;
  }


  public void setSlug(String slug) {
    this.slug = slug;
  }


  public LinkSingle metadataTag(Map<String, String> metadataTag) {
    
    this.metadataTag = metadataTag;
    return this;
  }

  public LinkSingle putMetadataTagItem(String key, String metadataTagItem) {
    if (this.metadataTag == null) {
      this.metadataTag = new HashMap<>();
    }
    this.metadataTag.put(key, metadataTagItem);
    return this;
  }

   /**
   * Use metadata to store custom information for tagging and labeling back to your internal systems. Must be an object with up to 20 key-value pairs. Keys must be at most 40 characters and values must be at most 500 characters. Neither can contain the characters &#x60;\&quot;&#x60; and &#x60;\\&#x60;. i.e. &#39;{\&quot;customer_id\&quot; : \&quot;NEWYORK2015\&quot;}&#39; Nested objects are not supported.  See [Metadata](#section/Metadata) for more information.
   * @return metadataTag
  **/
  @javax.annotation.Nullable
  public Map<String, String> getMetadataTag() {
    return metadataTag;
  }


  public void setMetadataTag(Map<String, String> metadataTag) {
    this.metadataTag = metadataTag;
  }


  public LinkSingle billingGroupId(String billingGroupId) {
    
    this.billingGroupId = billingGroupId;
    return this;
  }

   /**
   * An optional string with the billing group ID to tag your usage with. Is used for billing purposes. Requires special activation to use. See &lt;a href&#x3D;\&quot;#tag/Billing-Groups\&quot;&gt;Billing Group API&lt;/a&gt; for more information.
   * @return billingGroupId
  **/
  @javax.annotation.Nullable
  public String getBillingGroupId() {
    return billingGroupId;
  }


  public void setBillingGroupId(String billingGroupId) {
    this.billingGroupId = billingGroupId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LinkSingle linkSingle = (LinkSingle) o;
    return Objects.equals(this.redirectLink, linkSingle.redirectLink) &&
        Objects.equals(this.domain, linkSingle.domain) &&
        Objects.equals(this.slug, linkSingle.slug) &&
        Objects.equals(this.metadataTag, linkSingle.metadataTag) &&
        Objects.equals(this.billingGroupId, linkSingle.billingGroupId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(redirectLink, domain, slug, metadataTag, billingGroupId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LinkSingle {\n");
    sb.append("    redirectLink: ").append(toIndentedString(redirectLink)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    slug: ").append(toIndentedString(slug)).append("\n");
    sb.append("    metadataTag: ").append(toIndentedString(metadataTag)).append("\n");
    sb.append("    billingGroupId: ").append(toIndentedString(billingGroupId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("redirect_link");
    openapiFields.add("domain");
    openapiFields.add("slug");
    openapiFields.add("metadata_tag");
    openapiFields.add("billing_group_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("redirect_link");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to LinkSingle
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LinkSingle.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LinkSingle is not found in the empty JSON string", LinkSingle.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LinkSingle.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LinkSingle` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LinkSingle.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("redirect_link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `redirect_link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("redirect_link").toString()));
      }
      if ((jsonObj.get("domain") != null && !jsonObj.get("domain").isJsonNull()) && !jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      if ((jsonObj.get("slug") != null && !jsonObj.get("slug").isJsonNull()) && !jsonObj.get("slug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slug").toString()));
      }
      if ((jsonObj.get("billing_group_id") != null && !jsonObj.get("billing_group_id").isJsonNull()) && !jsonObj.get("billing_group_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billing_group_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billing_group_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LinkSingle.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LinkSingle' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LinkSingle> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LinkSingle.class));

       return (TypeAdapter<T>) new TypeAdapter<LinkSingle>() {
           @Override
           public void write(JsonWriter out, LinkSingle value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LinkSingle read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LinkSingle given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LinkSingle
  * @throws IOException if the JSON string is invalid with respect to LinkSingle
  */
  public static LinkSingle fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LinkSingle.class);
  }

 /**
  * Convert an instance of LinkSingle to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

