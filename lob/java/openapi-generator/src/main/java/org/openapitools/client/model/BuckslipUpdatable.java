/*
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 
 *
 * The version of the OpenAPI document: 1.19.18
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BuckslipUpdatable
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-28T10:58:18.138843-08:00[America/Los_Angeles]")
public class BuckslipUpdatable {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_AUTO_REORDER = "auto_reorder";
  @SerializedName(SERIALIZED_NAME_AUTO_REORDER)
  private Boolean autoReorder;

  public static final String SERIALIZED_NAME_REORDER_QUANTITY = "reorder_quantity";
  @SerializedName(SERIALIZED_NAME_REORDER_QUANTITY)
  private BigDecimal reorderQuantity;

  public BuckslipUpdatable() {
  }

  public BuckslipUpdatable description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Description of the buckslip.
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public BuckslipUpdatable autoReorder(Boolean autoReorder) {
    
    this.autoReorder = autoReorder;
    return this;
  }

   /**
   * Allows for auto reordering
   * @return autoReorder
  **/
  @javax.annotation.Nullable
  public Boolean getAutoReorder() {
    return autoReorder;
  }


  public void setAutoReorder(Boolean autoReorder) {
    this.autoReorder = autoReorder;
  }


  public BuckslipUpdatable reorderQuantity(BigDecimal reorderQuantity) {
    
    this.reorderQuantity = reorderQuantity;
    return this;
  }

   /**
   * The quantity of items to be reordered (only required when auto_reorder is true).
   * minimum: 5000
   * maximum: 10000000
   * @return reorderQuantity
  **/
  @javax.annotation.Nullable
  public BigDecimal getReorderQuantity() {
    return reorderQuantity;
  }


  public void setReorderQuantity(BigDecimal reorderQuantity) {
    this.reorderQuantity = reorderQuantity;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BuckslipUpdatable buckslipUpdatable = (BuckslipUpdatable) o;
    return Objects.equals(this.description, buckslipUpdatable.description) &&
        Objects.equals(this.autoReorder, buckslipUpdatable.autoReorder) &&
        Objects.equals(this.reorderQuantity, buckslipUpdatable.reorderQuantity);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, autoReorder, reorderQuantity);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BuckslipUpdatable {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    autoReorder: ").append(toIndentedString(autoReorder)).append("\n");
    sb.append("    reorderQuantity: ").append(toIndentedString(reorderQuantity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("auto_reorder");
    openapiFields.add("reorder_quantity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to BuckslipUpdatable
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BuckslipUpdatable.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BuckslipUpdatable is not found in the empty JSON string", BuckslipUpdatable.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BuckslipUpdatable.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BuckslipUpdatable` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BuckslipUpdatable.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BuckslipUpdatable' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BuckslipUpdatable> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BuckslipUpdatable.class));

       return (TypeAdapter<T>) new TypeAdapter<BuckslipUpdatable>() {
           @Override
           public void write(JsonWriter out, BuckslipUpdatable value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BuckslipUpdatable read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BuckslipUpdatable given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BuckslipUpdatable
  * @throws IOException if the JSON string is invalid with respect to BuckslipUpdatable
  */
  public static BuckslipUpdatable fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BuckslipUpdatable.class);
  }

 /**
  * Convert an instance of BuckslipUpdatable to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

