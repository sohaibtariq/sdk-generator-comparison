/*
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 
 *
 * The version of the OpenAPI document: 1.19.18
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.City;
import org.openapitools.client.model.ZipCodeType;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A nested object containing a breakdown of each component of an address.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-28T10:58:18.138843-08:00[America/Los_Angeles]")
public class UsComponents {
  public static final String SERIALIZED_NAME_PRIMARY_NUMBER = "primary_number";
  @SerializedName(SERIALIZED_NAME_PRIMARY_NUMBER)
  private String primaryNumber;

  /**
   * Geographic direction preceding a street name (&#x60;N&#x60;, &#x60;S&#x60;, &#x60;E&#x60;, &#x60;W&#x60;, &#x60;NE&#x60;, &#x60;SW&#x60;, &#x60;SE&#x60;, &#x60;NW&#x60;). 
   */
  @JsonAdapter(StreetPredirectionEnum.Adapter.class)
  public enum StreetPredirectionEnum {
    N("N"),
    
    S("S"),
    
    E("E"),
    
    W("W"),
    
    NE("NE"),
    
    SW("SW"),
    
    SE("SE"),
    
    NW("NW"),
    
    EMPTY("");

    private String value;

    StreetPredirectionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StreetPredirectionEnum fromValue(String value) {
      for (StreetPredirectionEnum b : StreetPredirectionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StreetPredirectionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StreetPredirectionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StreetPredirectionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StreetPredirectionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StreetPredirectionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STREET_PREDIRECTION = "street_predirection";
  @SerializedName(SERIALIZED_NAME_STREET_PREDIRECTION)
  private StreetPredirectionEnum streetPredirection;

  public static final String SERIALIZED_NAME_STREET_NAME = "street_name";
  @SerializedName(SERIALIZED_NAME_STREET_NAME)
  private String streetName;

  public static final String SERIALIZED_NAME_STREET_SUFFIX = "street_suffix";
  @SerializedName(SERIALIZED_NAME_STREET_SUFFIX)
  private String streetSuffix;

  /**
   * Geographic direction following a street name (&#x60;N&#x60;, &#x60;S&#x60;, &#x60;E&#x60;, &#x60;W&#x60;, &#x60;NE&#x60;, &#x60;SW&#x60;, &#x60;SE&#x60;, &#x60;NW&#x60;). 
   */
  @JsonAdapter(StreetPostdirectionEnum.Adapter.class)
  public enum StreetPostdirectionEnum {
    N("N"),
    
    S("S"),
    
    E("E"),
    
    W("W"),
    
    NE("NE"),
    
    SW("SW"),
    
    SE("SE"),
    
    NW("NW"),
    
    EMPTY("");

    private String value;

    StreetPostdirectionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StreetPostdirectionEnum fromValue(String value) {
      for (StreetPostdirectionEnum b : StreetPostdirectionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StreetPostdirectionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StreetPostdirectionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StreetPostdirectionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StreetPostdirectionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StreetPostdirectionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STREET_POSTDIRECTION = "street_postdirection";
  @SerializedName(SERIALIZED_NAME_STREET_POSTDIRECTION)
  private StreetPostdirectionEnum streetPostdirection;

  public static final String SERIALIZED_NAME_SECONDARY_DESIGNATOR = "secondary_designator";
  @SerializedName(SERIALIZED_NAME_SECONDARY_DESIGNATOR)
  private String secondaryDesignator;

  public static final String SERIALIZED_NAME_SECONDARY_NUMBER = "secondary_number";
  @SerializedName(SERIALIZED_NAME_SECONDARY_NUMBER)
  private String secondaryNumber;

  public static final String SERIALIZED_NAME_PMB_DESIGNATOR = "pmb_designator";
  @SerializedName(SERIALIZED_NAME_PMB_DESIGNATOR)
  private String pmbDesignator;

  public static final String SERIALIZED_NAME_PMB_NUMBER = "pmb_number";
  @SerializedName(SERIALIZED_NAME_PMB_NUMBER)
  private String pmbNumber;

  public static final String SERIALIZED_NAME_EXTRA_SECONDARY_DESIGNATOR = "extra_secondary_designator";
  @SerializedName(SERIALIZED_NAME_EXTRA_SECONDARY_DESIGNATOR)
  private String extraSecondaryDesignator;

  public static final String SERIALIZED_NAME_EXTRA_SECONDARY_NUMBER = "extra_secondary_number";
  @SerializedName(SERIALIZED_NAME_EXTRA_SECONDARY_NUMBER)
  private String extraSecondaryNumber;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private City city;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_ZIP_CODE = "zip_code";
  @SerializedName(SERIALIZED_NAME_ZIP_CODE)
  private String zipCode;

  public static final String SERIALIZED_NAME_ZIP_CODE_PLUS4 = "zip_code_plus_4";
  @SerializedName(SERIALIZED_NAME_ZIP_CODE_PLUS4)
  private Object zipCodePlus4;

  public static final String SERIALIZED_NAME_ZIP_CODE_TYPE = "zip_code_type";
  @SerializedName(SERIALIZED_NAME_ZIP_CODE_TYPE)
  private ZipCodeType zipCodeType;

  public static final String SERIALIZED_NAME_DELIVERY_POINT_BARCODE = "delivery_point_barcode";
  @SerializedName(SERIALIZED_NAME_DELIVERY_POINT_BARCODE)
  private String deliveryPointBarcode;

  /**
   * Uses USPS&#39;s &lt;a href&#x3D;\&quot;https://www.usps.com/nationalpremieraccounts/rdi.htm\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Residential Delivery Indicator (RDI)&lt;/a&gt; to identify whether an address is classified as residential or business. Possible values are: * &#x60;residential&#x60; –– The address is residential or a PO Box. * &#x60;commercial&#x60; –– The address is commercial. * &#x60;&#39;&#39;&#x60; –– Not enough information provided to be determined. 
   */
  @JsonAdapter(AddressTypeEnum.Adapter.class)
  public enum AddressTypeEnum {
    RESIDENTIAL("residential"),
    
    COMMERCIAL("commercial"),
    
    EMPTY("");

    private String value;

    AddressTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AddressTypeEnum fromValue(String value) {
      for (AddressTypeEnum b : AddressTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AddressTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AddressTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AddressTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AddressTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AddressTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ADDRESS_TYPE = "address_type";
  @SerializedName(SERIALIZED_NAME_ADDRESS_TYPE)
  private AddressTypeEnum addressType;

  /**
   * A description of the type of address. Populated if a DPV match is made (&#x60;deliverability_analysis[dpv_confirmation]&#x60; is &#x60;Y&#x60;, &#x60;S&#x60;, or &#x60;D&#x60;). For more detailed information about each record type, see [US Verification Details](#tag/US-Verification-Types). 
   */
  @JsonAdapter(RecordTypeEnum.Adapter.class)
  public enum RecordTypeEnum {
    STREET("street"),
    
    HIGHRISE("highrise"),
    
    FIRM("firm"),
    
    PO_BOX("po_box"),
    
    RURAL_ROUTE("rural_route"),
    
    GENERAL_DELIVERY("general_delivery"),
    
    EMPTY("");

    private String value;

    RecordTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RecordTypeEnum fromValue(String value) {
      for (RecordTypeEnum b : RecordTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RecordTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RecordTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RecordTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RecordTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RecordTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RECORD_TYPE = "record_type";
  @SerializedName(SERIALIZED_NAME_RECORD_TYPE)
  private RecordTypeEnum recordType;

  public static final String SERIALIZED_NAME_DEFAULT_BUILDING_ADDRESS = "default_building_address";
  @SerializedName(SERIALIZED_NAME_DEFAULT_BUILDING_ADDRESS)
  private Boolean defaultBuildingAddress;

  public static final String SERIALIZED_NAME_COUNTY = "county";
  @SerializedName(SERIALIZED_NAME_COUNTY)
  private String county;

  public static final String SERIALIZED_NAME_COUNTY_FIPS = "county_fips";
  @SerializedName(SERIALIZED_NAME_COUNTY_FIPS)
  private String countyFips;

  public static final String SERIALIZED_NAME_CARRIER_ROUTE = "carrier_route";
  @SerializedName(SERIALIZED_NAME_CARRIER_ROUTE)
  private String carrierRoute;

  /**
   * The type of &#x60;components[carrier_route]&#x60;. For more detailed information about each carrier route type, see [US Verification Details](#tag/US-Verification-Types). 
   */
  @JsonAdapter(CarrierRouteTypeEnum.Adapter.class)
  public enum CarrierRouteTypeEnum {
    CITY_DELIVERY("city_delivery"),
    
    RURAL_ROUTE("rural_route"),
    
    HIGHWAY_CONTRACT("highway_contract"),
    
    PO_BOX("po_box"),
    
    GENERAL_DELIVERY("general_delivery");

    private String value;

    CarrierRouteTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CarrierRouteTypeEnum fromValue(String value) {
      for (CarrierRouteTypeEnum b : CarrierRouteTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CarrierRouteTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CarrierRouteTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CarrierRouteTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CarrierRouteTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CarrierRouteTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CARRIER_ROUTE_TYPE = "carrier_route_type";
  @SerializedName(SERIALIZED_NAME_CARRIER_ROUTE_TYPE)
  private CarrierRouteTypeEnum carrierRouteType;

  public static final String SERIALIZED_NAME_LATITUDE = "latitude";
  @SerializedName(SERIALIZED_NAME_LATITUDE)
  private Float latitude;

  public static final String SERIALIZED_NAME_LONGITUDE = "longitude";
  @SerializedName(SERIALIZED_NAME_LONGITUDE)
  private Float longitude;

  public UsComponents() {
  }

  public UsComponents primaryNumber(String primaryNumber) {
    
    this.primaryNumber = primaryNumber;
    return this;
  }

   /**
   * The numeric or alphanumeric part of an address preceding the street name. Often the house, building, or PO Box number.
   * @return primaryNumber
  **/
  @javax.annotation.Nonnull
  public String getPrimaryNumber() {
    return primaryNumber;
  }


  public void setPrimaryNumber(String primaryNumber) {
    this.primaryNumber = primaryNumber;
  }


  public UsComponents streetPredirection(StreetPredirectionEnum streetPredirection) {
    
    this.streetPredirection = streetPredirection;
    return this;
  }

   /**
   * Geographic direction preceding a street name (&#x60;N&#x60;, &#x60;S&#x60;, &#x60;E&#x60;, &#x60;W&#x60;, &#x60;NE&#x60;, &#x60;SW&#x60;, &#x60;SE&#x60;, &#x60;NW&#x60;). 
   * @return streetPredirection
  **/
  @javax.annotation.Nonnull
  public StreetPredirectionEnum getStreetPredirection() {
    return streetPredirection;
  }


  public void setStreetPredirection(StreetPredirectionEnum streetPredirection) {
    this.streetPredirection = streetPredirection;
  }


  public UsComponents streetName(String streetName) {
    
    this.streetName = streetName;
    return this;
  }

   /**
   * The name of the street.
   * @return streetName
  **/
  @javax.annotation.Nonnull
  public String getStreetName() {
    return streetName;
  }


  public void setStreetName(String streetName) {
    this.streetName = streetName;
  }


  public UsComponents streetSuffix(String streetSuffix) {
    
    this.streetSuffix = streetSuffix;
    return this;
  }

   /**
   * The standard USPS abbreviation for the street suffix (&#x60;ST&#x60;, &#x60;AVE&#x60;, &#x60;BLVD&#x60;, etc). 
   * @return streetSuffix
  **/
  @javax.annotation.Nonnull
  public String getStreetSuffix() {
    return streetSuffix;
  }


  public void setStreetSuffix(String streetSuffix) {
    this.streetSuffix = streetSuffix;
  }


  public UsComponents streetPostdirection(StreetPostdirectionEnum streetPostdirection) {
    
    this.streetPostdirection = streetPostdirection;
    return this;
  }

   /**
   * Geographic direction following a street name (&#x60;N&#x60;, &#x60;S&#x60;, &#x60;E&#x60;, &#x60;W&#x60;, &#x60;NE&#x60;, &#x60;SW&#x60;, &#x60;SE&#x60;, &#x60;NW&#x60;). 
   * @return streetPostdirection
  **/
  @javax.annotation.Nonnull
  public StreetPostdirectionEnum getStreetPostdirection() {
    return streetPostdirection;
  }


  public void setStreetPostdirection(StreetPostdirectionEnum streetPostdirection) {
    this.streetPostdirection = streetPostdirection;
  }


  public UsComponents secondaryDesignator(String secondaryDesignator) {
    
    this.secondaryDesignator = secondaryDesignator;
    return this;
  }

   /**
   * The standard USPS abbreviation describing the &#x60;components[secondary_number]&#x60; (&#x60;STE&#x60;, &#x60;APT&#x60;, &#x60;BLDG&#x60;, etc). 
   * @return secondaryDesignator
  **/
  @javax.annotation.Nonnull
  public String getSecondaryDesignator() {
    return secondaryDesignator;
  }


  public void setSecondaryDesignator(String secondaryDesignator) {
    this.secondaryDesignator = secondaryDesignator;
  }


  public UsComponents secondaryNumber(String secondaryNumber) {
    
    this.secondaryNumber = secondaryNumber;
    return this;
  }

   /**
   * Number of the apartment/unit/etc. 
   * @return secondaryNumber
  **/
  @javax.annotation.Nonnull
  public String getSecondaryNumber() {
    return secondaryNumber;
  }


  public void setSecondaryNumber(String secondaryNumber) {
    this.secondaryNumber = secondaryNumber;
  }


  public UsComponents pmbDesignator(String pmbDesignator) {
    
    this.pmbDesignator = pmbDesignator;
    return this;
  }

   /**
   * Designator of a &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/Commercial_mail_receiving_agency\&quot; target&#x3D;\&quot;_blank\&quot;&gt;CMRA-authorized&lt;/a&gt; private mailbox. 
   * @return pmbDesignator
  **/
  @javax.annotation.Nonnull
  public String getPmbDesignator() {
    return pmbDesignator;
  }


  public void setPmbDesignator(String pmbDesignator) {
    this.pmbDesignator = pmbDesignator;
  }


  public UsComponents pmbNumber(String pmbNumber) {
    
    this.pmbNumber = pmbNumber;
    return this;
  }

   /**
   * Number of a &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/Commercial_mail_receiving_agency\&quot; target&#x3D;\&quot;_blank\&quot;&gt;CMRA-authorized&lt;/a&gt; private mailbox. 
   * @return pmbNumber
  **/
  @javax.annotation.Nonnull
  public String getPmbNumber() {
    return pmbNumber;
  }


  public void setPmbNumber(String pmbNumber) {
    this.pmbNumber = pmbNumber;
  }


  public UsComponents extraSecondaryDesignator(String extraSecondaryDesignator) {
    
    this.extraSecondaryDesignator = extraSecondaryDesignator;
    return this;
  }

   /**
   * An extra (often unnecessary) secondary designator provided with the input address. 
   * @return extraSecondaryDesignator
  **/
  @javax.annotation.Nonnull
  public String getExtraSecondaryDesignator() {
    return extraSecondaryDesignator;
  }


  public void setExtraSecondaryDesignator(String extraSecondaryDesignator) {
    this.extraSecondaryDesignator = extraSecondaryDesignator;
  }


  public UsComponents extraSecondaryNumber(String extraSecondaryNumber) {
    
    this.extraSecondaryNumber = extraSecondaryNumber;
    return this;
  }

   /**
   * An extra (often unnecessary) secondary number provided with the input address. 
   * @return extraSecondaryNumber
  **/
  @javax.annotation.Nonnull
  public String getExtraSecondaryNumber() {
    return extraSecondaryNumber;
  }


  public void setExtraSecondaryNumber(String extraSecondaryNumber) {
    this.extraSecondaryNumber = extraSecondaryNumber;
  }


  public UsComponents city(City city) {
    
    this.city = city;
    return this;
  }

   /**
   * Get city
   * @return city
  **/
  @javax.annotation.Nonnull
  public City getCity() {
    return city;
  }


  public void setCity(City city) {
    this.city = city;
  }


  public UsComponents state(String state) {
    
    this.state = state;
    return this;
  }

   /**
   * The &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_3166-2\&quot; target&#x3D;\&quot;_blank\&quot;&gt;ISO 3166-2&lt;/a&gt; two letter code for the state. 
   * @return state
  **/
  @javax.annotation.Nonnull
  public String getState() {
    return state;
  }


  public void setState(String state) {
    this.state = state;
  }


  public UsComponents zipCode(String zipCode) {
    
    this.zipCode = zipCode;
    return this;
  }

   /**
   * The 5-digit ZIP code
   * @return zipCode
  **/
  @javax.annotation.Nonnull
  public String getZipCode() {
    return zipCode;
  }


  public void setZipCode(String zipCode) {
    this.zipCode = zipCode;
  }


  public UsComponents zipCodePlus4(Object zipCodePlus4) {
    
    this.zipCodePlus4 = zipCodePlus4;
    return this;
  }

   /**
   * Get zipCodePlus4
   * @return zipCodePlus4
  **/
  @javax.annotation.Nonnull
  public Object getZipCodePlus4() {
    return zipCodePlus4;
  }


  public void setZipCodePlus4(Object zipCodePlus4) {
    this.zipCodePlus4 = zipCodePlus4;
  }


  public UsComponents zipCodeType(ZipCodeType zipCodeType) {
    
    this.zipCodeType = zipCodeType;
    return this;
  }

   /**
   * Get zipCodeType
   * @return zipCodeType
  **/
  @javax.annotation.Nonnull
  public ZipCodeType getZipCodeType() {
    return zipCodeType;
  }


  public void setZipCodeType(ZipCodeType zipCodeType) {
    this.zipCodeType = zipCodeType;
  }


  public UsComponents deliveryPointBarcode(String deliveryPointBarcode) {
    
    this.deliveryPointBarcode = deliveryPointBarcode;
    return this;
  }

   /**
   * A 12-digit identifier that uniquely identifies a delivery point (location where mail can be sent and received). It consists of the 5-digit ZIP code (&#x60;zip_code&#x60;), 4-digit ZIP+4 add-on (&#x60;zip_code_plus_4&#x60;), 2-digit delivery point, and 1-digit delivery point check digit. 
   * @return deliveryPointBarcode
  **/
  @javax.annotation.Nonnull
  public String getDeliveryPointBarcode() {
    return deliveryPointBarcode;
  }


  public void setDeliveryPointBarcode(String deliveryPointBarcode) {
    this.deliveryPointBarcode = deliveryPointBarcode;
  }


  public UsComponents addressType(AddressTypeEnum addressType) {
    
    this.addressType = addressType;
    return this;
  }

   /**
   * Uses USPS&#39;s &lt;a href&#x3D;\&quot;https://www.usps.com/nationalpremieraccounts/rdi.htm\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Residential Delivery Indicator (RDI)&lt;/a&gt; to identify whether an address is classified as residential or business. Possible values are: * &#x60;residential&#x60; –– The address is residential or a PO Box. * &#x60;commercial&#x60; –– The address is commercial. * &#x60;&#39;&#39;&#x60; –– Not enough information provided to be determined. 
   * @return addressType
  **/
  @javax.annotation.Nonnull
  public AddressTypeEnum getAddressType() {
    return addressType;
  }


  public void setAddressType(AddressTypeEnum addressType) {
    this.addressType = addressType;
  }


  public UsComponents recordType(RecordTypeEnum recordType) {
    
    this.recordType = recordType;
    return this;
  }

   /**
   * A description of the type of address. Populated if a DPV match is made (&#x60;deliverability_analysis[dpv_confirmation]&#x60; is &#x60;Y&#x60;, &#x60;S&#x60;, or &#x60;D&#x60;). For more detailed information about each record type, see [US Verification Details](#tag/US-Verification-Types). 
   * @return recordType
  **/
  @javax.annotation.Nonnull
  public RecordTypeEnum getRecordType() {
    return recordType;
  }


  public void setRecordType(RecordTypeEnum recordType) {
    this.recordType = recordType;
  }


  public UsComponents defaultBuildingAddress(Boolean defaultBuildingAddress) {
    
    this.defaultBuildingAddress = defaultBuildingAddress;
    return this;
  }

   /**
   * Designates whether or not the address is the default address for a building containing multiple delivery points. 
   * @return defaultBuildingAddress
  **/
  @javax.annotation.Nonnull
  public Boolean getDefaultBuildingAddress() {
    return defaultBuildingAddress;
  }


  public void setDefaultBuildingAddress(Boolean defaultBuildingAddress) {
    this.defaultBuildingAddress = defaultBuildingAddress;
  }


  public UsComponents county(String county) {
    
    this.county = county;
    return this;
  }

   /**
   * County name of the address city.
   * @return county
  **/
  @javax.annotation.Nonnull
  public String getCounty() {
    return county;
  }


  public void setCounty(String county) {
    this.county = county;
  }


  public UsComponents countyFips(String countyFips) {
    
    this.countyFips = countyFips;
    return this;
  }

   /**
   * A 5-digit &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/FIPS_county_code\&quot; target&#x3D;\&quot;_blank\&quot;&gt;FIPS county code&lt;/a&gt; which uniquely identifies &#x60;components[county]&#x60;. It consists of a 2-digit state code and a 3-digit county code. 
   * @return countyFips
  **/
  @javax.annotation.Nonnull
  public String getCountyFips() {
    return countyFips;
  }


  public void setCountyFips(String countyFips) {
    this.countyFips = countyFips;
  }


  public UsComponents carrierRoute(String carrierRoute) {
    
    this.carrierRoute = carrierRoute;
    return this;
  }

   /**
   * A 4-character code assigned to a mail delivery route within a ZIP code. 
   * @return carrierRoute
  **/
  @javax.annotation.Nonnull
  public String getCarrierRoute() {
    return carrierRoute;
  }


  public void setCarrierRoute(String carrierRoute) {
    this.carrierRoute = carrierRoute;
  }


  public UsComponents carrierRouteType(CarrierRouteTypeEnum carrierRouteType) {
    
    this.carrierRouteType = carrierRouteType;
    return this;
  }

   /**
   * The type of &#x60;components[carrier_route]&#x60;. For more detailed information about each carrier route type, see [US Verification Details](#tag/US-Verification-Types). 
   * @return carrierRouteType
  **/
  @javax.annotation.Nonnull
  public CarrierRouteTypeEnum getCarrierRouteType() {
    return carrierRouteType;
  }


  public void setCarrierRouteType(CarrierRouteTypeEnum carrierRouteType) {
    this.carrierRouteType = carrierRouteType;
  }


  public UsComponents latitude(Float latitude) {
    
    this.latitude = latitude;
    return this;
  }

   /**
   * A positive or negative decimal indicating the geographic latitude of the address, specifying the north-to-south position of a location. This should be used with &#x60;longitude&#x60; to pinpoint locations on a map. Will not be returned for undeliverable addresses or military addresses (state is &#x60;AA&#x60;, &#x60;AE&#x60;, or &#x60;AP&#x60;). 
   * @return latitude
  **/
  @javax.annotation.Nullable
  public Float getLatitude() {
    return latitude;
  }


  public void setLatitude(Float latitude) {
    this.latitude = latitude;
  }


  public UsComponents longitude(Float longitude) {
    
    this.longitude = longitude;
    return this;
  }

   /**
   * A positive or negative decimal indicating the geographic longitude of the address, specifying the north-to-south position of a location. This should be used with &#x60;latitude&#x60; to pinpoint locations on a map. Will not be returned for undeliverable addresses or military addresses (state is &#x60;AA&#x60;, &#x60;AE&#x60;, or &#x60;AP&#x60;). 
   * @return longitude
  **/
  @javax.annotation.Nullable
  public Float getLongitude() {
    return longitude;
  }


  public void setLongitude(Float longitude) {
    this.longitude = longitude;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UsComponents usComponents = (UsComponents) o;
    return Objects.equals(this.primaryNumber, usComponents.primaryNumber) &&
        Objects.equals(this.streetPredirection, usComponents.streetPredirection) &&
        Objects.equals(this.streetName, usComponents.streetName) &&
        Objects.equals(this.streetSuffix, usComponents.streetSuffix) &&
        Objects.equals(this.streetPostdirection, usComponents.streetPostdirection) &&
        Objects.equals(this.secondaryDesignator, usComponents.secondaryDesignator) &&
        Objects.equals(this.secondaryNumber, usComponents.secondaryNumber) &&
        Objects.equals(this.pmbDesignator, usComponents.pmbDesignator) &&
        Objects.equals(this.pmbNumber, usComponents.pmbNumber) &&
        Objects.equals(this.extraSecondaryDesignator, usComponents.extraSecondaryDesignator) &&
        Objects.equals(this.extraSecondaryNumber, usComponents.extraSecondaryNumber) &&
        Objects.equals(this.city, usComponents.city) &&
        Objects.equals(this.state, usComponents.state) &&
        Objects.equals(this.zipCode, usComponents.zipCode) &&
        Objects.equals(this.zipCodePlus4, usComponents.zipCodePlus4) &&
        Objects.equals(this.zipCodeType, usComponents.zipCodeType) &&
        Objects.equals(this.deliveryPointBarcode, usComponents.deliveryPointBarcode) &&
        Objects.equals(this.addressType, usComponents.addressType) &&
        Objects.equals(this.recordType, usComponents.recordType) &&
        Objects.equals(this.defaultBuildingAddress, usComponents.defaultBuildingAddress) &&
        Objects.equals(this.county, usComponents.county) &&
        Objects.equals(this.countyFips, usComponents.countyFips) &&
        Objects.equals(this.carrierRoute, usComponents.carrierRoute) &&
        Objects.equals(this.carrierRouteType, usComponents.carrierRouteType) &&
        Objects.equals(this.latitude, usComponents.latitude) &&
        Objects.equals(this.longitude, usComponents.longitude);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(primaryNumber, streetPredirection, streetName, streetSuffix, streetPostdirection, secondaryDesignator, secondaryNumber, pmbDesignator, pmbNumber, extraSecondaryDesignator, extraSecondaryNumber, city, state, zipCode, zipCodePlus4, zipCodeType, deliveryPointBarcode, addressType, recordType, defaultBuildingAddress, county, countyFips, carrierRoute, carrierRouteType, latitude, longitude);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UsComponents {\n");
    sb.append("    primaryNumber: ").append(toIndentedString(primaryNumber)).append("\n");
    sb.append("    streetPredirection: ").append(toIndentedString(streetPredirection)).append("\n");
    sb.append("    streetName: ").append(toIndentedString(streetName)).append("\n");
    sb.append("    streetSuffix: ").append(toIndentedString(streetSuffix)).append("\n");
    sb.append("    streetPostdirection: ").append(toIndentedString(streetPostdirection)).append("\n");
    sb.append("    secondaryDesignator: ").append(toIndentedString(secondaryDesignator)).append("\n");
    sb.append("    secondaryNumber: ").append(toIndentedString(secondaryNumber)).append("\n");
    sb.append("    pmbDesignator: ").append(toIndentedString(pmbDesignator)).append("\n");
    sb.append("    pmbNumber: ").append(toIndentedString(pmbNumber)).append("\n");
    sb.append("    extraSecondaryDesignator: ").append(toIndentedString(extraSecondaryDesignator)).append("\n");
    sb.append("    extraSecondaryNumber: ").append(toIndentedString(extraSecondaryNumber)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    zipCode: ").append(toIndentedString(zipCode)).append("\n");
    sb.append("    zipCodePlus4: ").append(toIndentedString(zipCodePlus4)).append("\n");
    sb.append("    zipCodeType: ").append(toIndentedString(zipCodeType)).append("\n");
    sb.append("    deliveryPointBarcode: ").append(toIndentedString(deliveryPointBarcode)).append("\n");
    sb.append("    addressType: ").append(toIndentedString(addressType)).append("\n");
    sb.append("    recordType: ").append(toIndentedString(recordType)).append("\n");
    sb.append("    defaultBuildingAddress: ").append(toIndentedString(defaultBuildingAddress)).append("\n");
    sb.append("    county: ").append(toIndentedString(county)).append("\n");
    sb.append("    countyFips: ").append(toIndentedString(countyFips)).append("\n");
    sb.append("    carrierRoute: ").append(toIndentedString(carrierRoute)).append("\n");
    sb.append("    carrierRouteType: ").append(toIndentedString(carrierRouteType)).append("\n");
    sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("primary_number");
    openapiFields.add("street_predirection");
    openapiFields.add("street_name");
    openapiFields.add("street_suffix");
    openapiFields.add("street_postdirection");
    openapiFields.add("secondary_designator");
    openapiFields.add("secondary_number");
    openapiFields.add("pmb_designator");
    openapiFields.add("pmb_number");
    openapiFields.add("extra_secondary_designator");
    openapiFields.add("extra_secondary_number");
    openapiFields.add("city");
    openapiFields.add("state");
    openapiFields.add("zip_code");
    openapiFields.add("zip_code_plus_4");
    openapiFields.add("zip_code_type");
    openapiFields.add("delivery_point_barcode");
    openapiFields.add("address_type");
    openapiFields.add("record_type");
    openapiFields.add("default_building_address");
    openapiFields.add("county");
    openapiFields.add("county_fips");
    openapiFields.add("carrier_route");
    openapiFields.add("carrier_route_type");
    openapiFields.add("latitude");
    openapiFields.add("longitude");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("primary_number");
    openapiRequiredFields.add("street_predirection");
    openapiRequiredFields.add("street_name");
    openapiRequiredFields.add("street_suffix");
    openapiRequiredFields.add("street_postdirection");
    openapiRequiredFields.add("secondary_designator");
    openapiRequiredFields.add("secondary_number");
    openapiRequiredFields.add("pmb_designator");
    openapiRequiredFields.add("pmb_number");
    openapiRequiredFields.add("extra_secondary_designator");
    openapiRequiredFields.add("extra_secondary_number");
    openapiRequiredFields.add("city");
    openapiRequiredFields.add("state");
    openapiRequiredFields.add("zip_code");
    openapiRequiredFields.add("zip_code_plus_4");
    openapiRequiredFields.add("zip_code_type");
    openapiRequiredFields.add("delivery_point_barcode");
    openapiRequiredFields.add("address_type");
    openapiRequiredFields.add("record_type");
    openapiRequiredFields.add("default_building_address");
    openapiRequiredFields.add("county");
    openapiRequiredFields.add("county_fips");
    openapiRequiredFields.add("carrier_route");
    openapiRequiredFields.add("carrier_route_type");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to UsComponents
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UsComponents.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UsComponents is not found in the empty JSON string", UsComponents.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UsComponents.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UsComponents` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UsComponents.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("primary_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primary_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primary_number").toString()));
      }
      if (!jsonObj.get("street_predirection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `street_predirection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("street_predirection").toString()));
      }
      // validate the required field `street_predirection`
      StreetPredirectionEnum.validateJsonElement(jsonObj.get("street_predirection"));
      if (!jsonObj.get("street_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `street_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("street_name").toString()));
      }
      if (!jsonObj.get("street_suffix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `street_suffix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("street_suffix").toString()));
      }
      if (!jsonObj.get("street_postdirection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `street_postdirection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("street_postdirection").toString()));
      }
      // validate the required field `street_postdirection`
      StreetPostdirectionEnum.validateJsonElement(jsonObj.get("street_postdirection"));
      if (!jsonObj.get("secondary_designator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secondary_designator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secondary_designator").toString()));
      }
      if (!jsonObj.get("secondary_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secondary_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secondary_number").toString()));
      }
      if (!jsonObj.get("pmb_designator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pmb_designator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pmb_designator").toString()));
      }
      if (!jsonObj.get("pmb_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pmb_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pmb_number").toString()));
      }
      if (!jsonObj.get("extra_secondary_designator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `extra_secondary_designator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("extra_secondary_designator").toString()));
      }
      if (!jsonObj.get("extra_secondary_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `extra_secondary_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("extra_secondary_number").toString()));
      }
      // validate the required field `city`
      City.validateJsonElement(jsonObj.get("city"));
      if (!jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if (!jsonObj.get("zip_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zip_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zip_code").toString()));
      }
      // validate the required field `zip_code_plus_4`
      Object.validateJsonElement(jsonObj.get("zip_code_plus_4"));
      // validate the required field `zip_code_type`
      ZipCodeType.validateJsonElement(jsonObj.get("zip_code_type"));
      if (!jsonObj.get("delivery_point_barcode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `delivery_point_barcode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("delivery_point_barcode").toString()));
      }
      if (!jsonObj.get("address_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address_type").toString()));
      }
      // validate the required field `address_type`
      AddressTypeEnum.validateJsonElement(jsonObj.get("address_type"));
      if (!jsonObj.get("record_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `record_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("record_type").toString()));
      }
      // validate the required field `record_type`
      RecordTypeEnum.validateJsonElement(jsonObj.get("record_type"));
      if (!jsonObj.get("county").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `county` to be a primitive type in the JSON string but got `%s`", jsonObj.get("county").toString()));
      }
      if (!jsonObj.get("county_fips").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `county_fips` to be a primitive type in the JSON string but got `%s`", jsonObj.get("county_fips").toString()));
      }
      if (!jsonObj.get("carrier_route").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `carrier_route` to be a primitive type in the JSON string but got `%s`", jsonObj.get("carrier_route").toString()));
      }
      if (!jsonObj.get("carrier_route_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `carrier_route_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("carrier_route_type").toString()));
      }
      // validate the required field `carrier_route_type`
      CarrierRouteTypeEnum.validateJsonElement(jsonObj.get("carrier_route_type"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UsComponents.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UsComponents' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UsComponents> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UsComponents.class));

       return (TypeAdapter<T>) new TypeAdapter<UsComponents>() {
           @Override
           public void write(JsonWriter out, UsComponents value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UsComponents read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UsComponents given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UsComponents
  * @throws IOException if the JSON string is invalid with respect to UsComponents
  */
  public static UsComponents fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UsComponents.class);
  }

 /**
  * Convert an instance of UsComponents to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

