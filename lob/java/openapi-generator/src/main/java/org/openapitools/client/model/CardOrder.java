/*
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 
 *
 * The version of the OpenAPI document: 1.19.18
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CardOrder
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-28T10:58:18.138843-08:00[America/Los_Angeles]")
public class CardOrder {
  public static final String SERIALIZED_NAME_DATE_CREATED = "date_created";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_DATE_MODIFIED = "date_modified";
  @SerializedName(SERIALIZED_NAME_DATE_MODIFIED)
  private OffsetDateTime dateModified;

  public static final String SERIALIZED_NAME_DELETED = "deleted";
  @SerializedName(SERIALIZED_NAME_DELETED)
  private Boolean deleted;

  public static final String SERIALIZED_NAME_OBJECT = "object";
  @SerializedName(SERIALIZED_NAME_OBJECT)
  private String _object;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_CARD_ID = "card_id";
  @SerializedName(SERIALIZED_NAME_CARD_ID)
  private String cardId;

  /**
   * The status of the card order.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    PENDING("pending"),
    
    PRINTING("printing"),
    
    AVAILABLE("available"),
    
    CANCELLED("cancelled"),
    
    DEPLETED("depleted");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_INVENTORY = "inventory";
  @SerializedName(SERIALIZED_NAME_INVENTORY)
  private BigDecimal inventory = new BigDecimal("0");

  public static final String SERIALIZED_NAME_QUANTITY_ORDERED = "quantity_ordered";
  @SerializedName(SERIALIZED_NAME_QUANTITY_ORDERED)
  private BigDecimal quantityOrdered = new BigDecimal("0");

  public static final String SERIALIZED_NAME_UNIT_PRICE = "unit_price";
  @SerializedName(SERIALIZED_NAME_UNIT_PRICE)
  private BigDecimal unitPrice = new BigDecimal("0");

  public static final String SERIALIZED_NAME_CANCELLED_REASON = "cancelled_reason";
  @SerializedName(SERIALIZED_NAME_CANCELLED_REASON)
  private String cancelledReason;

  public static final String SERIALIZED_NAME_AVAILABILITY_DATE = "availability_date";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY_DATE)
  private OffsetDateTime availabilityDate;

  public static final String SERIALIZED_NAME_EXPECTED_AVAILABILITY_DATE = "expected_availability_date";
  @SerializedName(SERIALIZED_NAME_EXPECTED_AVAILABILITY_DATE)
  private OffsetDateTime expectedAvailabilityDate;

  public CardOrder() {
  }

  public CardOrder dateCreated(OffsetDateTime dateCreated) {
    
    this.dateCreated = dateCreated;
    return this;
  }

   /**
   * A timestamp in ISO 8601 format of the date the resource was created.
   * @return dateCreated
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }


  public void setDateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
  }


  public CardOrder dateModified(OffsetDateTime dateModified) {
    
    this.dateModified = dateModified;
    return this;
  }

   /**
   * A timestamp in ISO 8601 format of the date the resource was last modified.
   * @return dateModified
  **/
  @javax.annotation.Nonnull
  public OffsetDateTime getDateModified() {
    return dateModified;
  }


  public void setDateModified(OffsetDateTime dateModified) {
    this.dateModified = dateModified;
  }


  public CardOrder deleted(Boolean deleted) {
    
    this.deleted = deleted;
    return this;
  }

   /**
   * Only returned if the resource has been successfully deleted.
   * @return deleted
  **/
  @javax.annotation.Nullable
  public Boolean getDeleted() {
    return deleted;
  }


  public void setDeleted(Boolean deleted) {
    this.deleted = deleted;
  }


  public CardOrder _object(String _object) {
    
    this._object = _object;
    return this;
  }

   /**
   * Value is resource type.
   * @return _object
  **/
  @javax.annotation.Nonnull
  public String getObject() {
    return _object;
  }


  public void setObject(String _object) {
    this._object = _object;
  }


  public CardOrder id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Unique identifier prefixed with &#x60;co_&#x60;.
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public CardOrder cardId(String cardId) {
    
    this.cardId = cardId;
    return this;
  }

   /**
   * Unique identifier prefixed with &#x60;card_&#x60;.
   * @return cardId
  **/
  @javax.annotation.Nullable
  public String getCardId() {
    return cardId;
  }


  public void setCardId(String cardId) {
    this.cardId = cardId;
  }


  public CardOrder status(StatusEnum status) {
    
    this.status = status;
    return this;
  }

   /**
   * The status of the card order.
   * @return status
  **/
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public CardOrder inventory(BigDecimal inventory) {
    
    this.inventory = inventory;
    return this;
  }

   /**
   * The inventory of the card order.
   * @return inventory
  **/
  @javax.annotation.Nullable
  public BigDecimal getInventory() {
    return inventory;
  }


  public void setInventory(BigDecimal inventory) {
    this.inventory = inventory;
  }


  public CardOrder quantityOrdered(BigDecimal quantityOrdered) {
    
    this.quantityOrdered = quantityOrdered;
    return this;
  }

   /**
   * The quantity of cards ordered
   * @return quantityOrdered
  **/
  @javax.annotation.Nullable
  public BigDecimal getQuantityOrdered() {
    return quantityOrdered;
  }


  public void setQuantityOrdered(BigDecimal quantityOrdered) {
    this.quantityOrdered = quantityOrdered;
  }


  public CardOrder unitPrice(BigDecimal unitPrice) {
    
    this.unitPrice = unitPrice;
    return this;
  }

   /**
   * The unit price for the card order.
   * @return unitPrice
  **/
  @javax.annotation.Nullable
  public BigDecimal getUnitPrice() {
    return unitPrice;
  }


  public void setUnitPrice(BigDecimal unitPrice) {
    this.unitPrice = unitPrice;
  }


  public CardOrder cancelledReason(String cancelledReason) {
    
    this.cancelledReason = cancelledReason;
    return this;
  }

   /**
   * The reason for cancellation.
   * @return cancelledReason
  **/
  @javax.annotation.Nullable
  public String getCancelledReason() {
    return cancelledReason;
  }


  public void setCancelledReason(String cancelledReason) {
    this.cancelledReason = cancelledReason;
  }


  public CardOrder availabilityDate(OffsetDateTime availabilityDate) {
    
    this.availabilityDate = availabilityDate;
    return this;
  }

   /**
   * A timestamp in ISO 8601 format of the date the resource was created.
   * @return availabilityDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getAvailabilityDate() {
    return availabilityDate;
  }


  public void setAvailabilityDate(OffsetDateTime availabilityDate) {
    this.availabilityDate = availabilityDate;
  }


  public CardOrder expectedAvailabilityDate(OffsetDateTime expectedAvailabilityDate) {
    
    this.expectedAvailabilityDate = expectedAvailabilityDate;
    return this;
  }

   /**
   * The fixed deadline for the cards to be printed.
   * @return expectedAvailabilityDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getExpectedAvailabilityDate() {
    return expectedAvailabilityDate;
  }


  public void setExpectedAvailabilityDate(OffsetDateTime expectedAvailabilityDate) {
    this.expectedAvailabilityDate = expectedAvailabilityDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CardOrder cardOrder = (CardOrder) o;
    return Objects.equals(this.dateCreated, cardOrder.dateCreated) &&
        Objects.equals(this.dateModified, cardOrder.dateModified) &&
        Objects.equals(this.deleted, cardOrder.deleted) &&
        Objects.equals(this._object, cardOrder._object) &&
        Objects.equals(this.id, cardOrder.id) &&
        Objects.equals(this.cardId, cardOrder.cardId) &&
        Objects.equals(this.status, cardOrder.status) &&
        Objects.equals(this.inventory, cardOrder.inventory) &&
        Objects.equals(this.quantityOrdered, cardOrder.quantityOrdered) &&
        Objects.equals(this.unitPrice, cardOrder.unitPrice) &&
        Objects.equals(this.cancelledReason, cardOrder.cancelledReason) &&
        Objects.equals(this.availabilityDate, cardOrder.availabilityDate) &&
        Objects.equals(this.expectedAvailabilityDate, cardOrder.expectedAvailabilityDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dateCreated, dateModified, deleted, _object, id, cardId, status, inventory, quantityOrdered, unitPrice, cancelledReason, availabilityDate, expectedAvailabilityDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CardOrder {\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateModified: ").append(toIndentedString(dateModified)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    _object: ").append(toIndentedString(_object)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    cardId: ").append(toIndentedString(cardId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    inventory: ").append(toIndentedString(inventory)).append("\n");
    sb.append("    quantityOrdered: ").append(toIndentedString(quantityOrdered)).append("\n");
    sb.append("    unitPrice: ").append(toIndentedString(unitPrice)).append("\n");
    sb.append("    cancelledReason: ").append(toIndentedString(cancelledReason)).append("\n");
    sb.append("    availabilityDate: ").append(toIndentedString(availabilityDate)).append("\n");
    sb.append("    expectedAvailabilityDate: ").append(toIndentedString(expectedAvailabilityDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("date_created");
    openapiFields.add("date_modified");
    openapiFields.add("deleted");
    openapiFields.add("object");
    openapiFields.add("id");
    openapiFields.add("card_id");
    openapiFields.add("status");
    openapiFields.add("inventory");
    openapiFields.add("quantity_ordered");
    openapiFields.add("unit_price");
    openapiFields.add("cancelled_reason");
    openapiFields.add("availability_date");
    openapiFields.add("expected_availability_date");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("date_created");
    openapiRequiredFields.add("date_modified");
    openapiRequiredFields.add("object");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CardOrder
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CardOrder.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CardOrder is not found in the empty JSON string", CardOrder.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CardOrder.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CardOrder` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CardOrder.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("object").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `object` to be a primitive type in the JSON string but got `%s`", jsonObj.get("object").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("card_id") != null && !jsonObj.get("card_id").isJsonNull()) && !jsonObj.get("card_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `card_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("card_id").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("cancelled_reason") != null && !jsonObj.get("cancelled_reason").isJsonNull()) && !jsonObj.get("cancelled_reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cancelled_reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cancelled_reason").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CardOrder.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CardOrder' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CardOrder> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CardOrder.class));

       return (TypeAdapter<T>) new TypeAdapter<CardOrder>() {
           @Override
           public void write(JsonWriter out, CardOrder value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CardOrder read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CardOrder given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CardOrder
  * @throws IOException if the JSON string is invalid with respect to CardOrder
  */
  public static CardOrder fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CardOrder.class);
  }

 /**
  * Convert an instance of CardOrder to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

