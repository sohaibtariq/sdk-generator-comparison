/*
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 
 *
 * The version of the OpenAPI document: 1.19.18
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.City;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ZipLookupCity
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-28T10:58:18.138843-08:00[America/Los_Angeles]")
public class ZipLookupCity {
  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private City city;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_COUNTY = "county";
  @SerializedName(SERIALIZED_NAME_COUNTY)
  private String county;

  public static final String SERIALIZED_NAME_COUNTY_FIPS = "county_fips";
  @SerializedName(SERIALIZED_NAME_COUNTY_FIPS)
  private String countyFips;

  public static final String SERIALIZED_NAME_PREFERRED = "preferred";
  @SerializedName(SERIALIZED_NAME_PREFERRED)
  private Boolean preferred;

  public ZipLookupCity() {
  }

  public ZipLookupCity city(City city) {
    
    this.city = city;
    return this;
  }

   /**
   * Get city
   * @return city
  **/
  @javax.annotation.Nonnull
  public City getCity() {
    return city;
  }


  public void setCity(City city) {
    this.city = city;
  }


  public ZipLookupCity state(String state) {
    
    this.state = state;
    return this;
  }

   /**
   * The &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_3166-2\&quot; target&#x3D;\&quot;_blank\&quot;&gt;ISO 3166-2&lt;/a&gt; two letter code for the state. 
   * @return state
  **/
  @javax.annotation.Nonnull
  public String getState() {
    return state;
  }


  public void setState(String state) {
    this.state = state;
  }


  public ZipLookupCity county(String county) {
    
    this.county = county;
    return this;
  }

   /**
   * County name of the address city.
   * @return county
  **/
  @javax.annotation.Nonnull
  public String getCounty() {
    return county;
  }


  public void setCounty(String county) {
    this.county = county;
  }


  public ZipLookupCity countyFips(String countyFips) {
    
    this.countyFips = countyFips;
    return this;
  }

   /**
   * A 5-digit &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/FIPS_county_code\&quot; target&#x3D;\&quot;_blank\&quot;&gt;FIPS county code&lt;/a&gt; which uniquely identifies &#x60;components[county]&#x60;. It consists of a 2-digit state code and a 3-digit county code. 
   * @return countyFips
  **/
  @javax.annotation.Nonnull
  public String getCountyFips() {
    return countyFips;
  }


  public void setCountyFips(String countyFips) {
    this.countyFips = countyFips;
  }


  public ZipLookupCity preferred(Boolean preferred) {
    
    this.preferred = preferred;
    return this;
  }

   /**
   * Indicates whether or not the city is the &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ZIP_Code#ZIP_Codes_and_previous_zoning_lines\&quot; target&#x3D;\&quot;_blank\&quot;&gt;USPS default city&lt;/a&gt; (preferred city) of a ZIP code. There is only one preferred city per ZIP code, which will always be in position 0 in the array of cities. 
   * @return preferred
  **/
  @javax.annotation.Nonnull
  public Boolean getPreferred() {
    return preferred;
  }


  public void setPreferred(Boolean preferred) {
    this.preferred = preferred;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ZipLookupCity zipLookupCity = (ZipLookupCity) o;
    return Objects.equals(this.city, zipLookupCity.city) &&
        Objects.equals(this.state, zipLookupCity.state) &&
        Objects.equals(this.county, zipLookupCity.county) &&
        Objects.equals(this.countyFips, zipLookupCity.countyFips) &&
        Objects.equals(this.preferred, zipLookupCity.preferred);
  }

  @Override
  public int hashCode() {
    return Objects.hash(city, state, county, countyFips, preferred);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ZipLookupCity {\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    county: ").append(toIndentedString(county)).append("\n");
    sb.append("    countyFips: ").append(toIndentedString(countyFips)).append("\n");
    sb.append("    preferred: ").append(toIndentedString(preferred)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("city");
    openapiFields.add("state");
    openapiFields.add("county");
    openapiFields.add("county_fips");
    openapiFields.add("preferred");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("city");
    openapiRequiredFields.add("state");
    openapiRequiredFields.add("county");
    openapiRequiredFields.add("county_fips");
    openapiRequiredFields.add("preferred");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ZipLookupCity
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ZipLookupCity.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ZipLookupCity is not found in the empty JSON string", ZipLookupCity.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ZipLookupCity.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ZipLookupCity` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ZipLookupCity.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `city`
      City.validateJsonElement(jsonObj.get("city"));
      if (!jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if (!jsonObj.get("county").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `county` to be a primitive type in the JSON string but got `%s`", jsonObj.get("county").toString()));
      }
      if (!jsonObj.get("county_fips").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `county_fips` to be a primitive type in the JSON string but got `%s`", jsonObj.get("county_fips").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ZipLookupCity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ZipLookupCity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ZipLookupCity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ZipLookupCity.class));

       return (TypeAdapter<T>) new TypeAdapter<ZipLookupCity>() {
           @Override
           public void write(JsonWriter out, ZipLookupCity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ZipLookupCity read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ZipLookupCity given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ZipLookupCity
  * @throws IOException if the JSON string is invalid with respect to ZipLookupCity
  */
  public static ZipLookupCity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ZipLookupCity.class);
  }

 /**
  * Convert an instance of ZipLookupCity to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

