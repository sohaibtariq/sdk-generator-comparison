/*
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 
 *
 * The version of the OpenAPI document: 1.19.18
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddressesListBeforeAfterParameter;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.TemplateVersion;
import org.openapitools.client.model.TemplateVersionDeletion;
import org.openapitools.client.model.TemplateVersionUpdatable;
import org.openapitools.client.model.TemplateVersionWritable;
import org.openapitools.client.model.TemplateVersionsList200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TemplateVersionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TemplateVersionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TemplateVersionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createTemplateVersion
     * @param tmplId The ID of the template the new version will be attached to (required)
     * @param templateVersionWritable  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the template version with the given template and version ids. </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTemplateVersionCall(String tmplId, TemplateVersionWritable templateVersionWritable, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = templateVersionWritable;

        // create path and map variables
        String localVarPath = "/templates/{tmpl_id}/versions"
            .replace("{" + "tmpl_id" + "}", localVarApiClient.escapeString(tmplId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTemplateVersionValidateBeforeCall(String tmplId, TemplateVersionWritable templateVersionWritable, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tmplId' is set
        if (tmplId == null) {
            throw new ApiException("Missing the required parameter 'tmplId' when calling createTemplateVersion(Async)");
        }

        // verify the required parameter 'templateVersionWritable' is set
        if (templateVersionWritable == null) {
            throw new ApiException("Missing the required parameter 'templateVersionWritable' when calling createTemplateVersion(Async)");
        }

        return createTemplateVersionCall(tmplId, templateVersionWritable, _callback);

    }

    /**
     * Create
     * Creates a new template version attached to the specified template.
     * @param tmplId The ID of the template the new version will be attached to (required)
     * @param templateVersionWritable  (required)
     * @return TemplateVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the template version with the given template and version ids. </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public TemplateVersion createTemplateVersion(String tmplId, TemplateVersionWritable templateVersionWritable) throws ApiException {
        ApiResponse<TemplateVersion> localVarResp = createTemplateVersionWithHttpInfo(tmplId, templateVersionWritable);
        return localVarResp.getData();
    }

    /**
     * Create
     * Creates a new template version attached to the specified template.
     * @param tmplId The ID of the template the new version will be attached to (required)
     * @param templateVersionWritable  (required)
     * @return ApiResponse&lt;TemplateVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the template version with the given template and version ids. </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TemplateVersion> createTemplateVersionWithHttpInfo(String tmplId, TemplateVersionWritable templateVersionWritable) throws ApiException {
        okhttp3.Call localVarCall = createTemplateVersionValidateBeforeCall(tmplId, templateVersionWritable, null);
        Type localVarReturnType = new TypeToken<TemplateVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create (asynchronously)
     * Creates a new template version attached to the specified template.
     * @param tmplId The ID of the template the new version will be attached to (required)
     * @param templateVersionWritable  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the template version with the given template and version ids. </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTemplateVersionAsync(String tmplId, TemplateVersionWritable templateVersionWritable, final ApiCallback<TemplateVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTemplateVersionValidateBeforeCall(tmplId, templateVersionWritable, _callback);
        Type localVarReturnType = new TypeToken<TemplateVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for templateVersionDelete
     * @param tmplId The ID of the template to which the version belongs. (required)
     * @param vrsnId id of the template_version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templateVersionDeleteCall(String tmplId, String vrsnId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/templates/{tmpl_id}/versions/{vrsn_id}"
            .replace("{" + "tmpl_id" + "}", localVarApiClient.escapeString(tmplId.toString()))
            .replace("{" + "vrsn_id" + "}", localVarApiClient.escapeString(vrsnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call templateVersionDeleteValidateBeforeCall(String tmplId, String vrsnId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tmplId' is set
        if (tmplId == null) {
            throw new ApiException("Missing the required parameter 'tmplId' when calling templateVersionDelete(Async)");
        }

        // verify the required parameter 'vrsnId' is set
        if (vrsnId == null) {
            throw new ApiException("Missing the required parameter 'vrsnId' when calling templateVersionDelete(Async)");
        }

        return templateVersionDeleteCall(tmplId, vrsnId, _callback);

    }

    /**
     * Delete
     * Permanently deletes a template version. A template&#39;s &#x60;published_version&#x60; can not be deleted.
     * @param tmplId The ID of the template to which the version belongs. (required)
     * @param vrsnId id of the template_version (required)
     * @return TemplateVersionDeletion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public TemplateVersionDeletion templateVersionDelete(String tmplId, String vrsnId) throws ApiException {
        ApiResponse<TemplateVersionDeletion> localVarResp = templateVersionDeleteWithHttpInfo(tmplId, vrsnId);
        return localVarResp.getData();
    }

    /**
     * Delete
     * Permanently deletes a template version. A template&#39;s &#x60;published_version&#x60; can not be deleted.
     * @param tmplId The ID of the template to which the version belongs. (required)
     * @param vrsnId id of the template_version (required)
     * @return ApiResponse&lt;TemplateVersionDeletion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TemplateVersionDeletion> templateVersionDeleteWithHttpInfo(String tmplId, String vrsnId) throws ApiException {
        okhttp3.Call localVarCall = templateVersionDeleteValidateBeforeCall(tmplId, vrsnId, null);
        Type localVarReturnType = new TypeToken<TemplateVersionDeletion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete (asynchronously)
     * Permanently deletes a template version. A template&#39;s &#x60;published_version&#x60; can not be deleted.
     * @param tmplId The ID of the template to which the version belongs. (required)
     * @param vrsnId id of the template_version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templateVersionDeleteAsync(String tmplId, String vrsnId, final ApiCallback<TemplateVersionDeletion> _callback) throws ApiException {

        okhttp3.Call localVarCall = templateVersionDeleteValidateBeforeCall(tmplId, vrsnId, _callback);
        Type localVarReturnType = new TypeToken<TemplateVersionDeletion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for templateVersionRetrieve
     * @param tmplId The ID of the template to which the version belongs. (required)
     * @param vrsnId id of the template_version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the template version with the given template and version ids. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templateVersionRetrieveCall(String tmplId, String vrsnId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/templates/{tmpl_id}/versions/{vrsn_id}"
            .replace("{" + "tmpl_id" + "}", localVarApiClient.escapeString(tmplId.toString()))
            .replace("{" + "vrsn_id" + "}", localVarApiClient.escapeString(vrsnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call templateVersionRetrieveValidateBeforeCall(String tmplId, String vrsnId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tmplId' is set
        if (tmplId == null) {
            throw new ApiException("Missing the required parameter 'tmplId' when calling templateVersionRetrieve(Async)");
        }

        // verify the required parameter 'vrsnId' is set
        if (vrsnId == null) {
            throw new ApiException("Missing the required parameter 'vrsnId' when calling templateVersionRetrieve(Async)");
        }

        return templateVersionRetrieveCall(tmplId, vrsnId, _callback);

    }

    /**
     * Retrieve
     * Retrieves the template version with the given template and version ids.
     * @param tmplId The ID of the template to which the version belongs. (required)
     * @param vrsnId id of the template_version (required)
     * @return TemplateVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the template version with the given template and version ids. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public TemplateVersion templateVersionRetrieve(String tmplId, String vrsnId) throws ApiException {
        ApiResponse<TemplateVersion> localVarResp = templateVersionRetrieveWithHttpInfo(tmplId, vrsnId);
        return localVarResp.getData();
    }

    /**
     * Retrieve
     * Retrieves the template version with the given template and version ids.
     * @param tmplId The ID of the template to which the version belongs. (required)
     * @param vrsnId id of the template_version (required)
     * @return ApiResponse&lt;TemplateVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the template version with the given template and version ids. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TemplateVersion> templateVersionRetrieveWithHttpInfo(String tmplId, String vrsnId) throws ApiException {
        okhttp3.Call localVarCall = templateVersionRetrieveValidateBeforeCall(tmplId, vrsnId, null);
        Type localVarReturnType = new TypeToken<TemplateVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve (asynchronously)
     * Retrieves the template version with the given template and version ids.
     * @param tmplId The ID of the template to which the version belongs. (required)
     * @param vrsnId id of the template_version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the template version with the given template and version ids. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templateVersionRetrieveAsync(String tmplId, String vrsnId, final ApiCallback<TemplateVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = templateVersionRetrieveValidateBeforeCall(tmplId, vrsnId, _callback);
        Type localVarReturnType = new TypeToken<TemplateVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for templateVersionUpdate
     * @param tmplId The ID of the template to which the version belongs. (required)
     * @param vrsnId id of the template_version (required)
     * @param templateVersionUpdatable  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the template version with the given template and version ids. </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templateVersionUpdateCall(String tmplId, String vrsnId, TemplateVersionUpdatable templateVersionUpdatable, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = templateVersionUpdatable;

        // create path and map variables
        String localVarPath = "/templates/{tmpl_id}/versions/{vrsn_id}"
            .replace("{" + "tmpl_id" + "}", localVarApiClient.escapeString(tmplId.toString()))
            .replace("{" + "vrsn_id" + "}", localVarApiClient.escapeString(vrsnId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call templateVersionUpdateValidateBeforeCall(String tmplId, String vrsnId, TemplateVersionUpdatable templateVersionUpdatable, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tmplId' is set
        if (tmplId == null) {
            throw new ApiException("Missing the required parameter 'tmplId' when calling templateVersionUpdate(Async)");
        }

        // verify the required parameter 'vrsnId' is set
        if (vrsnId == null) {
            throw new ApiException("Missing the required parameter 'vrsnId' when calling templateVersionUpdate(Async)");
        }

        // verify the required parameter 'templateVersionUpdatable' is set
        if (templateVersionUpdatable == null) {
            throw new ApiException("Missing the required parameter 'templateVersionUpdatable' when calling templateVersionUpdate(Async)");
        }

        return templateVersionUpdateCall(tmplId, vrsnId, templateVersionUpdatable, _callback);

    }

    /**
     * Update
     * Updates the template version with the given template and version ids.
     * @param tmplId The ID of the template to which the version belongs. (required)
     * @param vrsnId id of the template_version (required)
     * @param templateVersionUpdatable  (required)
     * @return TemplateVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the template version with the given template and version ids. </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public TemplateVersion templateVersionUpdate(String tmplId, String vrsnId, TemplateVersionUpdatable templateVersionUpdatable) throws ApiException {
        ApiResponse<TemplateVersion> localVarResp = templateVersionUpdateWithHttpInfo(tmplId, vrsnId, templateVersionUpdatable);
        return localVarResp.getData();
    }

    /**
     * Update
     * Updates the template version with the given template and version ids.
     * @param tmplId The ID of the template to which the version belongs. (required)
     * @param vrsnId id of the template_version (required)
     * @param templateVersionUpdatable  (required)
     * @return ApiResponse&lt;TemplateVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the template version with the given template and version ids. </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TemplateVersion> templateVersionUpdateWithHttpInfo(String tmplId, String vrsnId, TemplateVersionUpdatable templateVersionUpdatable) throws ApiException {
        okhttp3.Call localVarCall = templateVersionUpdateValidateBeforeCall(tmplId, vrsnId, templateVersionUpdatable, null);
        Type localVarReturnType = new TypeToken<TemplateVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update (asynchronously)
     * Updates the template version with the given template and version ids.
     * @param tmplId The ID of the template to which the version belongs. (required)
     * @param vrsnId id of the template_version (required)
     * @param templateVersionUpdatable  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the template version with the given template and version ids. </td><td>  * ratelimit-limit -  <br>  * ratelimit-remaining -  <br>  * ratelimit-reset -  <br>  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templateVersionUpdateAsync(String tmplId, String vrsnId, TemplateVersionUpdatable templateVersionUpdatable, final ApiCallback<TemplateVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = templateVersionUpdateValidateBeforeCall(tmplId, vrsnId, templateVersionUpdatable, _callback);
        Type localVarReturnType = new TypeToken<TemplateVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for templateVersionsList
     * @param tmplId The ID of the template associated with the retrieved versions (required)
     * @param limit How many results to return. (optional, default to 10)
     * @param beforeAfter &#x60;before&#x60; and &#x60;after&#x60; are both optional but only one of them can be in the query at a time.  (optional)
     * @param include Request that the response include the total count by specifying &#x60;include&#x3D;[\&quot;total_count\&quot;]&#x60;.  (optional)
     * @param dateCreated Filter by date created. Accepted formats are ISO-8601 date or datetime, e.g. &#x60;{ \&quot;gt\&quot;: \&quot;2012-01-01\&quot;, \&quot;lt\&quot;: \&quot;2012-01-31T12:34:56Z\&quot; }&#x60; where &#x60;gt&#x60; is &gt;, &#x60;lt&#x60; is &lt;, &#x60;gte&#x60; is ≥, and &#x60;lte&#x60; is ≤. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A dictionary with a data property that contains an array of up to &#x60;limit&#x60; template versions. Each entry in the array is a separate template version object. The previous and next page of template versions can be retrieved by calling the endpoint contained in the &#x60;previous_url&#x60; and &#x60;next_url&#x60; fields in the API response respectively.&lt;br&gt;If no more template versions are available beyond the current set of returned results, the &#x60;next_url&#x60; field will be empty. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templateVersionsListCall(String tmplId, Integer limit, AddressesListBeforeAfterParameter beforeAfter, List<String> include, Map<String, String> dateCreated, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/templates/{tmpl_id}/versions"
            .replace("{" + "tmpl_id" + "}", localVarApiClient.escapeString(tmplId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (beforeAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before/after", beforeAfter));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "include", include));
        }

        if (dateCreated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_created", dateCreated));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call templateVersionsListValidateBeforeCall(String tmplId, Integer limit, AddressesListBeforeAfterParameter beforeAfter, List<String> include, Map<String, String> dateCreated, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tmplId' is set
        if (tmplId == null) {
            throw new ApiException("Missing the required parameter 'tmplId' when calling templateVersionsList(Async)");
        }

        return templateVersionsListCall(tmplId, limit, beforeAfter, include, dateCreated, _callback);

    }

    /**
     * List
     * Returns a list of template versions for the given template ID. The template versions are sorted by creation date, with the most recently created appearing first. 
     * @param tmplId The ID of the template associated with the retrieved versions (required)
     * @param limit How many results to return. (optional, default to 10)
     * @param beforeAfter &#x60;before&#x60; and &#x60;after&#x60; are both optional but only one of them can be in the query at a time.  (optional)
     * @param include Request that the response include the total count by specifying &#x60;include&#x3D;[\&quot;total_count\&quot;]&#x60;.  (optional)
     * @param dateCreated Filter by date created. Accepted formats are ISO-8601 date or datetime, e.g. &#x60;{ \&quot;gt\&quot;: \&quot;2012-01-01\&quot;, \&quot;lt\&quot;: \&quot;2012-01-31T12:34:56Z\&quot; }&#x60; where &#x60;gt&#x60; is &gt;, &#x60;lt&#x60; is &lt;, &#x60;gte&#x60; is ≥, and &#x60;lte&#x60; is ≤. (optional)
     * @return TemplateVersionsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A dictionary with a data property that contains an array of up to &#x60;limit&#x60; template versions. Each entry in the array is a separate template version object. The previous and next page of template versions can be retrieved by calling the endpoint contained in the &#x60;previous_url&#x60; and &#x60;next_url&#x60; fields in the API response respectively.&lt;br&gt;If no more template versions are available beyond the current set of returned results, the &#x60;next_url&#x60; field will be empty. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public TemplateVersionsList200Response templateVersionsList(String tmplId, Integer limit, AddressesListBeforeAfterParameter beforeAfter, List<String> include, Map<String, String> dateCreated) throws ApiException {
        ApiResponse<TemplateVersionsList200Response> localVarResp = templateVersionsListWithHttpInfo(tmplId, limit, beforeAfter, include, dateCreated);
        return localVarResp.getData();
    }

    /**
     * List
     * Returns a list of template versions for the given template ID. The template versions are sorted by creation date, with the most recently created appearing first. 
     * @param tmplId The ID of the template associated with the retrieved versions (required)
     * @param limit How many results to return. (optional, default to 10)
     * @param beforeAfter &#x60;before&#x60; and &#x60;after&#x60; are both optional but only one of them can be in the query at a time.  (optional)
     * @param include Request that the response include the total count by specifying &#x60;include&#x3D;[\&quot;total_count\&quot;]&#x60;.  (optional)
     * @param dateCreated Filter by date created. Accepted formats are ISO-8601 date or datetime, e.g. &#x60;{ \&quot;gt\&quot;: \&quot;2012-01-01\&quot;, \&quot;lt\&quot;: \&quot;2012-01-31T12:34:56Z\&quot; }&#x60; where &#x60;gt&#x60; is &gt;, &#x60;lt&#x60; is &lt;, &#x60;gte&#x60; is ≥, and &#x60;lte&#x60; is ≤. (optional)
     * @return ApiResponse&lt;TemplateVersionsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A dictionary with a data property that contains an array of up to &#x60;limit&#x60; template versions. Each entry in the array is a separate template version object. The previous and next page of template versions can be retrieved by calling the endpoint contained in the &#x60;previous_url&#x60; and &#x60;next_url&#x60; fields in the API response respectively.&lt;br&gt;If no more template versions are available beyond the current set of returned results, the &#x60;next_url&#x60; field will be empty. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TemplateVersionsList200Response> templateVersionsListWithHttpInfo(String tmplId, Integer limit, AddressesListBeforeAfterParameter beforeAfter, List<String> include, Map<String, String> dateCreated) throws ApiException {
        okhttp3.Call localVarCall = templateVersionsListValidateBeforeCall(tmplId, limit, beforeAfter, include, dateCreated, null);
        Type localVarReturnType = new TypeToken<TemplateVersionsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List (asynchronously)
     * Returns a list of template versions for the given template ID. The template versions are sorted by creation date, with the most recently created appearing first. 
     * @param tmplId The ID of the template associated with the retrieved versions (required)
     * @param limit How many results to return. (optional, default to 10)
     * @param beforeAfter &#x60;before&#x60; and &#x60;after&#x60; are both optional but only one of them can be in the query at a time.  (optional)
     * @param include Request that the response include the total count by specifying &#x60;include&#x3D;[\&quot;total_count\&quot;]&#x60;.  (optional)
     * @param dateCreated Filter by date created. Accepted formats are ISO-8601 date or datetime, e.g. &#x60;{ \&quot;gt\&quot;: \&quot;2012-01-01\&quot;, \&quot;lt\&quot;: \&quot;2012-01-31T12:34:56Z\&quot; }&#x60; where &#x60;gt&#x60; is &gt;, &#x60;lt&#x60; is &lt;, &#x60;gte&#x60; is ≥, and &#x60;lte&#x60; is ≤. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A dictionary with a data property that contains an array of up to &#x60;limit&#x60; template versions. Each entry in the array is a separate template version object. The previous and next page of template versions can be retrieved by calling the endpoint contained in the &#x60;previous_url&#x60; and &#x60;next_url&#x60; fields in the API response respectively.&lt;br&gt;If no more template versions are available beyond the current set of returned results, the &#x60;next_url&#x60; field will be empty. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templateVersionsListAsync(String tmplId, Integer limit, AddressesListBeforeAfterParameter beforeAfter, List<String> include, Map<String, String> dateCreated, final ApiCallback<TemplateVersionsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = templateVersionsListValidateBeforeCall(tmplId, limit, beforeAfter, include, dateCreated, _callback);
        Type localVarReturnType = new TypeToken<TemplateVersionsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
