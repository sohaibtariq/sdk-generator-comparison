/*
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 
 *
 * The version of the OpenAPI document: 1.19.18
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.QrCodeCampaignsRedirectUrl;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Customize and place a QR code on all the postcards, letters or self mailers in a campaign. Redirect URLs can either be unique for each recipient, or a single link can be used for the whole campaign. See &#x60;redirect_url&#x60; attribute below for more details.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-28T10:58:18.138843-08:00[America/Los_Angeles]")
public class QrCodeCampaigns {
  /**
   * Sets how a QR code is being positioned in the document. Together with this, you should provide one of &#39;top&#39; or &#39;bottom&#39;, and one of &#39;left&#39; or &#39;right&#39;.
   */
  @JsonAdapter(PositionEnum.Adapter.class)
  public enum PositionEnum {
    RELATIVE("relative");

    private String value;

    PositionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PositionEnum fromValue(String value) {
      for (PositionEnum b : PositionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PositionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PositionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PositionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PositionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PositionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_POSITION = "position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private PositionEnum position;

  public static final String SERIALIZED_NAME_TOP = "top";
  @SerializedName(SERIALIZED_NAME_TOP)
  private String top;

  public static final String SERIALIZED_NAME_RIGHT = "right";
  @SerializedName(SERIALIZED_NAME_RIGHT)
  private String right;

  public static final String SERIALIZED_NAME_LEFT = "left";
  @SerializedName(SERIALIZED_NAME_LEFT)
  private String left;

  public static final String SERIALIZED_NAME_BOTTOM = "bottom";
  @SerializedName(SERIALIZED_NAME_BOTTOM)
  private String bottom;

  public static final String SERIALIZED_NAME_REDIRECT_URL = "redirect_url";
  @SerializedName(SERIALIZED_NAME_REDIRECT_URL)
  private QrCodeCampaignsRedirectUrl redirectUrl;

  public static final String SERIALIZED_NAME_WIDTH = "width";
  @SerializedName(SERIALIZED_NAME_WIDTH)
  private String width;

  public static final String SERIALIZED_NAME_PAGES = "pages";
  @SerializedName(SERIALIZED_NAME_PAGES)
  private String pages;

  public QrCodeCampaigns() {
  }

  public QrCodeCampaigns position(PositionEnum position) {
    
    this.position = position;
    return this;
  }

   /**
   * Sets how a QR code is being positioned in the document. Together with this, you should provide one of &#39;top&#39; or &#39;bottom&#39;, and one of &#39;left&#39; or &#39;right&#39;.
   * @return position
  **/
  @javax.annotation.Nonnull
  public PositionEnum getPosition() {
    return position;
  }


  public void setPosition(PositionEnum position) {
    this.position = position;
  }


  public QrCodeCampaigns top(String top) {
    
    this.top = top;
    return this;
  }

   /**
   * Vertical distance (in inches) to place QR code from the top. Only allowed if \&quot;bottom\&quot; isn&#39;t provided.
   * @return top
  **/
  @javax.annotation.Nullable
  public String getTop() {
    return top;
  }


  public void setTop(String top) {
    this.top = top;
  }


  public QrCodeCampaigns right(String right) {
    
    this.right = right;
    return this;
  }

   /**
   * Horizonal distance (in inches) to place QR code from the right. Only allowed if \&quot;left\&quot; isn&#39;t provided.
   * @return right
  **/
  @javax.annotation.Nullable
  public String getRight() {
    return right;
  }


  public void setRight(String right) {
    this.right = right;
  }


  public QrCodeCampaigns left(String left) {
    
    this.left = left;
    return this;
  }

   /**
   * Horizonal distance (in inches) to place QR code from the left. Only allowed if \&quot;right\&quot; isn&#39;t provided.
   * @return left
  **/
  @javax.annotation.Nullable
  public String getLeft() {
    return left;
  }


  public void setLeft(String left) {
    this.left = left;
  }


  public QrCodeCampaigns bottom(String bottom) {
    
    this.bottom = bottom;
    return this;
  }

   /**
   * Vertical distance (in inches) to place QR code from the bottom. Only allowed if \&quot;top\&quot; isn&#39;t provided.
   * @return bottom
  **/
  @javax.annotation.Nullable
  public String getBottom() {
    return bottom;
  }


  public void setBottom(String bottom) {
    this.bottom = bottom;
  }


  public QrCodeCampaigns redirectUrl(QrCodeCampaignsRedirectUrl redirectUrl) {
    
    this.redirectUrl = redirectUrl;
    return this;
  }

   /**
   * Get redirectUrl
   * @return redirectUrl
  **/
  @javax.annotation.Nullable
  public QrCodeCampaignsRedirectUrl getRedirectUrl() {
    return redirectUrl;
  }


  public void setRedirectUrl(QrCodeCampaignsRedirectUrl redirectUrl) {
    this.redirectUrl = redirectUrl;
  }


  public QrCodeCampaigns width(String width) {
    
    this.width = width;
    return this;
  }

   /**
   * The size (in inches) of the QR code with a minimum of 1 inch. All QR codes are generated as a square.
   * @return width
  **/
  @javax.annotation.Nonnull
  public String getWidth() {
    return width;
  }


  public void setWidth(String width) {
    this.width = width;
  }


  public QrCodeCampaigns pages(String pages) {
    
    this.pages = pages;
    return this;
  }

   /**
   * Specify the pages where the QR code should be stamped in a comma separated format. Your QR code can be printed in the same position on multiple pages. For postcards, the values should either be \&quot;front\&quot;, \&quot;back\&quot; (for either front or back) or \&quot;front,back\&quot; (for the QR code to be printed on both sides). For self-mailers, the values should either be \&quot;inside\&quot;, \&quot;outside\&quot; (for either inside or outside) or \&quot;inside,outside\&quot; (for the QR code to be printed on both sides). For letters, the values can be specific page numbers (\&quot;1\&quot;, \&quot;3\&quot;), page number ranges such as \&quot;1-3\&quot;, or a comma separated combination of both (\&quot;1,3,5-7\&quot;).
   * @return pages
  **/
  @javax.annotation.Nullable
  public String getPages() {
    return pages;
  }


  public void setPages(String pages) {
    this.pages = pages;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QrCodeCampaigns qrCodeCampaigns = (QrCodeCampaigns) o;
    return Objects.equals(this.position, qrCodeCampaigns.position) &&
        Objects.equals(this.top, qrCodeCampaigns.top) &&
        Objects.equals(this.right, qrCodeCampaigns.right) &&
        Objects.equals(this.left, qrCodeCampaigns.left) &&
        Objects.equals(this.bottom, qrCodeCampaigns.bottom) &&
        Objects.equals(this.redirectUrl, qrCodeCampaigns.redirectUrl) &&
        Objects.equals(this.width, qrCodeCampaigns.width) &&
        Objects.equals(this.pages, qrCodeCampaigns.pages);
  }

  @Override
  public int hashCode() {
    return Objects.hash(position, top, right, left, bottom, redirectUrl, width, pages);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QrCodeCampaigns {\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    top: ").append(toIndentedString(top)).append("\n");
    sb.append("    right: ").append(toIndentedString(right)).append("\n");
    sb.append("    left: ").append(toIndentedString(left)).append("\n");
    sb.append("    bottom: ").append(toIndentedString(bottom)).append("\n");
    sb.append("    redirectUrl: ").append(toIndentedString(redirectUrl)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("    pages: ").append(toIndentedString(pages)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("position");
    openapiFields.add("top");
    openapiFields.add("right");
    openapiFields.add("left");
    openapiFields.add("bottom");
    openapiFields.add("redirect_url");
    openapiFields.add("width");
    openapiFields.add("pages");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("position");
    openapiRequiredFields.add("width");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to QrCodeCampaigns
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QrCodeCampaigns.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QrCodeCampaigns is not found in the empty JSON string", QrCodeCampaigns.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QrCodeCampaigns.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QrCodeCampaigns` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : QrCodeCampaigns.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("position").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `position` to be a primitive type in the JSON string but got `%s`", jsonObj.get("position").toString()));
      }
      // validate the required field `position`
      PositionEnum.validateJsonElement(jsonObj.get("position"));
      if ((jsonObj.get("top") != null && !jsonObj.get("top").isJsonNull()) && !jsonObj.get("top").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `top` to be a primitive type in the JSON string but got `%s`", jsonObj.get("top").toString()));
      }
      if ((jsonObj.get("right") != null && !jsonObj.get("right").isJsonNull()) && !jsonObj.get("right").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `right` to be a primitive type in the JSON string but got `%s`", jsonObj.get("right").toString()));
      }
      if ((jsonObj.get("left") != null && !jsonObj.get("left").isJsonNull()) && !jsonObj.get("left").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `left` to be a primitive type in the JSON string but got `%s`", jsonObj.get("left").toString()));
      }
      if ((jsonObj.get("bottom") != null && !jsonObj.get("bottom").isJsonNull()) && !jsonObj.get("bottom").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bottom` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bottom").toString()));
      }
      // validate the optional field `redirect_url`
      if (jsonObj.get("redirect_url") != null && !jsonObj.get("redirect_url").isJsonNull()) {
        QrCodeCampaignsRedirectUrl.validateJsonElement(jsonObj.get("redirect_url"));
      }
      if (!jsonObj.get("width").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `width` to be a primitive type in the JSON string but got `%s`", jsonObj.get("width").toString()));
      }
      if ((jsonObj.get("pages") != null && !jsonObj.get("pages").isJsonNull()) && !jsonObj.get("pages").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pages` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pages").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QrCodeCampaigns.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QrCodeCampaigns' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QrCodeCampaigns> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QrCodeCampaigns.class));

       return (TypeAdapter<T>) new TypeAdapter<QrCodeCampaigns>() {
           @Override
           public void write(JsonWriter out, QrCodeCampaigns value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QrCodeCampaigns read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of QrCodeCampaigns given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of QrCodeCampaigns
  * @throws IOException if the JSON string is invalid with respect to QrCodeCampaigns
  */
  public static QrCodeCampaigns fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QrCodeCampaigns.class);
  }

 /**
  * Convert an instance of QrCodeCampaigns to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

