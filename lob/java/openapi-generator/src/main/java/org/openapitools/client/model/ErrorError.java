/*
 * Lob
 * The Lob API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and uses HTTP response codes to indicate any API errors. <p> 
 *
 * The version of the OpenAPI document: 1.19.18
 * Contact: lob-openapi@lob.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.FailureStatusCode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ErrorError
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-28T10:58:18.138843-08:00[America/Los_Angeles]")
public class ErrorError {
  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_STATUS_CODE = "status_code";
  @SerializedName(SERIALIZED_NAME_STATUS_CODE)
  private FailureStatusCode statusCode;

  /**
   * A pre-defined string identifying an error. Error codes fall into three categories:  **GENERIC** * &#x60;bad_request&#x60; - 422: an invalid request was made. See error message for details. * &#x60;conflict&#x60; - 409/422: this operation would leave data in a conflicted state. * &#x60;feature_limit_reached&#x60; - 403: the account has reached its resource limit and requires upgrading to add more. * &#x60;internal_server_error&#x60; - 500: an error has occured on Lob&#39;s servers. Please try request again. * &#x60;invalid&#x60; - 422: an invalid request was made. See error message for details. * &#x60;not_deletable&#x60; - 422: an attempt was made to delete a resource, but the resource cannot be deleted. * &#x60;not_found&#x60; - 404: the requested resource was not found. * &#x60;request_timeout&#x60; - 408: the request took too long. Please try again. * &#x60;service_unavailable&#x60; - 503: the Lob servers are temporarily unavailable. Please try agian. * &#x60;unrecognized_endpoint&#x60; - 404: the requested endpoint doesn&#39;t exist. * &#x60;unsupported_lob_version&#x60; - 422: an unsupported Lob API version was requested.  **ADVANCED** * &#x60;address_length_exceeds_limit&#x60; - 422: the sum of to.address_line1 and to.address_line2 cannot surpass 50 characters. * &#x60;bank_account_already_verified&#x60; - 422: the bank account has already been verified. * &#x60;bank_error&#x60; - 422: there&#39;s an issue with the bank account. * &#x60;billing_address_required&#x60; - 403: in order to create a live mail piece, your account needs to set up a billing address. * &#x60;custom_envelope_inventory_depleted&#x60; - 422: custom envelope inventory is depleted, and more will need to be ordered. * &#x60;deleted_bank_account&#x60; - 404: checks cannot be created with a deleted bank account. * &#x60;failed_deliverability_strictness&#x60; - 422: the &#x60;to&#x60; address doesn&#39;t meet strictness requirements. See &lt;a href&#x3D;\&quot;https://dashboard.lob.com/#/settings/account\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Account Settings&lt;/a&gt; to configure strictness. * &#x60;file_pages_below_min&#x60; - 422: not enough pages. * &#x60;file_pages_exceed_max&#x60; - 422: too many pages. * &#x60;file_size_exceeds_limit&#x60; - 422: the file size is too large. See description for details. * &#x60;foreign_return_address&#x60; - 422: the &#x60;from&#x60; address must be a US address. * &#x60;inconsistent_page_dimensions&#x60; - 422: all pages of the input file must have the same dimensions. * &#x60;invalid_bank_account&#x60; - 422: the provided bank routing number is invalid. * &#x60;invalid_bank_account_verification&#x60; - 422: verification amounts do not match. * &#x60;invalid_check_international&#x60; - 422: checks cannot be sent internationally. * &#x60;invalid_country_covid&#x60; - 422: the postal service in the specified country is currently unable to process the request due to COVID-19 restrictions. * &#x60;invalid_file&#x60; - 422: the file is invalid. * &#x60;invalid_file_dimensions&#x60; - 422: file dimensions are incorrect for the selected mail type. * &#x60;invalid_file_download_time&#x60; - 422: file download from remote server took too long. * &#x60;invalid_file_url&#x60; - 422: the file URL when creating a resource is invalid. * &#x60;invalid_image_dpi&#x60; - 422: DPI must be at least 300. * &#x60;invalid_international_feature&#x60; - 422: the specified product cannot be sent to the destination. * &#x60;invalid_perforation_return_envelope&#x60; - 422: both &#x60;return_envelope&#x60; and &#x60;perforation&#x60; must be used together. * &#x60;invalid_template_html&#x60; - 422: the provided HTML is invalid. * &#x60;mail_use_type_can_not_be_null&#x60; - 422: use_type must be one of \&quot;marketing\&quot; or \&quot;operational\&quot;. Alternatively, an admin can set the account default use type in Account Settings. * &#x60;merge_variable_required&#x60; - 422: a required merge variable is missing. * &#x60;merge_variable_whitespace&#x60; - 422: merge variable names cannot contain whitespace. * &#x60;payment_method_unverified&#x60; - 401: you must have a verified bank account or credit card to submit live requests. * &#x60;pdf_encrypted&#x60; - 422: an encrypted PDF was provided. * &#x60;special_characters_restricted&#x60; - 422: cannot use special characters for merge variable names. * &#x60;unembedded_fonts&#x60; - 422: the provided PDF contains non-standard unembedded fonts. See description for details.  **AUTHENTICATION** * &#x60;email_required&#x60; - 401: account must have a verified email address before creating live resources. * &#x60;invalid_api_key&#x60; - 401/403: the API key is invalid. * &#x60;publishable_key_not_allowed&#x60; - 403: the requested operation needs a secret key, not a publishable key. See [API Keys](#section/API-Keys) for more information. * &#x60;rate_limit_exceeded&#x60; - 429: requests were sent too quickly and must be slowed down. * &#x60;unauthorized&#x60; - 401: the request isn&#39;t authorized. * &#x60;unauthorized_token&#x60; - 401: token isn&#39;t authorized. 
   */
  @JsonAdapter(CodeEnum.Adapter.class)
  public enum CodeEnum {
    BAD_REQUEST("bad_request"),
    
    CONFLICT("conflict"),
    
    FEATURE_LIMIT_REACHED("feature_limit_reached"),
    
    INTERNAL_SERVER_ERROR("internal_server_error"),
    
    INVALID("invalid"),
    
    NOT_DELETABLE("not_deletable"),
    
    NOT_FOUND("not_found"),
    
    REQUEST_TIMEOUT("request_timeout"),
    
    SERVICE_UNAVAILABLE("service_unavailable"),
    
    UNRECOGNIZED_ENDPOINT("unrecognized_endpoint"),
    
    UNSUPPORTED_LOB_VERSION("unsupported_lob_version"),
    
    ADDRESS_LENGTH_EXCEEDS_LIMIT("address_length_exceeds_limit"),
    
    BANK_ACCOUNT_ALREADY_VERIFIED("bank_account_already_verified"),
    
    BANK_ERROR("bank_error"),
    
    BILLING_ADDRESS_REQUIRED("billing_address_required"),
    
    CUSTOM_ENVELOPE_INVENTORY_DEPLETED("custom_envelope_inventory_depleted"),
    
    DELETED_BANK_ACCOUNT("deleted_bank_account"),
    
    FAILED_DELIVERABILITY_STRICTNESS("failed_deliverability_strictness"),
    
    FILE_PAGES_BELOW_MIN("file_pages_below_min"),
    
    FILE_PAGES_EXCEED_MAX("file_pages_exceed_max"),
    
    FILE_SIZE_EXCEEDS_LIMIT("file_size_exceeds_limit"),
    
    FOREIGN_RETURN_ADDRESS("foreign_return_address"),
    
    INCONSISTENT_PAGE_DIMENSIONS("inconsistent_page_dimensions"),
    
    INVALID_BANK_ACCOUNT("invalid_bank_account"),
    
    INVALID_BANK_ACCOUNT_VERIFICATION("invalid_bank_account_verification"),
    
    INVALID_CHECK_INTERNATIONAL("invalid_check_international"),
    
    INVALID_COUNTRY_COVID("invalid_country_covid"),
    
    INVALID_FILE("invalid_file"),
    
    INVALID_FILE_DIMENSIONS("invalid_file_dimensions"),
    
    INVALID_FILE_DOWNLOAD_TIME("invalid_file_download_time"),
    
    INVALID_FILE_URL("invalid_file_url"),
    
    INVALID_IMAGE_DPI("invalid_image_dpi"),
    
    INVALID_INTERNATIONAL_FEATURE("invalid_international_feature"),
    
    INVALID_PERFORATION_RETURN_ENVELOPE("invalid_perforation_return_envelope"),
    
    INVALID_TEMPLATE_HTML("invalid_template_html"),
    
    MAIL_USE_TYPE_CAN_NOT_BE_NULL("mail_use_type_can_not_be_null"),
    
    MERGE_VARIABLE_REQUIRED("merge_variable_required"),
    
    MERGE_VARIABLE_WHITESPACE("merge_variable_whitespace"),
    
    PAYMENT_METHOD_UNVERIFIED("payment_method_unverified"),
    
    PDF_ENCRYPTED("pdf_encrypted"),
    
    SPECIAL_CHARACTERS_RESTRICTED("special_characters_restricted"),
    
    UNEMBEDDED_FONTS("unembedded_fonts"),
    
    EMAIL_REQUIRED("email_required"),
    
    INVALID_API_KEY("invalid_api_key"),
    
    PUBLISHABLE_KEY_NOT_ALLOWED("publishable_key_not_allowed"),
    
    RATE_LIMIT_EXCEEDED("rate_limit_exceeded"),
    
    UNAUTHORIZED("unauthorized"),
    
    UNAUTHORIZED_TOKEN("unauthorized_token");

    private String value;

    CodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CodeEnum fromValue(String value) {
      for (CodeEnum b : CodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CodeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CodeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private CodeEnum code;

  public ErrorError() {
  }

  public ErrorError message(String message) {
    
    this.message = message;
    return this;
  }

   /**
   * A human-readable message with more details about the error
   * @return message
  **/
  @javax.annotation.Nonnull
  public String getMessage() {
    return message;
  }


  public void setMessage(String message) {
    this.message = message;
  }


  public ErrorError statusCode(FailureStatusCode statusCode) {
    
    this.statusCode = statusCode;
    return this;
  }

   /**
   * Get statusCode
   * @return statusCode
  **/
  @javax.annotation.Nonnull
  public FailureStatusCode getStatusCode() {
    return statusCode;
  }


  public void setStatusCode(FailureStatusCode statusCode) {
    this.statusCode = statusCode;
  }


  public ErrorError code(CodeEnum code) {
    
    this.code = code;
    return this;
  }

   /**
   * A pre-defined string identifying an error. Error codes fall into three categories:  **GENERIC** * &#x60;bad_request&#x60; - 422: an invalid request was made. See error message for details. * &#x60;conflict&#x60; - 409/422: this operation would leave data in a conflicted state. * &#x60;feature_limit_reached&#x60; - 403: the account has reached its resource limit and requires upgrading to add more. * &#x60;internal_server_error&#x60; - 500: an error has occured on Lob&#39;s servers. Please try request again. * &#x60;invalid&#x60; - 422: an invalid request was made. See error message for details. * &#x60;not_deletable&#x60; - 422: an attempt was made to delete a resource, but the resource cannot be deleted. * &#x60;not_found&#x60; - 404: the requested resource was not found. * &#x60;request_timeout&#x60; - 408: the request took too long. Please try again. * &#x60;service_unavailable&#x60; - 503: the Lob servers are temporarily unavailable. Please try agian. * &#x60;unrecognized_endpoint&#x60; - 404: the requested endpoint doesn&#39;t exist. * &#x60;unsupported_lob_version&#x60; - 422: an unsupported Lob API version was requested.  **ADVANCED** * &#x60;address_length_exceeds_limit&#x60; - 422: the sum of to.address_line1 and to.address_line2 cannot surpass 50 characters. * &#x60;bank_account_already_verified&#x60; - 422: the bank account has already been verified. * &#x60;bank_error&#x60; - 422: there&#39;s an issue with the bank account. * &#x60;billing_address_required&#x60; - 403: in order to create a live mail piece, your account needs to set up a billing address. * &#x60;custom_envelope_inventory_depleted&#x60; - 422: custom envelope inventory is depleted, and more will need to be ordered. * &#x60;deleted_bank_account&#x60; - 404: checks cannot be created with a deleted bank account. * &#x60;failed_deliverability_strictness&#x60; - 422: the &#x60;to&#x60; address doesn&#39;t meet strictness requirements. See &lt;a href&#x3D;\&quot;https://dashboard.lob.com/#/settings/account\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Account Settings&lt;/a&gt; to configure strictness. * &#x60;file_pages_below_min&#x60; - 422: not enough pages. * &#x60;file_pages_exceed_max&#x60; - 422: too many pages. * &#x60;file_size_exceeds_limit&#x60; - 422: the file size is too large. See description for details. * &#x60;foreign_return_address&#x60; - 422: the &#x60;from&#x60; address must be a US address. * &#x60;inconsistent_page_dimensions&#x60; - 422: all pages of the input file must have the same dimensions. * &#x60;invalid_bank_account&#x60; - 422: the provided bank routing number is invalid. * &#x60;invalid_bank_account_verification&#x60; - 422: verification amounts do not match. * &#x60;invalid_check_international&#x60; - 422: checks cannot be sent internationally. * &#x60;invalid_country_covid&#x60; - 422: the postal service in the specified country is currently unable to process the request due to COVID-19 restrictions. * &#x60;invalid_file&#x60; - 422: the file is invalid. * &#x60;invalid_file_dimensions&#x60; - 422: file dimensions are incorrect for the selected mail type. * &#x60;invalid_file_download_time&#x60; - 422: file download from remote server took too long. * &#x60;invalid_file_url&#x60; - 422: the file URL when creating a resource is invalid. * &#x60;invalid_image_dpi&#x60; - 422: DPI must be at least 300. * &#x60;invalid_international_feature&#x60; - 422: the specified product cannot be sent to the destination. * &#x60;invalid_perforation_return_envelope&#x60; - 422: both &#x60;return_envelope&#x60; and &#x60;perforation&#x60; must be used together. * &#x60;invalid_template_html&#x60; - 422: the provided HTML is invalid. * &#x60;mail_use_type_can_not_be_null&#x60; - 422: use_type must be one of \&quot;marketing\&quot; or \&quot;operational\&quot;. Alternatively, an admin can set the account default use type in Account Settings. * &#x60;merge_variable_required&#x60; - 422: a required merge variable is missing. * &#x60;merge_variable_whitespace&#x60; - 422: merge variable names cannot contain whitespace. * &#x60;payment_method_unverified&#x60; - 401: you must have a verified bank account or credit card to submit live requests. * &#x60;pdf_encrypted&#x60; - 422: an encrypted PDF was provided. * &#x60;special_characters_restricted&#x60; - 422: cannot use special characters for merge variable names. * &#x60;unembedded_fonts&#x60; - 422: the provided PDF contains non-standard unembedded fonts. See description for details.  **AUTHENTICATION** * &#x60;email_required&#x60; - 401: account must have a verified email address before creating live resources. * &#x60;invalid_api_key&#x60; - 401/403: the API key is invalid. * &#x60;publishable_key_not_allowed&#x60; - 403: the requested operation needs a secret key, not a publishable key. See [API Keys](#section/API-Keys) for more information. * &#x60;rate_limit_exceeded&#x60; - 429: requests were sent too quickly and must be slowed down. * &#x60;unauthorized&#x60; - 401: the request isn&#39;t authorized. * &#x60;unauthorized_token&#x60; - 401: token isn&#39;t authorized. 
   * @return code
  **/
  @javax.annotation.Nonnull
  public CodeEnum getCode() {
    return code;
  }


  public void setCode(CodeEnum code) {
    this.code = code;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ErrorError errorError = (ErrorError) o;
    return Objects.equals(this.message, errorError.message) &&
        Objects.equals(this.statusCode, errorError.statusCode) &&
        Objects.equals(this.code, errorError.code);
  }

  @Override
  public int hashCode() {
    return Objects.hash(message, statusCode, code);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ErrorError {\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    statusCode: ").append(toIndentedString(statusCode)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("message");
    openapiFields.add("status_code");
    openapiFields.add("code");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("message");
    openapiRequiredFields.add("status_code");
    openapiRequiredFields.add("code");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ErrorError
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ErrorError.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ErrorError is not found in the empty JSON string", ErrorError.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ErrorError.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ErrorError` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ErrorError.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      // validate the required field `status_code`
      FailureStatusCode.validateJsonElement(jsonObj.get("status_code"));
      if (!jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      // validate the required field `code`
      CodeEnum.validateJsonElement(jsonObj.get("code"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ErrorError.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ErrorError' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ErrorError> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ErrorError.class));

       return (TypeAdapter<T>) new TypeAdapter<ErrorError>() {
           @Override
           public void write(JsonWriter out, ErrorError value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ErrorError read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ErrorError given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ErrorError
  * @throws IOException if the JSON string is invalid with respect to ErrorError
  */
  public static ErrorError fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ErrorError.class);
  }

 /**
  * Convert an instance of ErrorError to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

