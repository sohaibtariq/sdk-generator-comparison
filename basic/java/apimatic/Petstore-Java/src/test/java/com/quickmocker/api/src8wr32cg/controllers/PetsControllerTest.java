/*
 * PetstoreLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.quickmocker.api.src8wr32cg.controllers;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import com.quickmocker.api.src8wr32cg.ApiHelper;
import com.quickmocker.api.src8wr32cg.PetstoreClient;
import com.quickmocker.api.src8wr32cg.exceptions.ApiException;
import com.quickmocker.api.src8wr32cg.models.Pet;
import io.apimatic.core.utilities.TestHelper;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

public class PetsControllerTest extends BaseControllerTest {

    /**
     * Client instance.
     */
    private static PetstoreClient client;
    
    /**
     * Controller instance (for all tests).
     */
    private static PetsController controller;

    /**
     * Setup test class.
     */
    @BeforeClass
    public static void setUpClass() {
        client = createConfiguration();
        controller = client.getPetsController();
    }

    /**
     * Tear down test class.
     */
    @AfterClass
    public static void tearDownClass() {
        controller = null;
    }

    /**
     * Create a pet and key characteristics.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestCreatePet() throws Exception {
        // Parameters for the API call
        Pet body = ApiHelper.deserialize(
                "{\"id\":12345,\"name\":\"Indiana\",\"petType\":\"dog\"}",
                Pet.class);

        // Set callback and perform API call
        try {
            controller.createPet(body);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 201", 
                201, httpResponse.getResponse().getStatusCode());

    }

    /**
     * List all pets.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestListPets() throws Exception {
        // Parameters for the API call
        Integer limit = 10;

        // Set callback and perform API call
        List<Pet> result = null;
        try {
            result = controller.listPets(limit);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys",
                TestHelper.isArrayOfJsonObjectsProperSubsetOf(
                "[{\"id\":10101,\"name\":\"indiana\",\"petType\":\"cat\"}]",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

    /**
     * Info for a specific pet.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestShowPetById() throws Exception {
        // Parameters for the API call
        String petId = 
                "33918";

        // Set callback and perform API call
        Pet result = null;
        try {
            result = controller.showPetById(petId);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test headers
        Map<String, String> headers = new LinkedHashMap<String, String>();
        headers.put("Content-Type", "application/json");
        
        assertTrue("Headers do not match", TestHelper.areHeadersProperSubsetOf(
                headers, httpResponse.getResponse().getHeaders().asSimpleMap(), true));

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertTrue("Response body does not match in keys", 
                TestHelper.isJsonObjectProperSubsetOf(
                "{\"id\":12345,\"name\":\"Cody\",\"petType\":\"dog\"}",
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()), 
                false, true, false));
    }

}
