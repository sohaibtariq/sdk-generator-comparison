/*
 * PetstoreLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.quickmocker.api.src8wr32cg.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.quickmocker.api.src8wr32cg.ApiHelper;
import com.quickmocker.api.src8wr32cg.Server;
import com.quickmocker.api.src8wr32cg.exceptions.ApiException;
import com.quickmocker.api.src8wr32cg.exceptions.ErrorException;
import com.quickmocker.api.src8wr32cg.http.request.HttpMethod;
import com.quickmocker.api.src8wr32cg.models.Pet;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class PetsController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public PetsController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * Create a pet and key characteristics.
     * @param  body  Required parameter: A single Pet object used to create a new Pet
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void createPet(
            final Pet body) throws ApiException, IOException {
        prepareCreatePetRequest(body).execute();
    }

    /**
     * Create a pet and key characteristics.
     * @param  body  Required parameter: A single Pet object used to create a new Pet
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> createPetAsync(
            final Pet body) {
        try { 
            return prepareCreatePetRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for createPet.
     */
    private ApiCall<Void, ApiException> prepareCreatePetRequest(
            final Pet body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/pets")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("unexpected error",
                                (reason, context) -> new ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * List all pets.
     * @param  limit  Optional parameter: limit the number of objects returned to max 100
     * @return    Returns the List of Pet response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<Pet> listPets(
            final Integer limit) throws ApiException, IOException {
        return prepareListPetsRequest(limit).execute();
    }

    /**
     * List all pets.
     * @param  limit  Optional parameter: limit the number of objects returned to max 100
     * @return    Returns the List of Pet response from the API call
     */
    public CompletableFuture<List<Pet>> listPetsAsync(
            final Integer limit) {
        try { 
            return prepareListPetsRequest(limit).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for listPets.
     */
    private ApiCall<List<Pet>, ApiException> prepareListPetsRequest(
            final Integer limit) throws IOException {
        return new ApiCall.Builder<List<Pet>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/pets")
                        .queryParam(param -> param.key("limit")
                                .value(limit).isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        Pet[].class))
                        .nullify404(false)
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("unexpected error",
                                (reason, context) -> new ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Info for a specific pet.
     * @param  petId  Required parameter: The id of the pet to retrieve
     * @return    Returns the Pet response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Pet showPetById(
            final String petId) throws ApiException, IOException {
        return prepareShowPetByIdRequest(petId).execute();
    }

    /**
     * Info for a specific pet.
     * @param  petId  Required parameter: The id of the pet to retrieve
     * @return    Returns the Pet response from the API call
     */
    public CompletableFuture<Pet> showPetByIdAsync(
            final String petId) {
        try { 
            return prepareShowPetByIdRequest(petId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for showPetById.
     */
    private ApiCall<Pet, ApiException> prepareShowPetByIdRequest(
            final String petId) throws IOException {
        return new ApiCall.Builder<Pet, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/pets/{petId}")
                        .templateParam(param -> param.key("petId").value(petId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Pet.class))
                        .nullify404(false)
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("unexpected error",
                                (reason, context) -> new ErrorException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}