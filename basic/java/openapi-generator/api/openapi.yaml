openapi: 3.1.0
info:
  contact:
    email: support@sdks.io
    name: APIMatic
    url: https://www.sdks.io/contact
  description: "The API enables users to view detailed information about a specific\
    \ pet store and its available pets. The API can be used by pet owners, pet adoption\
    \ agencies, and anyone looking for information about pets in a particular area."
  title: Petstore
  version: 1.0.0
servers:
- description: A petstore staging server
  url: https://src8wr32cg.api.quickmocker.com
security:
- bearerAuth: []
tags:
- description: the pet tag for grouping similar methods
  name: pets
paths:
  /pets:
    get:
      deprecated: false
      description: List all pets
      operationId: listPets
      parameters:
      - description: limit the number of objects returned to max 100
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          maximum: 100
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              example:
              - id: 12345
                name: Indiana
                petType: dog
              - id: 56789
                name: Shadow
                petType: cat
              schema:
                $ref: '#/components/schemas/Pets'
          description: A paged array of pets
        default:
          content:
            application/json:
              example:
                code: 101010
                message: "Invalid pet type, only cat and dogs allowed"
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      summary: create a single pet
      tags:
      - pets
      x-accepts: application/json
    post:
      deprecated: false
      description: Create a pet and key characteristics
      operationId: createPet
      parameters: []
      requestBody:
        content:
          application/json:
            example:
              id: 12345
              name: Indiana
              petType: dog
            schema:
              $ref: '#/components/schemas/Pet'
        description: A single Pet object used to create a new Pet
        required: true
      responses:
        "201":
          content: {}
          description: Null response
        default:
          content:
            application/json:
              example:
                code: 101010
                message: "Invalid pet type, only cat and dogs allowed"
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      summary: Create a new Pet object
      tags:
      - pets
      x-content-type: application/json
      x-accepts: application/json
  /pets/{petId}:
    get:
      deprecated: false
      description: Info for a specific pet
      operationId: showPetById
      parameters:
      - description: The id of the pet to retrieve
        example: "33918"
        explode: false
        in: path
        name: petId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              example:
                id: 12345
                name: Cody
                petType: dog
              schema:
                $ref: '#/components/schemas/Pet'
          description: Expected response to a valid request
        default:
          content:
            application/json:
              example:
                code: 101010
                message: "Invalid pet type, only cat and dogs allowed"
              schema:
                $ref: '#/components/schemas/Error'
          description: unexpected error
      summary: showPetById
      tags:
      - pets
      x-accepts: application/json
components:
  schemas:
    Pet:
      description: A single Pet object
      example:
        id: 123
        name: Cody
        petType: dog
      properties:
        id:
          description: a unique identifier for a Pet
          example: 1234
          type: integer
        name:
          description: the name lovingly given to the pet
          example: Fido
          type: string
        petType:
          $ref: '#/components/schemas/PetPetType'
      required:
      - id
      - name
      title: Pet
    Error:
      description: An error object
      example:
        code: 101010
        message: Invalid pet type
      properties:
        code:
          description: An error code for understanding the error which occured
          example: 101010
          type: integer
        message:
          description: Error message that provides human readable details about the
            error.
          example: "Invalid pet type, only cat and dogs allowed"
          type: string
      required:
      - code
      - message
      title: Error
    Pets:
      items:
        $ref: '#/components/schemas/Pet'
      type: array
    PetPetType:
      description: the type of pets allowed
      enum:
      - dog
      - cat
      example: dog
      type: string
  securitySchemes:
    bearerAuth:
      description: bearer token security
      scheme: bearer
      type: http

